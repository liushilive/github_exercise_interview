{"index.html": {"url": "index.html", "title": "介绍", "keywords": "", "body": "软件测试面试汇总我只是搬运工，如果文中有冒犯到你的地方，请告知我删除内容，或添加来源。"}, "md/summary/测试基础.html": {"url": "md/summary/测试基础.html", "title": "测试基础", "keywords": "", "body": "测试基础1.什么是软件测试？为了发现程序中的错误而执行程序的过程2.软件测试的目的？首先，测试并不仅仅是为了要找出错误。通过分析错误产生的原因和错误的分布特征，可以帮助项目管理者发现当前所采用的软件过程的缺陷，以便改进。同时，这种分析也能帮助我们设计出有针对性地检测方法，改善测试的有效性。其次，没有发现错误的测试也是有价值的，完整的测试是评定测试质量的一种方法。详细而严谨的可靠性增长模型可以证明这一点。测试的目的是按照用户所需软件的质量，检查开发软件过程出现的bug,使得开发人员及时修改，可以避免在开发结束的时候发现软件存在质量问题，避免公司不必要的损失。赢得用户对公司产品的认可。测试的目的是以最少人力、物力和时间找出软件中潜在各种错误和缺陷，通过修正种错误和缺陷提高软件质量，回避软件发布后由于潜在的软件缺陷和错误造成的隐患带来的商业风险。测试的附带收获是，它能够证明软件的功能和性能与需求说明相符合。实施测试收集到的测试结果数据为可靠性分析提供了依据。测试不能表明软件中不存在错误，它只能说明软件中存在错误。3.软件测试的目标发现尽可能多的错误测试是一个为了寻找错误而运行程序的过程。一个好的测试案例是指很可能找到迄今为止尚未发现的错误的用例。一个成功的测试是指揭示了迄今为止尚未发现的错误的测试。4.软件测试的原则应当把尽早地和不断地进行软件测试作为软件开发者的座右铭。测试用例应由测试输入数据和对应的预期输出结果这两部分组成。程序员应避免检查自己的程序。在设计测试用例时，应包括合理的输入条件和不合理的输入条件。软件测试的原则充分注意测试中的群集现象。经验表明，测试后程序中残存的错误数目与该程序中已发现的错误数目成正比。严格执行测试计划，排除测试的随意性。应当对每一个测试结果做全面检查。妥善保存测试计划，测试用例，出错统计和最终分析报告，为维护提供方便。5.测试的工作流程测试的功能点都是来自于需求文档从产品的需求文档中提炼出来的，等产品完成需求文档并完成需求文档的评审会就开始测试用例的编写工作，一般项目半个月迭代一次的话设计测试的时间一般是3天就要完成，我们设计测试用例的时间还是比较充足案例设计一般都会和产品的开发并行。在案例完成编写之后大家会开会一起来评审你的案例。在评审的过程中大家会提出一些问题，会后要把这些遗漏的测试点补充上，但是这时并不是大功告成哦。痛苦的案例执行才刚刚开始，哈哈哈，在这个里我为什么用痛苦来形容呢，大家也知道开发一般只是把功能开发好自己可能都没有自测过就发给测试，这时候测试发现和自己想象中的APP差距太大，有的时候会发现一眼都能看到的问题为什么还要等着测试来发现，小编遇到这样的问题也表示无奈。但是只能硬着头皮测下去。在测试的过程中每天在下班的时候还需要发测试日报告诉项目中的成员现在案例执行的情况，当然了测试完成之后发测试报告也是必须的了，算是对这次项目跌代测试完成的一个交代。6.测试工程师的职责测试经理：制定测试计划。确保测试过程正常进行。测试工程师编写测试用例搭建测试环境执行测试7.软件都有多少种分类？根据功能的不同，电脑软件可以粗略地分成四个层次：最贴近电脑硬件的是一些小巧的软件。它们实现一些最基本的功能，通常“固化”在只读存储器芯片中，因此称为固件。系统软件包括操作系统和编译器软件等。系统软件和硬件一起提供一个“平台”。它们管理和优化电脑硬件资源的使用。支持软件。包括图形用户界面、软件开发工具、软件评测工具、数据库管理系统、中间件等。应用软件种类最多，包括办公软件、电子商务软件、通信软件、行业软件，游戏软件等等。8.软件的分类按功能分类系统软件支撑软件应用软件按服务对象的范围分类项目软件产品软件按软件规模分类微型小型中型大型甚大型极大型按软件工作方式分类实时处理软件分时软件交互式软件批处理软件按技术架构分类单机版软件C/S架构软件B/S架构软件9.测试的主要方面功能测试：链接测试表单测试Cookies测试设计语言测试数据库测试性能测试：连接速度测试负载测试压力测试接口测试：服务器接口外部接口错误处理可用性测试：导航测试图形测试内容测试整体界面测试兼容性测试：平台测试浏览器测试视频测试Modem/连接速率测试打印机测试组合测试安全测试：目录设置登录Session日志文件加密安全漏洞代码合法性测试：程序代码合法性检查显示代码合法性检查文档测试：10.软件测试的对象软件测试并不等于程序测试。软件测试应贯穿于软件定义与开发的整个期间。需求分析、概要设计、详细设计以及程序编码等各阶段所得到的文档，包括需求规格说明、概要设计规格说明、详细设计规格说明以及源程序，都应成为软件测试的对象11.什么是“测试案例”？测试案例是一份文档，它描述了一个输入、反应、或者是与其相应的预期的响应，以便来判断应用软件的工作是否正常。测试案例应当包括测试标识、测试案例的名称、目标、测试条件/设置、输入数据要求、步骤、以及预期的结果。注：开发一个应用软件的测试案例的过程，需要全面、深入地考虑该软件的操作，所以有助于发现在其需求或设计里面的问题。因此，如果有可能，在开发周期中应当尽早准备测试案例。12.怎么编写案例？案例的编写与测试阶段的定义有很大的关系。系统测试和unit测试的案例可能不同。总体而言测试案例根据系统的需求而定。13.软件测试的两种方法黑盒测试和白盒测试黑盒：这种方法是把测试对象看做一个黑盒子，测试人员完全不考虑程序内部的逻辑结构和内部特性，只依据程序的需求规格说明书，检查程序的功能是否符合它的功能说明。黑盒测试又叫做功能测试或数据驱动测试。白盒：此方法把测试对象看做一个透明的盒子，它允许测试人员利用程序内部的逻辑结构及有关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。通过在不同点检查程序的状态，确定实际的状态是否与预期的状态一致。因此白盒测试又称为结构测试或逻辑驱动测试。14.测试结束的标准是什么？用例全部执行。覆盖率达到标准。缺陷率达到标准。其他指标达到质量标准15.软件的生命周期软件生命周期是指一个计算机软件从功能确定、设计，到开发成功投入使用，并在使用中不断地修改、增补和完善，直到停止该软件的使用的全过程（从酝酿到废弃的过程）16.什么是软件的生命周期？生命周期从收到应用软件开始算起，到该软件不再使用为止。它有如下各方面的内容：初始构思、需求分析、功能设计、内部设计、文档计划、测试计划、文档准备、集成、测试、维护、升级、再测试、逐步淘汰(phase-out)、等等。17.软件测试按过程分为三个步骤单元测试：单元测试又称模块测试，是针对软件设计的最小单位─程序模块，进行正确性检验的测试工作。其目的在于发现各模块内部可能存在的各种差错。单元测试需要从程序的内部结构出发设计测试用例。多个模块可以平行地独立进行单元测试。集成测试：在运行（可能是不完整）的应用中保证软件单元被结合后能正常操作的测试执行的阶段系统测试：当应用作为整体运行时的测试执行阶段18.面向对象的设计如何影响测试？好的面向对象的工程设计使得从代码追溯内部设计、再到功能测试，最后追溯到需求，成为一件容易的事。因为它对黑盒测试的影响很少（不需要了解应用软件的内部设计），而白盒测试只需针对该应用软件的对象。如果该应用软件设计得好，就可简化测试设计。19.软件带来错误的原因很多。主要的原因有哪些？交流不够、交流上有误解或者根本不进行交流软件复杂性程序设计错误需求变化时间压力代码文档贫乏软件开发工具20.做好软件测试的一些关键点测试人员必须经过测试基础知识和理论的相关培训。测试人员必须熟悉系统功能和业务。测试必须事先要有计划，而且测试方案要和整个项目计划协调好必须事先编写测试用例，测试执行阶段必须根据测试用例进行易用性，功能，分支，边界，性能等功能性和非功能性需要都要进行测试对于复杂的流程一定要进行流程分支，组合条件分析，再进行等价类划分准备相关测试数据测试设计的一个重要内容是要准备好具体的测试数据，清楚这个测试数据是测哪个场景或分支的个人任务平均每三个测试用例至少应该发现一个BUG，否则只能说明测试用例质量不好除了每日构建的冒烟测试可以考虑测试自动化外，其它暂时都不要考虑去自动化。21.软件测试的步骤是什么？测试过程按4个步骤进行，即单元测试（UnitTesting）、集成测试（IntegratedTesting）、确认测试（ValidationTesting）和系统测试（SystemTesting）及发版测试。开始是单元测试，集中对用源代码实现的每一个程序单元进行测试，检查各个程序模块是否正确地实现了规定的功能。集成测试把已测试过的模块组装起来，主要对与设计相关的软件体系结构的构造进行测试。确认测试则是要检查已实现的软件是否满足了需求规格说明中确定了的各种需求，以及软件配置是否完全、正确。22.如何录制测试脚本？新建一个脚本（Web/HTML协议）点击录制按钮，在弹出的对话框的URL中输入”about:blank”。在打开的浏览器中进行正常操作流程后，结束录制。调试脚本并保存。可能要注意到字符集的关联。设置测试场景针对性能设置测试场景，主要判断在正常情况下，系统的平均事务响应时间是否达标针对压力负载设置测试场景，主要判断在长时间处于满负荷或者超出系统承载能力的条件下，系统是否会崩溃23.应该考虑进行如何测试的测试方法黑盒测试──不考虑内部设计和代码，根据需求和功能进行测试。白盒测试──根据应用软件的代码的内部逻辑，按照代码的语句、分支、路径和条件进行测试。功能测试——对一个应用软件的功能模块进行黑盒测试。这种测试应当由测试人员进行。但这并不意味着程序员在推出软件之前不进行代码检查。（这一原则适用于所有的测试阶段。）系统测试──针对全部需求说明进行黑盒测试，包括系统中所有的部件。回归测试──每当软件经过了整理、修改、或者其环境发生变化，都重复进行测试。很难说需要进行多少次回归测试，特别是是到了开发周期的最后阶段。进行此种测试，特别适于使用自动测试工具。负荷试验──在大负荷条件下对应用软件进行测试。例如测试一个网站在不同负荷情况下的状况，以确定在什么情况下系统响应速度下降或是出现故障。压力测试──经常可以与“负荷测试”或“性能测试”相互代替。这种测试是用来检查系统在下列条件下的情况：在非正常的巨大负荷下、某些动作和输入大量重复、输入大数、对数据库进行非常复杂的查询，等等。性能测试──经常可以与“压力测试”或“负荷测试”相互代替。理想的“性能测试”（也包括其他任何类型的测试）都应在质量保障和测试计划的文档终予以规定。可用性测试──是专为“对用户友好”的特性进行测试。这是一种主观的感觉，取决于最终用户或顾客。可以进行用户会见、检查、对用户会议录像、或者使用其他技术。程序员和测试人员通常不参加可用性测试。安装/卸载测试──对安装/卸载进行测试（包括全部、部分、升级操作）。安全测试──测试系统在应付非授权的内部/外部访问、故意的损坏时的防护情况。这需要精密复杂的测试技术。兼容性测试──测试在特殊的硬件/软件/操作系统/网络环境下的软件表现。α测试──在开发一个应用软件即将完成时所进行的测试。此时还允许有较小的设计修改。通常由最终用户或其他人进行这种测试，而不是由程序员和测试人员来进行。β测试──当开发和测试已基本完成，需要在正式发行之前最后寻找毛病而进行的测试。通常由最终用户或其他人进行这种测试，而不是由程序员和测试人员来进行。24.怎样估计测试工作量？效率假设：即测试队伍的工作效率。对于功能测试，这主要依赖于应用的复杂度，窗口的个数，每个窗口中的动作数目。对容量测试，主要依赖于建立测试所需数据的工作量大小。测试假设：为了验证一个测试需求所需测试动作数目。应用的维数：应用的复杂度指标。例如要加入一个记录，测试需求的维数就是这个记录中域的数目。所处测试周期的阶段：有些阶段主要工作都在设计，有些阶段主要是测试执行。25.测试设计的问题不做测试设计，测试过程也是胡乱建立的。测试设计不详细，不是基于可量度的测试策略，例如测试计划覆盖一个集合或者测试需求的一个子集。测试过程没有采用最好的技术来检验WindowsC/S结构的测试需求。测试用例的选择规则。选择与测试需求的实质部分最相关的测试用例。选择的测试用例应该不容易应用程序的改变的影响。26.当测试过程发生错误时，有哪几种解决办法？跳转到别的测试过程调用一个能够清除错误的过程退出过程，启动另一个退出过程和应用程序，重新启动启动Windows，在失败的地方重新开始测试27.测试执行的问题测试执行的问题自动化测试没有有效的利用，使得手工测试太多。测试结果的捕获没有系统性，而且没有查看或调查缺陷报告必须用手工加入缺陷跟踪系统错误分类测试用例失败正常错误脚本命令失败致命错误导致测试停止，这种情况最好重起Windows。28.测试评估的目标量化测试进程生成缺陷和测试覆盖率的总结报告测试评估的问题没有把测试覆盖率作为报告测试进程的根据，使得不知测试是否结束；没有做缺陷评估，缺陷评估是量度软件可行性的重要指标；不使用专门的软件工具进行数据输入任务和相应的评估活动，使得这些任务变得繁重累人。29.如何提高测试？提高测试需要从几个方面着手，其实只是自己的一些感觉，不一定就需要按部就班，需要找自己适合的点。制定完备的测试计划清楚的认识测试计划，测试计划是一个文档，能够保证整个研发过程中顺利执行的一个指导性文档，它描述了几个方面的问题。描述了项目的的描述了项目的开发周期描述了在测试中遇到的技术描述了测试案例的设计周期描述测试案例的执行周期描述了测试过程中用到的工具或者技术描述了测试过程中用到的资源情况描述了测试过程中可能遇到的风险以及规避方法9）提高案例设计水平30.C/S模式的优点和缺点C/S模式的优点由于客户端实现与服务器的直接相连，没有中间环节，因此响应速度快。操作界面漂亮、形式多样，可以充分满足客户自身的个性化要求。C/S结构的管理信息系统具有较强的事务处理能力，能实现复杂的业务流程。C/S模式的缺点需要专门的客户端安装程序，分布功能弱，针对点多面广且不具备网络条件的用户群体，不能够实现快速部署安装和配置。兼容性差，对于不同的开发工具，具有较大的局限性。若采用不同工具，需要重新改写程序。开发成本较高，需要具有一定专业水准的技术人员才能完成。31.B/S模式的优点和缺点B/S模式的优点具有分布性特点，可以随时随地进行查询、浏览等业务处理。业务扩展简单方便，通过增加网页即可增加服务器功能。维护简单方便，只需要改变网页，即可实现所有用户的同步更新。开发简单，共享性强。B/S模式的缺点个性化特点明显降低，无法实现具有个性化的功能要求。操作是以鼠标为最基本的操作方式，无法满足快速操作的要求。页面动态刷新，响应速度明显降低。无法实现分页显示，给数据库访问造成较大的压力。功能弱化，难以实现传统模式下的特殊功能要求。32.测试结束的标准是什么？测试超过了预定时间，则停止测试。执行了所有的测试用例，但并没有发现故障，则停止测试。使用特定的测试用例设计方案作为判断测试停止的基础。正面指出停止测试的具体要求，即停止测试的标准可定义为查出某一预订数目的故障。根据单位时间内查出故障的数量决定是否停止测试。33.怎么才能够全面的测试到每一个点？测试的全面性主要需要在设计测试计划的时候考虑，从测试策略，产品需求等等多个角度考虑从而定义全部的测试点34.开发与测试的关系开发和测试是一个有机的整体！在产品的发布之前，开发和测试是循环进行的，测出的缺陷要经开发人员修改后继续测试。在开发的同时测试经理开始编写测试用例，测试文档要参考开发文档，所以开发和测试是不可分割的，少了任何一个都不能开发出产品。从角色方面看，像理论和实验的关系，开发人员通过自己的想象创造出一套思想，之后测试人员再对它进行检验、证伪，开发人员再修改的过程从而不断丰富产品。从方法方面看，是演绎和归纳的关系，一个要掌握大量的技术，一个要不断的从实例中学习。因这两方面的不同，所以开发和测试看上去做的工作很不一样。开发与测试是相辅相承、密不可分的，开发人员开发出新的产品后要通过测试判断产品是否完全满足用户的需求。如果发现缺陷，提交给开发人员进行修复，然后再转交测试人员进行回归测试，直到产品符合需求规格说明。一个符合用户需求的产品是开发和测试共同努力的成果。35.怎么和开发沟通测试和开发沟通大部分都在讨论bug，测试说是bug但是开发认为这个不是bug，对于测试来说就很头痛了明明是问题但是为什么开发不主动修改呢？这时候测试应该去需求文档中找出有关这个功能的描述或者去询问产品经理，总之不要正面冲突，要拿出证据来说服开发。36.测试过程制定系统测试计划编写系统测试用例执行系统测试用例跟踪管理缺陷总结测试37.测试出口准则所有的缺陷已经解决项目规定测试阶段时间结束执行完成测试计划中的系统测试内容，修正了所发现的错误，未修正的错误被项目经理允许留到下一版本高级经理和项目经理均同意结束测试测试结果经过了专门的评审38.测试完成标准系统功能与用户需求说明书一致功能性测试用例通过率达到100%非功能性测试用例通过率达到95%一、二级错误修复率应达到100%。三、四级错误修复率应达到80%以上。五级错误修复率应达到60%以上。39.测试活动中统计了哪些数据？工作量bug数量40.如何选择用户测试的工作产品？在用户有需求得到签字确认之后，我们选择用户测试的工作产品。我们几乎所有的项目都进行了测试，我们是在项目立项公告中得知需要对工作产品进行测试。41.测试环境描述在哪儿？测试环境在测试计划里面进行描述，测试计划是由测试经理编写，我们在测试计划中了解到自己是此次项目组的测试工程师。42.进行测试时产生了哪些文档或记录？测试的整个过程有系统测试计划、系统测试用例、系统测试报告、缺陷报告、产品发布说明在执行测试的过程中只有缺陷报告，这个还是用在缺陷管理工具中进行的，最后在工具中导出缺陷报告43.测试人员需要何时参加需求分析？如果条件循序原则上来说是越早介入需求分析越好因为测试人员对需求理解越深刻对测试工作的开展越有利可以尽早的确定测试思路减少与开发人员的交互减少对需求理解上的偏差44.产品测试完以后由谁来发布？这个不定开发发布还是技术支持发布都有可能45.软件测试与调试的关系测试条件已知，规程可定义，结果可预知测试可以计划，过程可控测试是检验，调试是推理过程测试表明程序失败，调试表明正确测试可不了解设计细节测试由非设计人员完成测试有理论依据测试可自动化46.质量的八大特性是什么？各种特性的定义？功能性：软件所实现的功能达到它的设计规范和满足用户需求的程度性能：在规定条件下，实现软件功能所需的响应时间和计算机资源（CPU、内存、磁盘空间和数据吞吐量）的使用程度可靠性：在满足一定条件的应用环境中，软件能够正常维持其工作的能力，在出现一些错误操作时，软件可以具有容错性，如果软件意外退出，重新启动后可以恢复最近的软件数据安全性：为了防止意外或人为的破坏，软件应具备的自身保护能力使用性：用户在理解、学习和操作软件的过程中的付出的努力的难易程度维护性：软件在运行维护过程中，如果出现了运行故障或者扩展新功能和性能，软件系统是否具有可分析性和良好的扩展性，重新设计后的软件的稳定性和可测试性移植性：软件从现有运行平台向另一个运行平台过度的适应程度和平台可替换性重用性：整个软件或其中一部分能作为软件包而被再利用的程度47.什么是软件的“质量”？高质量的软件是适当的、无错误的，能在预算内按时交货，满足需求/或期望，并且是可维护的。所以，质量是一个主观的术语。它取决于谁是客户以及客户对项目计划的影响。对一个软件开发项目来说，“客户”的范围很广，包括最终用户、客户所接受的测试者、与客户合同有关的官员、客户管理、开发机构的管理者/会计/测试人员/销售人员、未来的软件维护工程师、股票持有者、杂志专栏记者，等等。每一类客户对“质量”都有自己的倾向性–会计部门判断质量会从其收益来考虑，而最终用户则重视友好的用户界面和没有错误。48.软件质量应该从哪些方面来评价？可靠性、安全性、性能、易用性、外观、稳定性49.什么是“软件质量保障”？软件质量保障涉及到整个软件开发过程，包括监视和改善过程、确保任何经过认可的标准和步骤都被遵循、并且保证问题被发现和被处理。从本质上说，软件质量保障是“预防”。50.为什么软件会有毛病？交流错误或者没有进行交流，软件的复杂性编程错误需求变更客户恐怕不明白改变需求的影响，也许是知道但依然需要变更──会导致重新设计、重订工程进度表、对其他项目的影响、已完成的工作需要重做或者放弃、对硬件需求的影响等等。如果在项目中出现许多小的改变或一个大的改变，在项目各部分中出现已知或未知的相关的问题，可能会相互影响并导致出现问题。而且，不断地变更也会增加软件的复杂性，可能会导致错误的出现。这样就会影响技术人员的积极性。在一些快速变化的商业环境里，持续变更需求的影响是致命的。在这种情况下，管理者必须知道它的危险性。质量保障和测试工程师必须与此相适应，并安排持续的广泛的测试，以克服不可避免产生的问题。时间压力因为有许多猜测成分，软件开发项目的进度很难安排得理想。当最后期限快到的时候，压力逐渐增大，错误随之产生自负心理、代码文档质量差、软件开发工具51.什么是UML？UnifiedModelingLanguage它是一种用于描述，构造软件系统以及商业建模的语言。简单的理解就是它可以以一种直观的方式表示出一个系统的各项内容52.什么是CMM？CMM：CapabilityMaturityModel，即“能力成熟度模型”。它是一个分5级的、可以描述结构完善程度的模型，用它来说明所交付的软件的效能。53.比较一下黑盒测试、白盒测试、单元测试、集成测试、系统测试、验收测试的区别与联系黑盒测试：把测试对象当成一个黑盒子，测试人员完全不考虑逻辑结构和内部特性，只依据程序的需求说明书来检查程式的功能是否满足它的功能说明。白盒测试：把测试对象当成一个透明的盒子，允许测试人员利用程序内部逻辑结构及相关信息，设计或选择测试用例，对程式所有逻辑路径进行测试。单元测试：白盒测试的一种，对软件设计中的单元模块进行测试。集成测试：在单元测试的基础上，对单元模块之间的连接和组装进行测试。系统测试：在所有都考虑的情况下，对系统进行测试。验收测试：第三方进行的确认软件满足需求的测试。54.比较负载测试、压力测试，容量测试和强度测试区别负载测试：在一定的工作负荷下，系统的负荷及响应时间。通过逐步增加系统负载，最终确定在满足性能指标的情况下，系统能承受的最大负载量的测试。强度测试：又称疲劳强度测试，在系统稳定运行的情况下能够支持的最大并发用户数，持续执行一段时间业务，通过综合分析，确定系统处理最大工作量强度性能的过程。一定负荷条件下，在较长时间跨度内的系统连续运行给系统性能所造成的影响。容量测试：容量测试目的是通过测试预先分析出反映软件系统应用特征的某项指标的极限值（如最大并发用户数、数据库记录数等），系统在其极限值状态下没有出现任何软件故障或还能保持主要功能正常运行。容量测试还将确定测试对象在给定时间内能够持续处理的最大负载或工作量。容量测试的目的是使系统承受超额的数据容量来发现它是否能够正确处理。容量测试是面向数据的，并且目的是显示系统可以处理目标内确定的数据容量。压力测试：通过逐步增加系统负载，最终确定在什么负载条件下系统性能将处于崩溃状态，以此获得系统能提供的最大服务级别的测试。55.测试执行过程的三个阶段初测期测试主要功能和关键的执行路径，排除主要障碍。细测期依据测试计划和测试大纲、测试用例，逐一测试大大小小的功能、方方面面的特性、性能、用户界面、兼容性、可用性等等；预期可发现大量不同性质、不同严重程度的错误和问题。回归测试期系统已达到稳定，在一轮测试中发现的错误已十分有限；复查已知错误的纠正情况，确认未引发任何新的错误时，终结回归测试。56.什么是验证、评价、预排、检查？验证(verification)涉及了回顾和会议，以评估文档、计划、代码、需求和说明书。可以通过检查表、调查表、排练、和检查会来进行。评价(validation)则指在检察完成之后的实际测试。术语“IV”和“V”分别代表验证和评价。预排是一个非正式的会议，用来进行评估和信息交流。通常不需要或者只需很少一点准备。检查比预排更正式一点，通常有3-8个人参加会议，包括一个仲裁者(moderator)、读者（可以是作者或者任何评论者）、一个记录员作记录。典型的检查对象是一个文件，例如需求说明或者测试计划，目的在于发现问题和查找遗漏，而不是去对任何东西进行实际的修改。会议的参加者应当有准备，应当通读文件，大多数的问题会在准备的过程中被发现。检查会的结果应写成书面报告。对检查会进行全面准备是困难而艰苦的工作，但它是保证质量最有用的方法。在检查过程中，最有经验的雇员的作用就向‘大哥哥’一样，他们的技能也许不大显眼，但对任何软件开发机构是最重要的，这是因为预防错误要比发现错误在费用方面更加有效。57.什么是兼容性测试？兼容性测试侧重哪些方面？兼容测试主要是检查软件在不同的硬件平台、软件平台上是否可以正常的运行，即是通常说的软件的可移植性。兼容的类型，如果细分的话，有平台的兼容，网络兼容，数据库兼容，以及数据格式的兼容。兼容测试的重点是，对兼容环境的分析。通常，是在运行软件的环境不是很确定的情况下，才需要做兼容。根据软件运行的需要，或者根据需求文档，一般都能够得出用户会在什么环境下使用该软件，把这些环境整理成表单，就得出做兼容测试的兼容环境了。兼容和配置测试的区别在于，做配置测试通常不是CleanOS下做测试，而兼容测试多是在CleanOS的环境下做的。58.我现在有个程序，发现在Windows上运行得很慢，怎么判别是程序存在问题还是软硬件系统存在问题？检查系统是否有中毒的特征；检查软件/硬件的配置是否符合软件的推荐标准；确认当前的系统是否是独立，即没有对外提供什么消耗CPU资源的服务；如果是C/S或者B/S结构的软件，需要检查是不是因为与服务器的连接有问题，或者访问有问题造成的；在系统没有任何负载的情况下，查看性能监视器，确认应用程序对CPU/内存的访问情况。59.测试的策略有哪些？黑盒/白盒，静态/动态，手工/自动，冒烟测试，回归测试，公测（Beta测试的策略）60.正交表测试用例设计方法的特点是什么？用最少的实验覆盖最多的操作，测试用例设计很少，效率高，但是很复杂；对于基本的验证功能，以及二次集成引起的缺陷，一般都能找出来；但是更深的缺陷，更复杂的缺陷，还是无能为力的；具体的环境下，正交表一般都很难做的。大多数，只在系统测试的时候使用此方法。61.描述使用bugzilla缺陷管理工具对软件缺陷（BUG）跟踪的管理的流程？就是Bugzilla的状态转换图。62.你觉得bugzilla在使用的过程中，有什么问题？界面不稳定；根据需要配置它的不同的部分，过程很烦琐。流程控制上，安全性不好界定，很容易对他人的Bug进行误操作；没有综合的评分指标，不好确认修复的优先级别。63.描述测试用例设计的完整过程？需求分析+需求变更的维护工作；根据需求得出测试需求；设计测试方案，评审测试方案；方案评审通过后，设计测试用例，再对测试用例进行评审；64.单元测试的策略有哪些？逻辑覆盖、循环覆盖、同行评审、桌前检查、代码走查、代码评审、景泰数据流分析65.使用QTP做功能测试，录制脚本的时候，要验证多个用户的登录情况/查询情况，如何操作？分析用户登录的基本情况，得出一组数据，通过性测试/失败性测试的都有（根据TC来设计这些数据），然后录制登录的脚本，将关键的数据参数化，修改脚本，对代码进行加强，调试脚本。66.QTP中的Action有什么作用？有几种？Action的作用用Action可以对步骤集进行分组步骤重组，然后被整体调用拥有自己的sheet组合有相同需求的步骤，整体操作具有独立的对象仓库Action的种类可复用Action不可复用Action外部Action67.TestDirector有些什么功能，如何对软件测试过程进行管理？需求管理定义测试范围定义需求树描述需求树的功能点测试计划定义测试目标和测试策略。分解应用程序，建立测试计划树。确定每个功能点的测试方法。将每个功能点连接到需求上，使测试计划覆盖全部的测试需求。描述手工测试的测试步骤指明需要进行自动测试的功能点测试执行定义测试集合。为每个测试人员制定测试任务和测试日程安排。运行自动测试。缺陷跟踪记录缺陷查看新增缺陷，并确定哪些是需要修正的相关技术人员修改缺陷回归测试分析缺陷统计图表，分析应用程序的开发质量。68.你所熟悉的软件测试类型都有哪些？请试着分别比较这些不同的测试类型的区别与联系（如功能测试、性能测试……）？CompatibilityTesting（兼容性测试），也称“Configurationtesting（配置测试）”，测试软件是否和系统的其它与之交互的元素之间兼容，如：浏览器、操作系统、硬件等。验证测试对象在不同的软件和硬件配置中的运行情况。Functionaltesting（功能测试），也称为behavioraltesting（行为测试），根据产品特征、操作描述和用户方案，测试一个产品的特性和可操作行为以确定它们满足设计需求。本地化软件的功能测试，用于验证应用程序或网站对目标用户能正确工作。使用适当的平台、浏览器和测试脚本，以保证目标用户的体验将足够好，就像应用程序是专门为该市场开发的一样。Performancetesting（性能测试），评价一个产品或组件与性能需求是否符合的测试。包括负载测试、强度测试、数据库容量测试、基准测试等类型。69.软件的评审一般由哪些人参加？其目的是什么？在正式的会议上将软件项目的成果（包括各阶段的文档、产生的代码等）提交给用户、客户或有关部门人员对软件产品进行评审和批准。其目的是找出可能影响软件产品质量、开发过程、维护工作的适用性和环境方面的设计缺陷，并采取补救措施，以及找出在性能、安全性和经济方面的可能的改进。人员：用户、客户或有关部门开发人员，测试人员，需求分析师都可以，就看处于评审那个阶段70.测试活动中，如果发现需求文档不完善或者不准确，怎么处理？测试需求分析发现需求文档不完善或者不准确，应该立即和相关人员进行协调交流。71.阶段评审与项目评审有什么区别？阶段评审：对项目各阶段成果和工作评审项目评审：对项目工作和产品总体评审72.什么是桩模块？什么是驱动模块？桩模块：被测模块调用模块驱动模块调用被测模块73.什么是扇入？什么是扇出？扇入：被调次数，扇出：调其它模块数目74.你认为做好测试计划工作的关键是什么？软件测试计划就是在软件测试工作正式实施之前明确测试的对象，并且通过对资源、时间、风险、测试范围和预算等方面的综合分析和规划，保证有效的实施软件测试；做好测试计划工作的关键：目的，管理，规范明确测试的目标，增强测试计划的实用性编写软件测试计划得重要目的就是使测试过程能够发现更多的软件缺陷，因此软件测试计划的价值取决于它对帮助管理测试项目，并且找出软件潜在的缺陷。因此，软件测试计划中的测试范围必须高度覆盖功能需求，测试方法必须切实可行，测试工具并且具有较高的实用性，便于使用，生成的测试结果直观、准确坚持“5W”规则，明确内容与过程“5W”规则指的是“What（做什么）”、“Why（为什么做）”、“When（何时做）”、“Where（在哪里）”、“How（如何做）”。利用“5W”规则创建软件测试计划，可以帮助测试团队理解测试的目的（Why），明确测试的范围和内容（What），确定测试的开始和结束日期（When），指出测试的方法和工具（How），给出测试文档和软件的存放位置（Where）。采用评审和更新机制，保证测试计划满足实际需求测试计划写作完成后，如果没有经过评审，直接发送给测试团队，测试计划内容的可能不准确或遗漏测试内容，或者软件需求变更引起测试范围的增减，而测试计划的内容没有及时更新，误导测试执行人员。分别创建测试计划与测试详细规格、测试用例应把详细的测试技术指标包含到独立创建的测试详细规格文档，把用于指导测试小组执行测试过程的测试用例放到独立创建的测试用例文档或测试用例管理数据库中。测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。75.你觉得对于测试有哪些基本素质要求细心，只有细心才能保证不遗漏测试点并及时发现问题。善于怀疑，在测试的过程中总会遇到开发会说这个功能肯定没有问题，这个时候就要小心开发给你埋下的坑了。要有追根究底的精神，我们有的时候发现一些不好复现的bug，对于这样的bug一定要有不找出问题不罢休的精神。考虑问题要周到，需要测试结合需求业务流程，和不同手机的兼容等多个方面来考虑问题。要有良好的沟通能力，不要让开发说服你这个问题修补修改，如果你认为这个问题比较严重需要说服开发来修改他/她认为不用修改的问题。76.一套完整的测试应该由哪些阶段组成？测试计划、测试设计与开发、测试实施、测试评审与测试结论77.软件测试的流程是什么？需求调查：全面了解您的系统概况、应用领域、软件开发周期、软件开发环境、开发组织、时间安排、功能需求、性能需求、质量需求及测试要求等根据系统概况进行项目所需的人员、时间和工作量估计及项目报价。制定初步的项目计划：在与您充分共同和协商的基础上制定我们的测试计划。测试准备：组织测试团队、培训、建立测试和管理环境等。测试设计：按照测试要求进行每个测试项的测试设计，包括测试用例的设计及测试脚本的开发等。测试实施：按照测试计划进行实施测试。测试评估：根据测试的结果，出具测试评估报告。78.说说你对SQA的职责和工作活动（如软件度量）的理解SQA就是独立于软件开发的项目组，通过对软件开发过程的监控，来保证软件的开发流程按照指定的CMM规程（如果有相应的CMM规程），对于不符合项及时提出建议和改进方案，必要是可以要高层经理汇报以求问题的解决。通过这样的途径来预防缺陷的引入，从而减少后期软件的维护成本。ＳＱＡ主要的工作活动包括制定SQA工作计划，参与阶段产物的评审，进行过程质量、功能配置及物理配置的审计等；对项目开发过程中产生的数据进行度量等等；79.单元测试的主要内容？模块接口测试、局部数据结构测试、路径测试、错误处理测试、边界测试80.集成测试也叫组装测试或者联合测试，请简述集成测试的主要内容？在把各个模块连接起来的时候，穿越模块接口的数据是否会丢失；一个模块的功能是否会对另一个模块的功能产生不利的影响；各个子功能组合起来，能否达到预期要求的父功能；全局数据结构是否有问题；单个模块的误差累积起来，是否会放大，从而达到不能接受的程度。81.简述集成测试与系统测试关系？集成测试的主要依据概要设计说明书，系统测试的主要依据是需求设计说明书；集成测试是系统模块的测试，系统测试是对整个系统的测试，包括相关的软硬件平台、网络以及相关外设的测试。82.软件测试的文档测试应当贯穿于软件生命周期的全过程，其中用户文档是文档测试的重点。那么软件系统的用户文档包括哪些？用户手册安装和设置指导联机帮助指南、向导样例、示例和模板授权/注册登记表最终用户许可协议83.软件系统中除用户文档之外，文档测试还应该关注哪些文档？开发文档软件需求说明书数据库设计说明书概要设计说明书详细设计说明书可行性研究报告管理文档项目开发计划测试计划测试报告开发进度月报开发总结报告84.简述软件系统中用户文档的测试要点？读者群。文档面向的读者定位要明确。对于初级用户、中级用户以及高级用户应该有不同的定位术语。文档中用到的术语要适用与定位的读者群，用法一致，标准定义与业界规范相吻合。正确性。测试中需检查所有信息是否真实正确，查找由于过期产品说明书和销售人员夸大事实而导致的错误。检查所有的目录、索引和章节引用是否已更新，尝试链接是否准确，产品支持电话、地址和邮政编码是否正确。完整性。对照软件界面检查是否有重要的分支没有描述到，甚至是否有整个大模块没有描述到。一致性。按照文档描述的操作执行后，检查软件返回的结果是否与文档描述的相同。易用性。对关键步骤以粗体或背景色给用户以提示，合理的页面布局、适量的图表都可以给用户更高的易用性。需要注意的是文档要有助于用户排除错误。不但描述正确操作，也要描述错误处理办法。文档对于用户看到的错误信息应当有更详细的文档解释。图表与界面截图。检查所有图表与界面截图是否与发行版本相同。样例与示例。像用户一样载入和使用样例。如果是一段程序，就输入数据并执行它。以每一个模块制作文件，确认它们的正确性。语言。不出现错别字，不要出现有二义性的说法。特别要注意的是屏幕截图或绘制图形中的文字。印刷与包装。检查印刷质量；手册厚度与开本是否合适；包装盒的大小是否合适；有没有零碎易丢失的小部件等等。85.单元测试主要内容是什么？单元测试大多数由开发人员来完成，测试人员技术背景较好或者开发系统软件时可能会安排测试人员进行单元测试，大多数进行的单元测试都是开发人员调试程序或者开发组系统联合调试的过程。讨论这个问题主要是扩充一下读者的视野。单元测试一般包括五个方面的测试：模块接口测试：模块接口测试是单元测试的基础。只有在数据能正确流入、流出模块的前提下，其他测试才有意义。模块接口测试也是集成测试的重点，这里进行的测试主要是为后面打好基础。测试接口正确与否应该考虑下列因素：输入的实际参数与形式参数的个数是否相同；输入的实际参数与形式参数的属性是否匹配；输入的实际参数与形式参数的量纲是否一致；调用其他模块时所给实际参数的个数是否与被调模块的形参个数相同；调用其他模块时所给实际参数的属性是否与被调模块的形参属性匹配；调用其他模块时所给实际参数的量纲是否与被调模块的形参量纲一致；调用预定义函数时所用参数的个数、属性和次序是否正确；是否存在与当前入口点无关的参数引用；是否修改了只读型参数；对全程变量的定义各模块是否一致；是否把某些约束作为参数传递。如果模块功能包括外部输入输出，还应该考虑下列因素：文件属性是否正确；OPEN/CLOSE语句是否正确；格式说明与输入输出语句是否匹配；缓冲区大小与记录长度是否匹配；文件使用前是否已经打开；是否处理了文件尾；是否处理了输入/输出错误；输出信息中是否有文字性错误。局部数据结构测试；边界条件测试；模块中所有独立执行通路测试；局部数据结构测试：检查局部数据结构是为了保证临时存储在模块内的数据在程序执行过程中完整、正确，局部功能是整个功能运行的基础。重点是一些函数是否正确执行，内部是否运行正确。局部数据结构往往是错误的根源，应仔细设计测试用例，力求发现下面几类错误：不合适或不相容的类型说明；变量无初值；变量初始化或省缺值有错；不正确的变量名（拼错或不正确地截断）；出现上溢、下溢和地址异常。边界条件测试：边界条件测试是单元测试中最重要的一项任务。众所周知，软件经常在边界上失效，采用边界值分析技术，针对边界值及其左、右设计测试用例，很有可能发现新的错误。边界条件测试是一项基础测试，也是后面系统测试中的功能测试的重点，边界测试执行的较好，可以大大提高程序健壮性。模块中所有独立路径测试：在模块中应对每一条独立执行路径进行测试，单元测试的基本任务是保证模块中每条语句至少执行一次。测试目的主要是为了发现因错误计算、不正确的比较和不适当的控制流造成的错误。具体做法就是程序员逐条调试语句。常见的错误包括：误解或用错了算符优先级；混合类型运算；变量初值错；精度不够；表达式符号错。比较判断与控制流常常紧密相关，测试时注意下列错误：不同数据类型的对象之间进行比较；错误地使用逻辑运算符或优先级；因计算机表示的局限性，期望理论上相等而实际上不相等的两个量相等；比较运算或变量出错；循环终止条件或不可能出现；迭代发散时不能退出；错误地修改了循环变量。模块的各条错误处理通路测试：程序在遇到异常情况时不应该退出，好的程序应能预见各种出错条件，并预设各种出错处理通路。如果用户不按照正常操作，程序就退出或者停止工作，实际上也是一种缺陷，因此单元测试要测试各种错误处理路径。一般这种测试着重检查下列问题：输出的出错信息难以理解；记录的错误与实际遇到的错误不相符；在程序自定义的出错处理段运行之前，系统已介入；异常处理不当；错误陈述中未能提供足够的定位出错信息。86.如何理解强度测试？强度测试是为了确定系统在最差工作环境的工作能力，也可能是用于验证在标准工作压力下的各种资源的最下限指标。它和压力测试的目标是不同的，压力测试是在标准工作环境下，不断增加系统负荷，最终测试出该系统能力达到的最大负荷（稳定和峰值）,而强度测试则是在非标准工作环境下，甚至不断人为降低系统工作环境所需要的资源，如网络带宽，系统内存，数据锁等等，以测试系统在资源不足的情况下的工作状态，通过强度测试，可以确定本系统正常工作的最差环境。强度测试和压力测试的测试指标相近，大多都是与时间相关的指标，如并发量（吞吐量）,延迟（最大、最小、平均）以及顺序指标等强度测试需要对系统的结构熟悉，针对系统的特征设计强度测试的方法87.如何理解压力、负载、性能测试测试？性能测试是一个较大的范围，实际上性能测试本身包含了性能、强度、压力、负载等多方面的测试内容。压力测试是对服务器的稳定性以及负载能力等方面的测试，是一种很平常的测试。增大访问系统的用户数量、或者几个用户进行大数据量操作都是压力测试。而负载测试是压力相对较大的测试，主要是测试系统在一种或者集中极限条件下的相应能力，是性能测试的重要部分。100个用户对系统进行连续半个小时的访问可以看作压力测试，那么连续访问8个小时就可以认为负载测试，1000个用户连续访问系统1个小时也可以看作是负载测试。实际上压力测试和负载测试没有明显的区分。测试人员应该站在关注整体性能的高度上来对系统进行测试。88.什么是系统瓶颈？瓶颈主要是指整个软硬件构成的软件系统某一方面或者几个方面能力不能满足用户的特定业务要求，“特定”是指瓶颈会在某些条件下会出现，因为毕竟大多数系统在投入前。严格的从技术角度讲，所有的系统都会有瓶颈，因为大多数系统的资源配置不是协调的，例如CPU使用率刚好达到100％时，内存也正好耗尽的系统不是很多见。因此我们讨论系统瓶颈要从应用的角度讨论：关键是看系统能否满足用户需求。在用户极限使用系统的情况下，系统的响应仍然正常，我们可以认为改系统没有瓶颈或者瓶颈不会影响用户工作。因此我们测试系统瓶颈主要是实现下面两个目的：发现“表面”的瓶颈。主要是模拟用户的操作，找出用户极限使用系统时的瓶颈，然后解决瓶颈，这是性能测试的基本目标。发现潜在的瓶颈并解决，保证系统的长期稳定性。主要是考虑用户在将来扩展系统或者业务发生变化时，系统能够适应变化。满足用户目前需求的系统不是最好的，我们设计系统的目标是在保证系统整个软件生命周期能够不断适应用户的变化，或者通过简单扩展系统就可以适应新的变化。89.文档测试主要包含什么内容？在国内软件开发管理中，文档管理几乎是最弱的一项，因而在测试工作中特别容易忽略文档测试也就不足为奇了。要想给用户提供完整的产品，文档测试是必不可少的。文档测试一般注重下面几个方面：文档的完整性：主要是测试文档内容的全面性与完整性，从总体上把握文档的质量。例如用户手册应该包括软件的所有功能模块。描述与软件实际情况的一致性：主要测试软件文档与软件实际的一致程度。例如用户手册基本完整后，我们还要注意用户手册与实际功能描述是否一致。因为文档往往跟不上软件版本的更新速度。易理解性：主要是检查文档对关键、重要的操作有无图文说明，文字、图表是否易于理解。对于关键、重要的操作仅仅只有文字说明肯定是不够的，应该附有图表使说明更为直观和明了。文档中提供操作的实例：这项检查内容主要针对用户手册。对主要功能和关键操作提供的应用实例是否丰富，提供的实例描述是否详细。只有简单的图文说明，而无实例的用户手册看起来就像是软件界面的简单拷贝，对于用户来说，实际上没有什么帮助。印刷与包装质量：主要是检查软件文档的商品化程度。有些用户手册是简单打印、装订而成，过于粗糙，不易于用户保存。优秀的文档例如用户手册和技术白皮书，应提供商品化包装，并且印刷精美。90.功能测试用例需要详细到什么程度才是合格的？这个问题也是测试工程师经常问的问题。有人主张测试用例详细到每个步骤执行什么都要写出来，目的是即使一个不了解系统的新手都可以按照测试用例来执行工作。主张这类写法的人还可以举出例子：欧美、日本等软件外包文档都是这样做的。另外一种观点就是主张写的粗些，类似于编写测试大纲。主张这种观点的人是因为软件开发需求管理不规范，变动十分频繁，因而不能按照欧美的高标准来编写测试用例。这样的测试用例容易维护，可以让测试执行人员有更大的发挥空间。实际上，软件测试用例的详细程度首先要以覆盖到测试点为基本要求。举个例子：“用户登陆系统”的测试用例可以不写出具体的执行数据，但是至少要写出五种以上情况（），如果只用一句话覆盖了这个功能是不合格的测试用例。覆盖功能点不是指列出功能点，而是要写出功能点的各个方面（如果组合情况较多时可以采用等价划分）。另一个影响测试用例的就是组织的开发能力和测试对象特点。如果开发力量比较落后，编写较详细的测试用例是不现实的，因为根本没有那么大的资源投入，当然这种情况很随着团队的发展而逐渐有所改善。测试对象特点重点是指测试对象在进度、成本等方面的要求，如果进度较紧张的情况下，是根本没有时间写出高质量的测试用例的，甚至有些时候测试工作只是一种辅助工作，因而不编写测试用例。因此，测试用例的编写要根据测试对象特点、团队的执行能力等各个方面综合起来决定编写策略。最后要注意的是测试人员一定不能抱怨，力争在不断提高测试用例编写水平的同时，不断地提高自身能力。91.配置和兼容性测试的区别是什么？配置测试的目的是保证软件在其相关的硬件上能够正常运行，而兼容性测试主要是测试软件能否与不同的软件正确协作。配置测试的核心内容就是使用各种硬件来测试软件的运行情况，一般包括：软件在不同的主机上的运行情况，例如Dell和Apple；软件在不同的组件上的运行情况，例如开发的拨号程序要测试在不同厂商生产的Modem上的运行情况；不同的外设；不同的接口；不同的可选项，例如不同的内存大小；兼容性测试的核心内容：测试软件是否能在不同的操作系统平台上兼容；测试软件是否能在同一操作系统平台的不同版本上兼容；软件本身能否向前或者向后兼容；测试软件能否与其它相关的软件兼容；数据兼容性测试，主要是指数据能否共享；配置和兼容性测试通称对开发系统类软件比较重要，例如驱动程序、操作系统、数据库管理系统等。具体进行时仍然按照测试用例来执行。92.软件文档测试主要包含什么？随着软件文档系统日益庞大，文档测试已经成为软件测试的重要内容。文档测试对象主要如下：包装文字和图形；市场宣传材料、广告以及其它插页；授权、注册登记表；最终用户许可协议；安装和设置向导；用户手册；联机帮助；样例、示范例子和模板；文档测试的目的是提高易用性和可靠性，降低支持费用，因为用户通过文档就可以自己解决问题。因文档测试的检查内容主要如下：读者对象——主要是文档的内容是否能让该级别的读者理解；术语——主要是检查术语是否适合读者；内容和主题——检查主题是否合适、是否丢失、格式是否规范等；图标和屏幕抓图——检查图表的准确度和精确度；样例和示例——是否与软件功能一致；拼写和语法；文档的关联性——是否与其它相关文档的内容一致，例如与广告信息是否一致；文档测试是相当重要的一项测试工作，不但要给予充分的重视，更要要认真的完成，象做功能测试一样来对待文档测试。93.没有产品说明书和需求文档地情况下能够进行黑盒测试吗？这个问题是国内测试工程师经常遇到的问题，根源就是国内软件开发文档管理不规范，对变更的管理方法就更不合理了。实际上没有任何文档的时候，测试人员是能够进行黑盒测试的，这种测试方式我们可以称之为探索测试，具体做法就是测试工程师根据自己的专业技能、领域知识等不断的深入了解测试对象、理解软件功能，进而发现缺陷。在这种做法基本上把软件当成了产品说明书，测试过程中要和开发人员不断的进行交流。尤其在作项目的时候，进度压力比较大，可以作为加急测试方案。最大的风险是不知道有些特性是否被遗漏。94.测试中的“杀虫剂怪事”是指什么？“杀虫剂怪事”一词由BorisBeizer在其编著的《软件测试技术》第二版中提出。用于描述测试人员对同一测试对象进行的测试次数越多，发现的缺陷就会越来越少的现象。就像老用一种农药，害虫就会有免疫力，农药发挥不了效力。这种现象的根本原因就是测试人员对测试软件过于熟悉，形成思维定势。为了克服这种现象，测试人员需要不断编写新的测试程序或者测试用例，对程序的不同部分进行测试，以发现更多的缺陷。也可以引用新人来测试软件，刚刚进来的新手往往能发现一些意想不到的问题。95.在配置测试中，如何判断发现的缺陷是普通问题还是特定的配置问题？在进行配置测试时，测试工程师仍然会发现一些普通的缺陷，也就是与配置环境无关的缺陷。因此判断新发现的问题，需要在不同的配置中重新执行发现软件缺陷的步骤，如果软件缺陷不出现了，就可能是配置缺陷；如果在所有的配置中都出现，就可能是普通缺陷。需要注意的是，配置问题可以在一大类配置中出现。例如，拨号程序可能在所有的外置Modem中都存在问题，而内置的Modem不会有任何问题。96.为什么尽量不要让时间有富裕的员工去做一些测试？表面上看这体现了管理的效率和灵活性，但实际上也体现了管理者对测试的轻视。测试和测试的人有很大关系。测试工作人员应该是勤奋并富有耐心，善于学习、思考和发现问题，细心有条理，总结问题，如果具备这样的优点，做其它工作同样也会很出色，因此这里还有一个要求，就是要喜欢测试这项工作。如果他是专职的，那么肯定更有经验和信心。国内的小伙子好象都喜欢做程序员，两者工作性质不同，待遇不同，地位不同，对自我实现的价值的认识也不同，这是行业的一个需要改善的问题。如果只是为了完成任务而完成任务，或者发现了几个问题就觉得满意了，这在任何其它工作中都是不行的。97.完全测试程序是可能的吗？软件测试初学者可能认为拿到软件后需要进行完全测试，找到全部的软件缺陷，使软件“零缺陷”发布。实际上完全测试是不可能的。主要有以下一个原因：完全测试比较耗时，时间上不允许；完全测试通常意味着较多资源投入，这在现实中往往是行不通的；输入量太大，不能一一进行测试；输出结果太多，只能分类进行验证；软件实现途径太多；软件产品说明书没有客观标准，从不同的角度看，软件缺陷的标准不同；因此测试的程度要根据实际情况确定。98.软件测试的风险主要体现在哪里？我们没有对软件进行完全测试，实际就是选择了风险，因为缺陷极有可能存在没有进行测试的部分。举个例子，程序员为了方便，在调试程序时会弹出一些提示信息框，而这些提示只在某种条件下会弹出，碰巧程序发布前这些代码中的一些没有被注释掉。在测试时测试工程师又没有对其进行测试。如果客户碰到它，这将是代价昂贵的缺陷，因为交付后才被客户发现。因此，我们要尽可能的选择最合适的测试量，把风险降低到最小。99.发现的缺陷越多，说明软件缺陷越多吗？这是一个比较常见的现象。测试工程师在没有找到缺陷前会绞尽脑汁的思考，但是找到一个后，会接二连三的发现很多缺陷，颇有个人成就感。其中的原因主要如下：代码复用、拷贝代码导致程序员容易犯相同的错误。类的继承导致所有的子类会包含基类的错误，反复拷贝同一代码意味可能也复制了缺陷。程序员比较劳累是可以导致某些连续编写的功能缺陷较多。程序员加班是一种司空见惯的现象，因此体力不只时容易编写一些缺陷较多的程序。而这些连续潜伏缺陷恰恰时测试工程师大显身手的地方。“缺陷一个连着一个”不是一个客观规律，只是一个常见的现象。如果软件编写的比较好，这种现象就不常见了。测试人员只要严肃认真的测试程序就可以了。100.所有的软件缺陷都能修复吗？所有的软件缺陷都要修复吗？从技术上讲，所有的软件缺陷都是能够修复的，但是没有必要修复所有的软件缺陷。测试人员要做的是能够正确判断什么时候不能追求软件的完美。对于整个项目团队，要做的是对每一个软件缺陷进行取舍，根据风险决定那些缺陷要修复。发生这种现象的主要原因如下：没有足够的时间资源。在任何一个项目中，通常情况下开发人员和测试人员都是不够用的，而且在项目中没有预算足够的回归测试时间，再加上修改缺陷可能引入新的缺陷，因此在交付期限的强大压力下，必须放弃某些缺陷的修改。有些缺陷只是特殊情况下出现，这种缺陷处于商业利益考虑，可以在以后升级中进行修复。不是缺陷的缺陷。我们经常会碰到某些功能方面的问题被当成缺陷来处理，这类问题可以以后有时间时考虑再处理。最后要说的是，缺陷是否修改要由软件测试人员、项目经理、程序员共同讨论来决定是否修复，不同角色的人员从不同的角度来思考，以做出正确的决定。101.软件测试人员就是QA吗？软件测试人员的职责是尽可能早的找出软件缺陷，确保得以修复。而质量保证人员（QA）主要职责是创建或者制定标准和方法，提高促进软件开发能力和减少软件缺陷。测试人员的主要工作是测试，质量保证人员日常工作重要内容是检查与评审，测试工作也是测试保证人员的工作对象。软件测试和质量是相辅相成的关系，都是为了提高软件质量而工作。102.如何减少测试人员跳槽带来的损失？在IT行业里跳槽已经是一种司空见惯的现象，而且跳槽无论给公司还是给个人都会带来一定的损失。测试队伍也无疑会面临跳槽的威胁，作为测试经理管理者，只有从日常工作中开始做起，最能最大限度的减少损失。建议我们从以下两个方面做起：加强部门内员工之间的互相学习，互相学习是建立学习型组织的基本要求，是知识互相转移的过程。在此基础上，可以把个人拥有的技术以知识的形式沉积下来，也就完成了隐性知识到显性知识的转化。通常情况下，企业能为员工提供足够大的发展空间时，如果不是待遇特别低，员工都不会主动离开企业。因此我们要想留住员工，管理者就应该把员工的个人成长和企业的发展联系起来，为员工设定合理发展规划并付诸实现。不过这项要求做起来比较，要有比较好的企业文化为依托。103.测试产品与测试项目的区别是什么？习惯上把开发完成后进行商业化、几乎不进行代码修改就可以售给用户使用的软件成为软件产品，也就是可以买“卖拷贝”的软件，例如Windows2000。而通常把针对一个或者几个特定的用户而开发的软件成为软件项目，软件项目是一种个性化的产品，可以是按照用户要求全部重新开发，也可以修改已有的软件产品来满足特定的用户需求。项目和产品的不同特点，决定我们测试产品和测试项目仍然会有很多不同的地方：质量要求不同。通常产品的质量要高一些，修复发布后产品的缺陷成本较高，甚至会带来很多负面的影响。而做项目通常面向某一用户，虽然质量越高越好，但是一般只要满足用户要求就可以了。测试资源投入多少不同。做软件产品通常是研发中心来开发，进度压力要小些。同时由于质量要求高，因此会投入较多的人力、物力资源。项目最后要和用户共同验收测试，这是产品测试不具有的特点。此外，测试产品与测试项目在缺陷管理方面、测试策略制定都会有很大不同，测试管理者应该结合具体的环境，恰如其分的完成工作。104.和用户共同测试（UAT测试）的注意点有哪些？软件产品在投产前，通常都会进行用户验收测试。如果用户验收测试没有通过，直接结果就是拿不到“Money”，间接影响是损害了公司的形象，而后者的影响往往更严重。用户验收测试一定要让用户满意。实际上用户现场测试更趋于是一种演示。在不欺骗用户的前提下，我们向用户展示我们软件的优点，最后让“上帝”满意并欣然掏出“银子”才是我们的目标。因此用户测试要注意下面的事项：用户现场测试不可能测试全部功能，因此要测试核心功能。这需要提前做好准备，这些核心功能一定要预先经过测试，证明没有问题才可以和用户共同进行测试。测试核心模块的目的是建立用户对软件的信心。当然如果这些模块如果问题较多，不应该进行演示。如果某些模块确实有问题，我们可以演示其它重要的业务功能模块，必要时要向用户做成合理的解释。争得时间后，及时修改缺陷来弥补。永远不能欺骗用户，蒙混过关。道理很简单，因为软件是要给用户用的，问题早晚会暴露出来，除非你可以马上修改。和用户进行测试还要注意各种交流技巧，争取不但短期利益得到了满足，还要为后面得合作打好基础。105.如何编写提交给用户的测试报告？随着测试工作越来越受重视，开发团队向客户提供测试文档是不可避免的事情。很多人会问：“我们可以把工作中的测试报告提供给客户吗？”答案是否定的。因为提供内部测试报告，可能会让客户失去信心，甚至否定项目。测试报告一般分为内部测试报告和外部测试报告。内部报告是我们在测试工作中的项目文档，反映了测试工作的实施情况。这里主要讨论一下外部测试报告的写法，一般外部测试报告要满足下面几个要求：根据内部测试报告进行编写，一般可以摘录；不可以向客户报告严重缺陷，即使是已经修改的缺陷，开发中的缺陷也没有必要让客户知道；报告上可以列出一些缺陷，但必须是中级的缺陷，而且这些缺陷必须是修复的；报告上面的内容尽量要真实可靠；整个测试报告要仔细审阅，力争不给项目带来负面作用，尤其是性能测试报告。总之，外部测试报告要小心谨慎的编写。106.测试工具在测试工作中是什么地位？国内的很多测试工程师对测试工具相当迷恋，尤其是一些新手，甚至期望测试工具可以取代手工测试。测试工具在测试工作中起的是辅助作用，一般用来提高测试效率。自动化测试弥补了手工测试的不足，减轻一定的工作量。实际上测试工具是无法替代大多数手工测试的，而一些诸如性能测试等自动化测试也是手工所不能完成的。对于自动测试技术，应当依据软件的不同情况来分别对待，一般自动技术会应用在引起大量重复性工作的地方、系统的压力点、以及任何适合使用程序解决大批量输入数据的地方。然后再寻找合适的自动测试工具，或者自己开发测试程序。一定不要为了使用测试工具而使用。107.简述负载测试与压力测试的区别压力测试的主要任务就是获取系统正确运行的极限，检查系统在瞬间峰值负荷下正确执行的能力。例如，对服务器做压力测试时就可以增加并发操作的用户数量；或者不停地向服务器发送请求；或一次性向服务器发送特别大的数据等。看看服务器保持正常运行所能达到的最大状态。人们通常使用测试工具来完成压力测试，如模拟上万个用户从终端同时登录，这是压力测试中常常使用的方法。负载测试（VolumeTesting）用于检查系统在使用大量数据的时候正确工作的能力，即检验系统的能力最高能达到什么程度。例如，对于信息检索系统，让它使用频率达到最大；对于多个终端的分时系统，让它所有的终端都开动。在使整个系统的全部资源达到“满负荷”的情形下，测试系统的承受能力。108.写出bug报告流转的步骤，每步的责任人及主要完成的工作（要结合自己实际的工作经验进行回答，不同公司略有区别）测试人员提交新的Bug入库，错误状态为New。高级测试员/测试经理验证错误，如果确认是错误，分配给开发组。设置状态为Open。如果不是错误，则拒绝，设置为Declined状态。开发经理分配bug至对应的模块开发人员。开发人员查询状态为Open的Bug，如果不是错误，则置状态为Declined；如果是Bug则修复并置状态为Fixed。不能解决的Bug，要留下文字说明及保持Bug为Open状态。对于不能解决和延期解决的Bug，不能由开发人员自己决定，一般要通过某种会议（评审会）通过才能认可。测试人员查询状态为Fixed的Bug，然后验证Bug是否已解决，如解决，置Bug的状态为Closed，如没有解决，置bug状态为Reopen。109.写出bug报告当中一些必备的内容测试应用的硬件平台（Platform），通常选择“PC”。测试应用的操作系统平台（OS）。版本提交缺陷报告时通过该字段标识此缺陷存在于被测试软件的哪个版本。Bug报告优先级Bug状态Bug的编号发现人提交人指定处理人概述从属关系详细描述严重程度所属模块附件提交日期110.开发人员老是犯一些低级错误怎么解决？这种现象在开发流程不规范的团队里特别常见，尤其是一些“作坊式”的团队里。解决这种问题一般从两个方面入手：一方面从开发管理入手，也就是从根源来解决问题。可以制定规范的开发流程，甚至可以制定惩罚制度，还有就是软件开发前做好规划设计。另一方面就是加强测试，具体做法就是加强开发人员的自己测试，把这些问题“消灭”在开发阶段，这是比较好的做法。此外，还可以通过规范的缺陷管理来对开发人员进行控制，比如测试部门整理出常见的缺陷，让开发人员自己对照进行检查，以减少这类低级错误的发生。开发人员犯错误是正常的现象，作为测试人员一定不能抱怨，要认认真真的解决问题才是上策。111.软件的构造号与版本号之间的区别？BVT(BuildVerificationTest)版本控制命名格式：主版本号.子版本号[.修正版本号[.编译版本号]]Major.Minor[.Revision[.Build]]应根据下面的约定使用这些部分：Major：具有相同名称但不同主版本号的程序集不可互换。例如，这适用于对产品的大量重写，这些重写使得无法实现向后兼容性。Minor：如果两个程序集的名称和主版本号相同，而次版本号不同，这指示显著增强，但照顾到了向后兼容性。例如，这适用于产品的修正版或完全向后兼容的新版本。Build：内部版本号的不同表示对相同源所作的重新编译。这适合于更改处理器、平台或编译器的情况。Revision：名称、主版本号和次版本号都相同但修订号不同的程序集应是完全可互换的。这适用于修复以前发布的程序集中的安全漏洞。BVT(BuildVerificationTest)：作为Build的一部分，主要是通过对基本功能、特别是关键功能的测试，保证新增代码没有导致功能失效，保证版本的持续稳定。实现BVT方式是有以下几种：测试人员手工验证关键功能实现的正确性。特点：这是传统开发方法中，通常采用的方式。无需维护测试脚本的成本，在测试人力资源充足，测试人员熟悉业务、并对系统操作熟练情况下效率很高，比较灵活快速。缺点：人力成本较高；对测试人员能力有一定要求；测试人员面对重复的工作，容易产生疲倦懈怠，从而影响测试质量。借助基于GUI的自动化功能测试工具来完成，将各基本功能操作录制成测试脚本，每次回放测试脚本验证功能实现的正确性。特点：能够模拟用户操作完成自动的测试，从UI入口到业务实现，每一层的代码实现都经过验证；节约人力成本；降低测试人员重复劳动的工作量，机器不会疲倦；缺点：对于UI变动比较频繁的系统来说，这种方式的维护成本很高，实施起来非常困难。另外，在项目周期较短且后续无延续性或继承的情况下，也不推荐使用此方式。由开发人员通过自动化测试工具完成业务层的BVT测试。特点：通过对业务层关键功能的持续集成测试，保证系统功能的持续稳定。可以结合DailyBuild，做为Build的一部分，自动实现并输入BVT报告。缺点：仅对业务规则实现的正确性进行了测试，对表现层无法测试到，对于诸如：前台页面控件各种事件响应、页面元素变化等方面的问题无法保证。112.测试在开发阶段的作用项目规划阶段：负责从单元测试到系统测试的整个测试阶段的监控。需求分析阶段：确定测试需求分析、系统测试计划的制定，评审后成为管理项目。详细设计和概要设计阶段：确保集成测试计划和单元测试计划完成。编码阶段：由开发人员进行自己负责部分的测试代码。在项目较大时，由专人进行编码阶段的测试任务。测试阶段（单元、集成、系统测试）：依据测试代码进行测试，并提交相应的测试状态报告和测试结束报告。113.在软件开发过程中5个常见的问题是什么？需求说明差──需求不清楚、不完整、太概括、或者不可测试，都会造成问题。不切实际的时间表──如果在很短的时间里要求做许多事，出现错误是不可避免的。测试不充分──只能根据客户意见或者系统崩溃来判断系统质量的高低。不断增加功能──在开发正在进行过程中要求增加许多新的功能。这是常见的问题。交流问题──如果开发人员对客户的要求不了解，或者客户由不恰当的期望，必然会导致错误。114.针对软件开发过程中的问题，有哪些解决方法？可靠的需求(solidrequirements)——应当有一个经各方一致同意的、清楚的、完整的、详细的、整体的、可实现的、可测试的需求。为帮助确定需求，可使用模型(prototypes)。合理的时间表(realisticschedules)——为计划、设计、测试、改错、再测试、变更、以及编制文档留出足够的时间。不应使用突击的办法来完成项目。适当的测试(adequatetesting)——尽早开始测试；每次改错或变更之后，都应重新测试。项目计划中要为测试和改错留出足够的时间。尽可能坚持最初的需求(sticktoinitialrequirementsasmuchaspossible)——一旦开发工作开始，要准备防止修改需求和新增功能。要说明这样作的后果。如果必须进行变更，必须在时间表上有相应的反映。如果可能，在设计阶段使用快速的模型，以便使客户了解将会得到的东西。这将会使他们对他们的需求有较高的信心，减少以后的变更。沟通(communication)——在适当时机进行预排和检查；充分利用团组通信工具——电子邮件、群件(groupware)、网络故障跟踪工具、变更管理工具、以及因特网的功能。要确保文件是可用的和最新的。优选电子版文档，避免纸介质文档；进行远距离联合作业及协作；尽早使用模型，使得客户的预想是清楚的。115.阐述软件生命周期都有哪些阶段？常见的软件生命周期模型有哪些？软件生命周期是指一个计算机软件从功能确定、设计，到开发成功投入使用，并在使用中不断地修改、增补和完善，直到停止该软件的使用的全过程（从酝酿到废弃的过程）生命周期从收到应用软件开始算起，到该软件不再使用为止。它有如下各方面的内容：初始构思、需求分析、功能设计、内部设计、文档计划、测试计划、文档准备、集成、测试、维护、升级、再测试、逐步淘汰(phase-out)、等等瀑布模型，迭代式模型，快速原型模型，螺旋模型116.Beta测试与Alpha测试有什么区别？Betatesting（β测试）,测试是软件的多个用户在一个或多个用户的实际使用环境下进行的测试。开发者通常不在测试现场Alphatesting（α测试）,是由一个用户在开发环境下进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的受控测试117.你认为做好测试用例工作的关键是什么？需求和设计文档的理解程度，对系统的熟悉程度118.简述一下缺陷的生命周期？提交-&gt;确认-&gt;分配-&gt;修复-&gt;验证-&gt;关闭119.软件的安全性应从哪几个方面去测试？用户认证机制：如数据证书、智能卡、双重认证、安全电子交易协议加密机制安全防护策略：如安全日志、入侵检测、隔离防护、漏洞扫描数据备份与恢复手段：存储设备、存储优化、存储保护、存储管理防病毒系统120.软件配置管理工作开展的情况和认识？软件配置管理贯穿于软件开发、测试活动的始终，覆盖了开发、测试活动的各个环节，它的重要作用之一就是要全面的管理保存各个配置项，监控各配置项的状态，并向项目经理及相关的人员报告，从而实现对软件过程的控制。软件测试配置管理包括4个最基本的活动：配置项标识配置项控制配置项状态报告配置审计软件配置管理通常借助工具来辅助，主要有MSSourceSafe、RationalClearCase等121.你觉得软件测试通过的标准应该是什么样的？缺陷密度值达到客户的要求122.引入测试管理的含义？风险分析，进度控制、角色分配、质量控制123.什么是版本控制，常用的版本控制系统有哪些？版本控制（Revisioncontrol）是一种软体工程技巧，籍以在开发的过程中，确保由不同人所编辑的同一档案都得到更新。Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git是LinusTorvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。https://git-scm.com/docSVN是Subversion的简称，是一个开放源代码的版本控制系统，相较于RCS、CVS，它采用了分支管理系统，它的设计目标就是取代CVS。互联网上很多版本控制服务已从CVS迁移到Subversion。https://tortoisesvn.net/support.html124.简述软件测试与软件开发之间的关系？项目规划阶段：负责从单元测试到系统测试的整个测试阶段的监控。需求分析阶段：确定测试需求分析、系统测试计划的制定，评审后成为管理项目。测试需求分析是对产品生命周期中测试所需求的资源、配置、每阶段评判通过的规约；系统测试计划则是依据软件的需求规格说明书，制定测试计划和设计相应的测试用例。详细设计和概要设计阶段：确保集成测试计划和单元测试计划完成。编码阶段：由开发人员进行自己负责部分的代码的测试。在项目较大时，由专人进行编码阶段的测试任务。测试阶段（单元、集成、系统测试）：依据测试代码进行测试，并提交相应的测试状态报告和测试结束报告。开发和测试是一个有机的整体！在产品的发布之前，开发和测试是循环进行的，测出的缺陷要经开发人员修改后继续测试。在开发的同时测试经理开始编写测试用例，测试文档要参考开发文档，所以开发和测试是不可分割的，少了任何一个都不能开发出产品。从角色方面看，像理论和实验的关系，开发人员通过自己的想象创造出一套思想，之后测试人员再对它进行检验、证伪，开发人员再修改的过程从而不断丰富产品。从方法方面看，是演绎和归纳的关系，一个要掌握大量的技术，一个要不断的从实例中学习。因这两方面的不同，所以开发和测试看上去做的工作很不一样。开发与测试是相辅相承、密不可分的，开发人员开发出新的产品后要通过测试判断产品是否完全满足用户的需求。如果发现缺陷，提交给开发人员进行修复，然后再转交测试人员进行回归测试，直到产品符合需求规格说明。一个符合用户需求的产品是开发和测试共同努力的成果。125.为什么要在一个团队中开展软件测试工作？因为没有经过测试的软件很难在发布之前知道该软件的质量，就好比ISO质量认证一样，测试同样也需要质量的保证，这个时候就需要在团队中开展软件测试的工作。在测试的过程发现软件中存在的问题，及时让开发人员得知并修改问题，在即将发布时，从测试报告中得出软件的质量情况。126.您在以往的测试工作中都曾经具体从事过哪些工作？其中最擅长哪部分工作？（根据项目经验不同，灵活回答即可）我曾经做过web测试，后台测试，客户端软件，其中包括功能测试，性能测试，用户体验测试。最擅长的是功能测试127.您所熟悉的软件测试类型都有哪些？请试着分别比较这些不同的测试类型的区别与联系（如功能测试、性能测试……）测试类型有：功能测试，性能测试，界面测试。功能测试在测试工作中占的比例最大，功能测试也叫黑盒测试。是把测试对象看作一个黑盒子。利用黑盒测试法进行动态测试时，需要测试软件产品的功能，不需测试软件产品的内部结构和处理过程。采用黑盒技术设计测试用例的方法有：等价类划分、边界值分析、错误推测、因果图和综合策略。性能测试是通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试。负载测试和压力测试都属于性能测试，两者可以结合进行。通过负载测试，确定在各种工作负载下系统的性能，目标是测试当负载逐渐增加时，系统各项性能指标的变化情况。压力测试是通过确定一个系统的瓶颈或者不能接收的性能点，来获得系统能提供的最大服务级别的测试。界面测试，界面是软件与用户交互的最直接的层，界面的好坏决定用户对软件的第一印象。而且设计良好的界面能够引导用户自己完成相应的操作，起到向导的作用。同时界面如同人的面孔，具有吸引用户的直接优势。设计合理的界面能给用户带来轻松愉悦的感受和成功的感觉，相反由于界面设计的失败，让用户有挫败感，再实用强大的功能都可能在用户的畏惧与放弃中付诸东流。区别在于，功能测试关注产品的所有功能上，要考虑到每个细节功能，每个可能存在的功能问题。性能测试主要关注于产品整体的多用户并发下的稳定性和健壮性。界面测试更关注于用户体验上，用户使用该产品的时候是否易用，是否易懂，是否规范（快捷键之类的），是否美观（能否吸引用户的注意力），是否安全（尽量在前台避免用户无意输入无效的数据，当然考虑到体验性，不能太粗鲁的弹出警告）？做某个性能测试的时候，首先它可能是个功能点，首先要保证它的功能是没问题的，然后再考虑该功能点的性能测试128.您认为做好测试用例设计工作的关键是什么？白盒测试用例设计的关键是以较少的用例覆盖尽可能多的内部程序逻辑结果黑盒法用例设计的关键同样也是以较少的用例覆盖模块输出和输入接口。不可能做到完全测试，以最少的用例在合理的时间内发现最多的问题129.请试着比较一下黑盒测试、白盒测试、单元测试、集成测试、系统测试、验收测试的区别与联系黑盒测试：已知产品的功能设计规格，可以进行测试证明每个实现了的功能是否符合要求。白盒测试：已知产品的内部工作过程，可以通过测试证明每种内部操作是否符合设计规格要求，所有内部成分是否以经过检查。软件的黑盒测试意味着测试要在软件的接口处进行。这种方法是把测试对象看做一个黑盒子，测试人员完全不考虑程序内部的逻辑结构和内部特性，只依据程序的需求规格说明书，检查程序的功能是否符合它的功能说明。因此黑盒测试又叫功能测试或数据驱动测试。黑盒测试主要是为了发现以下几类错误：是否有不正确或遗漏的功能？在接口上，输入是否能正确的接受？能否输出正确的结果？是否有数据结构错误或外部信息（例如数据文件）访问错误？性能上是否能够满足要求？是否有初始化或终止性错误？软件的白盒测试是对软件的过程性细节做细致的检查。这种方法是把测试对象看做一个打开的盒子，它允许测试人员利用程序内部的逻辑结构及有关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。通过在不同点检查程序状态，确定实际状态是否与预期的状态一致。因此白盒测试又称为结构测试或逻辑驱动测试。白盒测试主要是想对程序模块进行如下检查：对程序模块的所有独立的执行路径至少测试一遍。对所有的逻辑判定，取“真”与取“假”的两种情况都能至少测一遍。在循环的边界和运行的界限内执行循环体。测试内部数据结构的有效性，等等。单元测试（模块测试）是开发者编写的一小段代码，用于检验被测代码的一个很小的、很明确的功能是否正确。通常而言，一个单元测试是用于判断某个特定条件（或者场景）下某个特定函数的行为。单元测试是由程序员自己来完成，最终受益的也是程序员自己。可以这么说，程序员有责任编写功能代码，同时也就有责任为自己的代码编写单元测试。执行单元测试，就是为了证明这段代码的行为和我们期望的一致。集成测试（也叫组装测试，联合测试）是单元测试的逻辑扩展。它的最简单的形式是：两个已经测试过的单元组合成一个组件，并且测试它们之间的接口。从这一层意义上讲，组件是指多个单元的集成聚合。在现实方案中，许多单元组合成组件，而这些组件又聚合成程序的更大部分。方法是测试片段的组合，并最终扩展进程，将您的模块与其他组的模块一起测试。最后，将构成进程的所有模块一起测试。系统测试是将经过测试的子系统装配成一个完整系统来测试。它是检验系统是否确实能提供系统方案说明书中指定功能的有效方法。（常见的联调测试）系统测试的目的是对最终软件系统进行全面的测试，确保最终软件系统满足产品需求并且遵循系统设计。验收测试是部署软件之前的最后一个测试操作。验收测试的目的是确保软件准备就绪，并且可以让最终用户将其用于执行软件的既定功能和任务。验收测试是向未来的用户表明系统能够像预定要求那样工作。经集成测试后，已经按照设计把所有的模块组装成一个完整的软件系统，接口错误也已经基本排除了，接着就应该进一步验证软件的有效性，这就是验收测试的任务，即软件的功能和性能如同用户所合理期待的那样。130.测试计划工作的目的是什么？测试计划工作的内容都包括什么？其中哪些是最重要的？软件测试计划是指导测试过程的纲领性文件，包含了产品概述、测试策略、测试方法、测试区域、测试配置、测试周期、测试资源、测试交流、风险分析等内容。借助软件测试计划，参与测试的项目成员，尤其是测试管理人员，可以明确测试任务和测试方法，保持测试实施过程的顺畅沟通，跟踪和控制测试进度，应对测试过程中的各种变更。测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。所以其中最重要的是测试测试策略和测试方法（最好是能先评审）131.您所熟悉的测试用例设计方法都有哪些？请分别以具体的例子来说明这些方法在测试用例设计工作中的应用等价类划分划分等价类：等价类是指某个输入域的子集合。在该子集合中，各个输入数据对于揭露程序中的错误都是等效的。并合理地假定：测试某等价类的代表值就等于对这一类其它值的测试。因此，可以把全部输入数据合理划分为若干等价类，在每一个等价类中取一个数据作为测试的输入条件，就可以用少量代表性的测试数据。取得较好的测试结果。等价类划分可有两种不同的情况：有效等价类和无效等价类。边界值分析法边界值分析方法是对等价类划分方法的补充。测试工作经验告诉我，大量的错误是发生在输入或输出范围的边界上，而不是发生在输入输出范围的内部。因此针对各种边界情况设计测试用例，可以查出更多的错误。使用边界值分析方法设计测试用例，首先应确定边界情况。通常输入和输出等价类的边界，就是应着重测试的边界情况。应当选取正好等于，刚刚大于或刚刚小于边界的值作为测试数据，而不是选取等价类中的典型值或任意值作为测试数据。错误推测法基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性的设计测试用例的方法。错误推测方法的基本思想：列举出程序中所有可能有的错误和容易发生错误的特殊情况，根据他们选择测试用例。例如，在单元测试时曾列出的许多在模块中常见的错误。以前产品测试中曾经发现的错误等，这些就是经验的总结。还有，输入数据和输出数据为0的情况。输入表格为空格或输入表格只有一行。这些都是容易发生错误的情况。可选择这些情况下的例子作为测试用例。因果图方法前面介绍的等价类划分方法和边界值分析方法，都是着重考虑输入条件，但未考虑输入条件之间的联系，相互组合等。考虑输入条件之间的相互组合，可能会产生一些新的情况。但要检查输入条件的组合不是一件容易的事情，即使把所有输入条件划分成等价类，他们之间的组合情况也相当多。因此必须考虑采用一种适合于描述对于多种条件的组合，相应产生多个动作的形式来考虑设计测试用例。这就需要利用因果图（逻辑模型），因果图方法最终生成的就是判定表。它适合于检查程序输入条件的各种组合情况。132.说说你对软件配置管理的理解？项目在开发过程中要用相应的配置管理工具对配置项（包括各个阶段的产物）进行变更控制，配置管理的使用取决于项目规模和复杂性及风险的水平。软件的规模越大，配置管理就越显得重要。还有在配置管理中，有一个很重要的概念，那就是基线，是在一定阶段各个配置项的组合，一个基线就提供了一个正式的标准，随后的工作便基于此标准，并只有经过授权后才能变更这个标准。配置管理工具主要有CC，VSS,CVS,SVN等，我只用过SVN，对其他的工具不是很熟悉。133.请以您以往的实际工作为例，详细的描述一次测试用例设计的完整的过程就说最近的这次网站功能的测试吧首先：得到相关文档（需求文档和设计文档），理解需求和设计设计思想后，想好测试策略（测试计划简单点就OK了），考虑到测试环境，测试用例，测试时间等问题。第二步：设计测试用例，测试策略是：把网站部分的功能点测试完，然后在进行系统测试（另外个模块呢有另一个测试人员负责，可以进行联调测试），网站模块的测试基本是功能测试和界面测试（用户并发的可能性很小，所以不考虑）：这次的网站的输入数据呢是使用数据库中的某张表记录，如果表中某一数据记录中新加进来的（还没有被处理的，有个标志位），网站启动后会立刻去刷那张表，得到多条数据，然后在进行处理。处理过程中，会经历3个步骤，网站才算完成了它的任务。有3个步骤呢，就可以分别对这3个步骤进行测试用例的设计，尽量覆盖到各种输入情况（包括数据库中的数据，用户的输入等），得出了差不多50个用例。界面测试，也就是用户看的到的地方，包括发送的邮件和用户填写资料的页面展示。第三步：搭建测试环境（为什么这个时候考虑测试环境呢？因为我对网站环境已经很熟了，只有有机器能空于下来做该功能测试就可以做了），因为网站本身的环境搭建和其他的系统有点不同，它需要的测试环境比较麻烦，需要web服务器（Apache,tomcat），不过这次需求呢，网站部分只用到了tomcat，所以只要有tomcat即可第四步：执行测试134.您以往是否曾经从事过性能测试工作？如果有，请尽可能的详细描述您以往的性能测试工作的完整过程参考答案：（以自己最熟悉的性能测试项目为例）是的，曾经做过网站方面的性能测试，虽然做的时间并不久（2个月吧），当时呢，是有位网站性能测试经验非常丰富的前辈带着我一起做。性能测试类型包括负载测试，强度测试，容量测试等负载测试：负载测试是一种性能测试指数据在超负荷环境中运行，程序是否能够承担。强度测试：强度测试是一种性能测试，他在系统资源特别低的情况下软件系统运行情况容量测试：确定系统可处理同时在线的最大用户数在网站流量逐渐加大的情况下，开始考虑做性能测试了，首先要写好性能测试计划，根据运营数据得出流量最大的页面（如果是第一次的话，一般是首页，下载页，个人帐户页流量最大，而且以某种百分比），Web服务器指标指标：AvgRps:平均每秒钟响应次数＝总请求时间/秒数；SuccessfulRounds：成功的请求；FailedRounds：失败的请求；SuccessfulHits：成功的点击次数；FailedHits：失败的点击次数；HitsPerSecond：每秒点击次数；SuccessfulHitsPerSecond：每秒成功的点击次数；FailedHitsPerSecond：每秒失败的点击次数；AttemptedConnections：尝试链接数；135.你对测试最大的兴趣在哪里？为什么？最大的兴趣就是测试有难度，有挑战性！做测试越久越能感觉到做好测试有多难。曾经在无忧测试网上看到一篇文章，是关于如何做好一名测试工程师。一共罗列了11，12点，有部分是和人的性格有关，有部分需要后天的努力。但除了性格有关的1，2点我没有把握，其他点我都很有信心做好它。刚开始进入测试行业时，对测试的认识是从无忧测试网上了解到的一些资料，当时是冲着做测试需要很多技能才能做的好，虽然入门容易，但做好很难，比开发更难，虽然当时我很想做开发（学校专业课我基本上不缺席，因为我喜欢我的专业），但看到测试比开发更难更有挑战性，想做好测试的意志就更坚定了。不到一年半的测试工作中，当时的感动和热情没有减退一点（即使环境问题以及自身经验，技术的不足，做测试的你一定也能理解）。我觉得做测试整个过程中有2点让我觉得很有难度（对我来说，有难度的东西我就非常感兴趣），第一是测试用例的设计，因为测试的精华就在测试用例的设计上了，要在版本出来之前，把用例写好，用什么测试方法写？（也就是测试计划或测试策略），如果你刚测试一个新任务时，你得花一定的时间去消化业务需求和技术基础，业务需求很好理解（多和产品经理和开发人员沟通就能达到目的），而技术基础可就没那么简单了，这需要你自觉的学习能力，比如说网站吧，最基本的技术知识你要知道网站内部是怎么运作的的，后台是怎么响应用户请求的？测试环境如何搭建？这些都需要最早的学好。至少在开始测试之前能做好基本的准备，可能会遇到什么难题？需求细节是不是没有确定好？这些问题都能在设计用例的时候发现。第二是发现BUG的时候了，这应该是测试人员最基本的任务了，一般按测试用例开始测试就能发现大部分的bug，还有一部分bug需要测试的过程中更了解所测版本的情况获得更多信息，补充测试用例，测试出bug。还有如何发现bug？这就需要在测试用例有效的情况下，通过细心和耐心去发现bug了，每个用例都有可能发现bug，每个地方都有可能出错，所以测试过程中思维要清晰（测试过程数据流及结果都得看仔细了，bug都在里面发现的）。如何描述bug也很有讲究，bug在什么情况下会产生，如果条件变化一点点，就不会有这个bug，以哪些最少的操作步骤就能重现这个bug，这个bug产生的规律是什么？如果你够厉害的话，可以帮开发人员初步定位问题。136.你以前工作时的测试流程是什么？（灵活回答）公司对测试流程没有规定如何做，但每个测试人员都有自己的一套测试流程。我说下我1年来不断改正（自己总结，吸取同行的方法）后的流程吧。需求评审（有开发人员，产品经理，测试人员，项目经理）-&gt;需求确定（出一份确定的需求文档）-&gt;开发设计文档（开发人员在开始写代码前就能输出设计文档）-&gt;想好测试策略，写出测试用例-&gt;发给开发人员和测试经理看看（非正式的评审用例）-&gt;接到测试版本-&gt;执行测试用例（中间可能会补充用例）-&gt;提交bug（有些bug需要开发人员的确定（严重级别的，或突然发现的在测试用例范围之外的，难以重现的），有些可以直接录制进TD）-&gt;开发人员修改（可以在测试过程中快速的修改）-&gt;回归测试（可能又会发现新问题，再按流程开始跑）。137.当开发人员说不是BUG时，你如何应付？开发人员说不是bug，有2种情况，一是需求没有确定，所以我可以这么做，这个时候可以找来产品经理进行确认，需不需要改动，3方商量确定好后再看要不要改。二是这种情况不可能发生，所以不需要修改，这个时候，我可以先尽可能的说出是BUG的依据是什么？如果被用户发现或出了问题，会有什么不良结果？程序员可能会给你很多理由，你可以对他的解释进行反驳。如果还是不行，那我可以给这个问题提出来，跟开发经理和测试经理进行确认，如果要修改就改，如果不要修改就不改。其实有些真的不是bug，我也只是建议的方式写进TD中，如果开发人员不修改也没有大问题。如果确定是bug的话，一定要坚持自己的立场，让问题得到最后的确认。138.测试总结报告包括那些项测试用例的通过数，测试用例的未通过数，以及测试用例的通过率，未通过的功能都集中在哪几个功能模块，根据测试经验以及测试结果进行一个缺陷的分析和建议。139.测试工作进行到一半是，发现时间不够，你如何处理与客户沟通本次发布的版本什么是最重要的，什么是其次，我会安排一个优先级来对整体测试功能进行一个筛选。我会和测试组原体人员一起加班140.开发与测试的关系开发和测试是一个整体，也可以说测试驱动着开发，开发配合着测试，相辅相成的，在一个完整的项目组中缺一不可。141.如果你是测试组长你如何对项目及组员进行管理首先要从需求开始，充分了解被测系统的功能以及业务需求，并在遇到问题的时候及时有效的与开发人员以及其他项目相关人员进行沟通，做到最被测系统的十分熟悉。并了解整个测试组的成员他们的测试技能以及擅长的工作，做到测试任务的合理分配，得以让测试工作快速，稳定高效的进行！142.缺陷报告严重级别的划分严重级别的错误：影响系统整体基本流程运行的错误，由于某一操作造成系统死循环或服务器崩溃的错误较严重：功能实现错误、内部计算错误一般：UI错误，一些易用性的错误或建议143.开发人员修复缺陷后，如何保证不影响其他功能Bug的修复以及新功能的添加都有可能对版本造成一些影响，为了避免，在新版本发布以后，首先会对新版本做一个基础的流程测试也叫做冒烟测试，如果测试基本流程都顺利通过没有任何问题，那么测试人员可以继续进行详细的测试，否则就将冒烟测试中出现的问题以及问题有可能出现的原因反馈给开发人员，由开发人员修正后再次发版，进行测试。这是一个迭代的过程。144.发现问题后你是如何判断其是否是BUG，你是如何提交的、测试用例是经过评审组严格的评审，完全按照客户的需求规格说明书作为最终依据来评审的，如果测试过程中，测试结果与实际结果不符就很可能是Bug，如果一些比较明显的问题就直接录入缺陷管理系统，如果是一些边界问题不容易确定的，可以通过和开发人员甚至是设计人员等进行沟通最后得出一个结果究竟是否是Bug，如果是Bug就录入，如果是一个需要增加的新功能等，可以录入缺陷管理系统，类型为新需求。145.修复一个BUG而导致其他的BUG出现，该如何处理帮助开发人员分析问题锁定原因然后进行新Bug的修正。146.缺陷处理流程讲缺陷的详细信息录入缺陷管理系统，并分配给对应的开发人员如果遇到一些难以再现的缺陷，在开发人员修正过程中配合开发人员进行Bug的再现。开发人员修正Bug后，会在缺陷管理系统中将修正后的Bug状态更改，通常为Fixed状态。新版本发布后，测试人员会讲bug状态已经更改为Fixed的Bug进行回归测试。如果测试通过，则将该Bug关闭，如果仍未通过，则将该Bug从Fixed更改为Reopen状态，继续让开发人员来修正。并等待下一个新版本发布后的二次回归测试。147.缺陷报告包括那些项编写人、被测系统的版本号、测试环境、预期结果、实际结果、对于实际结果如有必要附上截图、测试用例数、测试用例通过数，测试用例的通过率、对缺陷的一个分析汇总。148.介绍一下整体项目流程搭建缺陷管理的环境和测试环境以及配置管理的环境搭建；编写测试计划；设计测试用例；编写测试用例；测试用例的评审；执行测试；缺陷管理；测试报告的输出149.在实际项目中你是如何做测试计划对客户提供的或需求分析人员编写的用户需求文档或需求规格说明书进行分析，提炼出测试要点；根据测试要点编写测试用例。由评审组对测试用例进行评审--修改--再次评审--初步定稿执行测试按照测试用例对系统进行功能验证及客户的需求验证将测试过程中产生的Bug录入缺陷管理系统新版本发布后，对本次版本新增加的功能以及开发人员修正的Bug进行回归测试根据项目需要提交测试报告。150.你是如何制定测试过程中的时间进度表的根据项目的需求、开发周期、开发人员的开发进度等时间安排来制定一个测试时间进度初稿，并将测试时间进度表交与整个项目团队成员大家一起讨论和分析，最终和所有人达成共识制定出一个大家都可以执行的测试时间进度表。时间表中包括了开发人员提交功能或功能模块的时间，以及为了更好的执行测试，配合测试人员进行功能培训的时间，以及测试执行时间等，都详细的写到WBS中，并按照这个时间进度表来执行项目的测试任务。151.测试计划都包括那些项测试计划目标测试参考文档测试术语与定义测试内容测试人员的分工测试进度测试流程测试工具测试缺陷管理测试的风险分析152.说说你对软件配置管理的理解项目在开发的过程中要用相应的配置管理工具对配置项（包括各个阶段的产物）进行变更控制，配置管理的使用取决于项目规模和复杂性能及风险的水平。软件的规模越大，配置管理就显得越重要。还有在配置管理中，有一个很重要的概念，那就是基线，是在一定阶段各个配置项的组合，一个基线就提供了一个正式的标准，随后的工作便基于此标准，并且只有经过授权后才能变更这个标准。配置管理工具主要有CC,VSS,CVS等，偶只用过CVS，对其它的不熟悉153.根据你的经验说说你对软件测试/质量保证的理解？软件质量保证与测试是根据软件开发阶段的规格说明和程序的内部结构而精心设计的一批测试用例（即输入数据和预期的输出结果），并利用这些测试用例去运行程序，以发现错误的过程。它是对应用程序的各个方面进行测试以检查其功能、语言有效性及外观排布。154.QA和QC的区别是什么？质量保证（QA）:是指确保产品符合预定质量要求而作出的所有有组织、有计划活动的总和。质量控制（QC）：即实验室控制系统，它涉及取样、质量标准、检验、产品批准放行程序等方面内容。一般是QA为领导地位。QA：主要是事先的质量保证类活动，以预防为主，期望降低错误的发生几率。QC：主要是事后的质量检验类活动为主，默认错误是允许的，期望发现并选出错误。QA是为满足顾客要求提供信任，即使顾客确信你提供的产品能满足他的要求，因此需从市场调查开始及以后的评审客户要求、产品开发、接单及物料采购、进料检验、生产过程控制及出货、售后服务等各阶段留下证据，证实工厂每一步活动都是按客户要求进行的。QC是为使产品满足质量要求所采取的作业技术和活动，它包括检验、纠正和反馈，比如QC进行检验发现不良品后将其剔除，然后将不良信息反馈给相关部门采取改善措施。用通俗的话来说，QA比作起草法律的法官，QC比作警察。QA比作产品经理，QC比作测试人员155.软件测试的目的是什么？软件测试的定义：为了发现程序中的错误而执行程序的过程测试的目的：发现程序员在开发中存在的代码以及逻辑错误审核产品的完成是否符合用户需求提高用户体验交付更高质量的产品156.如何定义所提交bug的严重等级和优先等级的？Bug有四种级别，分别为：致命的（Fatal），严重的（Critical），一般的（Major），微小的（Minor）。A类-致命的（Fatal）：造成系统或应用程序崩溃、死机、系统挂起，或造成数据丢失，主要功能完全丧失，导致本模块以及相关模块异常等问题。如代码错误，死循环，数据库发生死锁、与数据库连接错误或数据通讯错误，未考虑异常操作，功能错误等B类-严重错误（critical）：系统的主要功能部分丧失、数据不能保存，系统的次要功能完全丧失。问题局限在本模块，导致模块功能失效或异常退出。如致命的错误声明，程序接口错误，数据库的表、业务规则、缺省值未加完整性等约束条件C类-一般错误（major）：次要功能没有完全实现但不影响使用。如提示信息不太准确，或用户界面差，操作时间长，模块功能部分失效等，打印内容、格式错误，删除操作未给出提示，数据库表中有过多的空字段等D类-较小错误（Minor），使操作者不方便或遇到麻烦，但它不影响功能过的操作和执行，如错别字、界面不规范（字体大小不统一，文字排列不整齐，可输入区域和只读区域没有明显的区分标志），辅助说明描述不清楚。常用的缺陷的优先级表示方法可分为：立即解决P1、高优先级P2、正常排队P3、低优先级P4.立即解决是指缺陷导致系统几乎不能使用或者测试不能继续，需立即修复；高优先级是指缺陷严重影响测试，需要优先考虑；正常排队是指缺陷需要正常排队等待修复；而低优先级是指缺陷可以在开发人员有时间的时候再被纠正。157.Web和APP测试的异同有哪些？单纯从功能测试的层面上来讲的话，APP测试、web测试在流程和功能测试上是没有区别的。根据两者载体不一样，则区别如下：系统结构方面web项目，b/s架构，基于浏览器的；web测试只要更新了服务器端，客户端就会同步会更新。app项，c/s结构的，必须要有客户端；app修改了服务端，则客户端用户所有核心版本都需要进行一遍。性能方面web项目需监测响应时间、CPU、Memoryapp项目除了监测响应时间、CPU、Memory外，还需监测流量、电量等兼容方面web项目：浏览器（火狐、谷歌、IE等）操作系统（Windows7、Windows10、Linux等）app项目：设备系统：iOS（iPad、iPhone）、Android（三星、华为、联想等）、Windows（Win7、Win8）、OSX（Mac）手机设备可根据手机型号、分辨率不同相对于web项目，APP有专项测试干扰测试：中断，来电，短信，关机，重启等弱网络测试（模拟2g、3g、4g，wifi网络状态以及丢包情况）；网络切换测试（网络断开后重连、3g切换到4g/wifi等）安装、更新、卸载安装：需考虑安装时的中断、弱网、安装后删除安装文件等情况158.怎么理解回归测试？是否思考过如何减少回归测试工作量？回归测试是指修改了旧代码后，重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误。回归测试作为软件生命周期的一个组成部分，在整个软件测试过程中占有很大的工作量比重，自动回归测试将大幅降低系统测试、维护升级等阶段的成本。159.一条软件缺陷（或BUG）包括哪些内容？请完整列出和BUG对应的软件版本开发的借口人员，测试人员BUG的优先级BUG的严重程度BUG可能属于的模块BUG的标题BUG的描述BUG的截图BUG的状态BUG的错误类型（数据，界面。）160.软件测试方法有哪些分类？软件测试方法分类：白盒、黑盒、灰盒；单元测试、集成测试、系统测试、验收测试、回归测试、Alpha测试、Beta测试；静态测试和动态测试。161.设计测试用例的主要方法有哪些？设计测试用例的主要方法有：等价类划分；边界值分析法；因果图法；场景法。162.单元测试、集成测试、系统测试的侧重点是什么？单元测试的重点是系统的模块，包括子程序的正确性验证等。集成测试的重点是模块间的衔接以及参数的传递等。系统测试的重点是整个系统的运行以及与其他软件的兼容性。163.怎样才能成为一个优秀的测试工程师软件测试工程师需要具有一些逆向思维的能力，想别人所不想，测别人所不测，这样才可以找到更多的软件中的错误。这是作为一名优秀的软件测试工程师最基本的素质。善于同软件开发人员沟通沟通是当今软件项目中需要掌握的最关键技术之一。软件测试人员要善于同软件开发人员沟通，软件测试人员与开发人员搞好关系，使测试人员不成为开发人员的眼中钉，这对于提高整个软件项目质量是十分重要的。沟通主要包括：讨论软件的需求，设计：通过这样的沟通，你可以更好的了解所测试的软件系统，以至于尽可能少的测试出软件中不是错误的“错误”，从而降低给软件开发人员带来的压力。报告好的测试结果：作为一个测试人员，发现错误往往是测试人员最愿意而且引以自豪的结果，但是一味地给开发人员报告软件错误，会给他们造成厌恶感，降低整个软件的质量和开发进度。所以作为一名软件测试工程师，当你测试的模块没有严重的错误或者错误很少的时候，你不妨跑到开发人员那里告诉他们这个好消息，这会给你带来意想不到的结果。讨论一些与工作无关的事情：作为一个测试人员经常和开发人员讨论一些与工作无关的事情，比如大家可以谈谈新闻，趣事，家庭…这样可以加强相互间的默契程度，许多统计表明，这样可以更好的提高软件工作质量。善于同领导沟通测试人员往往是领导的眼和耳，领导根据测试人员的测试结果可以了解公司的产品质量，从而调整其他的工作。领导工作一般比较繁忙，所以作为一名优秀的测试人员要学会把测试结果进行总结，最好以图表的形势给领导看。掌握一些自动化测试工具测试工作往往是比较繁琐，枯燥无味的工作，测试人员长期处于重复的手工工作，会降低测试效率，并且对于测试质量也往往是不利的；况且许多测试不使用测试工具是不可以进行的，比如性能测试，压力测试等等。目前市场上有许多测试工具供你使用，你可以根据自己的需要选择一些测试工具来辅助你的测试。但是要记住一点，不是说有了测试工具就不要人工测试了，测试工具不是万能的。善于学习的能力软件测试技术随着时间的变化也在做一些提高和改进，作为一名优秀的测试人员要善于利用书籍，网站，论坛，交流等各种途径不断提高自己的软件测试水平。提高自己的表达能力软件测试人员当发现软件中存在缺陷的时候，往往要书写缺陷报告，缺陷报告要写得详尽清楚，使开发人员能够尽快定位错误，修改错误，所以作为一名优秀的测试人员提高自己的写作能力是非常必要的。了解业务知识更好的了解你说测试软件的业务知识是非常重要的，对业务知识了解得越深入，越能够找出更深入，更关键，更隐蔽的软件错误。所以作为一名优秀的软件测试工程师，要多向该领域专家，同行学习，提高自己的业务知识水平。164.测试计划要安排哪些方面？引言：目的、背景、范围、定义、参考资测试内容：测试功能清单测试规则：进入准则，暂停/退出准则、测试方法、测试手段、测试要点、测试工具测试环境：硬件环境、软件环境、特定测试环境要求项目任务：测试规划，测试设计，测试执行准备，测试执行，测试总结实施计划：工作量估计、人员需求及安排、进度安排、其它资源需求及安排。风险管理165.为什么要有测试报告？一份日常的测试报告通常需要说明哪些内容？概述，包括本次测试的目的，测试的背景介绍；测试环境，包括测试软硬件环境及配置，以及测试环境的网络拓扑图；测试的一些参考资料；测试参与人员，以及投入的时间情况说明；测试的进度情况，包括计划进度和实际进度；测试情况介绍，包括测试的内容项说明。如功能测试具体的测试项，测试通过情况；性能测试的测试项，测试通过情况等；缺陷的统计和分析，包括迭代次数，缺陷的分布情况，缺陷的覆盖情况，缺陷的发展趋势等；本次测试的结论；测试人员就本次测试的一些建议。166.在您参与或负责的项目测试中，发生过哪些棘手的问题，最后是如何解决的？您在这个过程中做了什么？例子：迭代开发后期，开始对整个系统从头回归一遍，这时候又发现了许多以前从未出现的BUG。这个时期大家都很烦躁困惑，曾经运转良好的页面，突然出现存储问题；曾经更新正常的功能，突然无法更新；曾经显示正常的Excel，突然显示错误……这些都让人苦恼，当然，这些应该都是正常现象。测试人员在测试后期尤其需要提高警惕，不能漏过任何一个功能点，更不能忽略任何一次貌似无用的查询、翻页、按键。最后，是大家一起进行的交付测试，人员包括了所有的编程人员及测试人员。这期间，除了对基本功能的回归测试外，还包括了并发测试及性能测试（这主要是编程人员在做），除此之外，我将过去提交修正过的所有BUG重新验证了一遍。在并发测试中，我们发现了很多之前单人测试难以发现的并发问题（包括多人一起提交，一起选择，一起修改等等），并发问题可以说层出不穷，甚至包括了同一台电脑打开两个页面分别进行修改的问题（由于我从一开始就是打开两个页面来测，一个为用户本人，一个为该用户代理人delegator，所以有些问题在早期已经暴露），这是测试中的一个重点，也是比较严重的漏洞，需要在以后多加留意。167.在测试工作中，您常使用的测试方法有哪些？它们都是在什么场景下使用的？等价类划分划分等价类：等价类是指某个输入域的子集合。在该子集合中，各个输入数据对于揭露程序中的错误都是等效的。并合理地假定：测试某等价类的代表值就等于对这一类其它值的测试。因此，可以把全部输入数据合理划分为若干等价类，在每一个等价类中取一个数据作为测试的输入条件，就可以用少量代表性的测试数据。取得较好的测试结果。等价类划分可有两种不同的情况：有效等价类和无效等价类。边界值分析法边界值分析方法是对等价类划分方法的补充。测试工作经验告诉我，大量的错误是发生在输入或输出范围的边界上，而不是发生在输入输出范围的内部。因此针对各种边界情况设计测试用例，可以查出更多的错误。使用边界值分析方法设计测试用例，首先应确定边界情况。通常输入和输出等价类的边界，就是应着重测试的边界情况。应当选取正好等于，刚刚大于或刚刚小于边界的值作为测试数据，而不是选取等价类中的典型值或任意值作为测试数据。错误推测法基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性的设计测试用例的方法。错误推测方法的基本思想：列举出程序中所有可能有的错误和容易发生错误的特殊情况，根据他们选择测试用例。例如，在单元测试时曾列出的许多在模块中常见的错误。以前产品测试中曾经发现的错误等，这些就是经验的总结。还有，输入数据和输出数据为0的情况。输入表格为空格或输入表格只有一行。这些都是容易发生错误的情况。可选择这些情况下的例子作为测试用例。因果图方法前面介绍的等价类划分方法和边界值分析方法，都是着重考虑输入条件，但未考虑输入条件之间的联系，相互组合等。考虑输入条件之间的相互组合，可能会产生一些新的情况。但要检查输入条件的组合不是一件容易的事情，即使把所有输入条件划分成等价类，他们之间的组合情况也相当多。因此必须考虑采用一种适合于描述对于多种条件的组合，相应产生多个动作的形式来考虑设计测试用例。这就需要利用因果图（逻辑模型）.因果图方法最终生成的就是判定表。它适合于检查程序输入条件的各种组合情况。168.什么是测试用例，设计测试用例时，您常用的设计方法有哪些？应如何设计才能保证测试用例的覆盖率？测试用例就是测试人员用以测试被测软件的某个特性或特性组合的一组数据。这组数据可能是从用户处得来的实际的一组数据，也可能是测试人员专门设计出来的测试软件某些功能的一组数据。等价类划分法、边界值分析法、错误推测法、判定表法、正交实验法。要保证测试用例能够全面覆盖测试需求，要包含所有的情况。测试用例设计上划分为单功能测试用例和测试场景设计，单功能测试覆盖的需求中的功能点，测试场景覆盖需求中的业务逻辑。在设计测试用例的时候，可以使用多种测试用例设计方法。首先进行等价类划分，包括输入条件和输出条件的等价类划分，合理设置有效等价类和无效等价类，这是减少工作量和提高测试效率最有效的方法。必须使用边界值分析，经验表明，这种方法设计出的用例能发现很多程序错误。可以使用错误推测法追加一些测试用例，这需要依靠您的智慧和经验。对照程序逻辑检查已设计出的测试用例的逻辑覆盖度，如果没有达到覆盖标准应当再补充足够的测试用例。如果程序的功能说明中含有输入条件的组合情况，一开始就可选因果图和判定表驱动法。对于参数配置类的软件，要用正交试验法选择较少的组合方式达到最佳效果。对于业务流清晰的系统，可以利用场景法贯穿整个测试方案过程，在案例中综合使用各种测试方法。当测试用例设计完成后，要组织测试用例的评审，这样可以吸取别人的意见，减少遗漏，补全测试用例。169.黑盒测试主要是为了发现那几类错误？基于规格说明的功能错误基于规格说明的构件或系统行为错误基于规格说明的性能错误面向用户的使用错误黑盒接口错误170.测试工作的流程？缺陷状态有什么？设计测试用例有几种方法？测试工程师的实际工作流程（以P2P中型版本为例，一个月一个版本）：产品经理或者SR把需求书发下来给开发和测试测试先看一遍，进行需求分析。测试组长编写测试计划，并且分配测试任务给测试人员（2天时间）（此时开发也在进行需求分析）过了2天，产品经理再把测试和开发召集在一起，进行需求讲解（或者说需求评审），有问题可以直接问，如果发现需求有问题，也可以提出来，SR回去会修改。（需求讲解时间0.5天）讲完需求后，测试同事要进行测试场景的梳理和案例的编写了（XMind和Excel就要用上了），一共个工作日。（此时开发在编写代码）之后就要进行案例评审了，评审时候有SR、测试同事、开发同事，评审时候一般SR、测试组长、对应模块的开发同事会提出一点意见，评审完之后，回去修改、补充一下案例。（案例评审0.5天）修改完以后，有两种处理情况：对大项目有时候要进行案例的第二次评审。对小项目，在时间紧的时候，一般不会二审，但是要以邮件的形式把修改或者新增后的案例发出来，给领导看，并抄送给其他同事。（案例评审0.5天，修改案例0.5天，案例二审0.5天）案例评审完就要开始测试了，一般测试环境开发搭建好（要说自己也会搭建，搭建流程背老师总结的）：中型版本的测试一般分2轮：第一轮：5天；第二轮：3天；回归测试2天；（共10个工作日）。回归测试完后，达到了上线标准，就会如期上线，一般当天晚上12点上线"}, "md/summary/需求分析.html": {"url": "md/summary/需求分析.html", "title": "需求分析", "keywords": "", "body": "需求分析1.需求人员需要何时参加需求分析？如果条件循序原则上来说是越早介入需求分析越好因为测试人员对需求理解越深刻对测试工作的开展越有利可以尽早的确定测试思路减少与开发人员的交互减少对需求理解上的偏差原则上，测试人员对需求了解得越深入对测试工作越有利，所以最好一开始就应该参加需求分析工作。这样做可以带来如下好处：测试人员全程参与需求分析，对需求了解得很深入，减少了很多与开发人员的交互，节省了时间。测试人员参与前期开发讨论，直接掌握了不清晰的需求点。早期确定测试用例的编写思路，为测试打好基础可以获取一些测试数据，为测试用例设计提供帮助可以发现需求不合理的地方，降低了测试成本。测试人员主要的工作之一就是确认系统是否正确实现了需求。2.如果需求一直在变化怎么办？这是一个常见的令人头疼的问题。如果可能，尽早与承担该项目风险的人接触，以便了解需求会怎样改变，从而可以尽早地改变测试计划和策略。如果在对应用程序进行初始设计时多考虑一些适应性，那么以后在发生需求的改变时，就不需要再为改变做很多事情了。好的代码注释和好的文档有助于开发人员作出相应的改变。只要有可能，就应使用快速原型(rapidprototyping)，以帮助用户确认他们的需求，从而减少变更。在项目的时间表中应当留出余量，以应付可能出现的变更。尽量把新的需求纳入应用软件的“下一版”，而把原始需求作为“第一版”。通过谈判，把易于实现的新的变更列入项目，而把难于实现的新需求列入该应用软件的以后的版本。要确保让客户和管理人员了解变更对进度表的影响、所带来的风险、以及因变更所引起的大量资金消耗。在应付改变时，应在为建立自动测试而作的努力和重新进行测试所做的努力之间取得平衡。在设计自动测试剧本时，试图使其有一些灵活性。在对应用软件进行自动测试时，要把注意力集中在看来不大会改变的部分。对变更进行适当的风险分析，以减少回归测试的要求。在设计测试案例时要有一定的灵活性。做到这一点并不容易，所以要降低测试案例的详细程度，或者只建立高级的通用型的测试计划。少注意详细的测试计划和测试案例，要把重点放在专门的测试上。"}, "md/summary/测试模型.html": {"url": "md/summary/测试模型.html", "title": "测试模型", "keywords": "", "body": "测试模型1.常见测试模型有哪些？特点：这是一种古老的瀑布模型，反映了实际和测试之间的关系局限：仅仅把测试过程作为编码之后的一个阶段，忽视了测试对需求分析，系统设计的验证，如果前面设计错误，得一直到后期的验收测试才被发现，耗时耗力。特点：测试与开发同时进行，在V模型的基础上，增加了在开发阶段的同步测试局限：仍然不支持迭代，减少了一定错误发生率，但是需按照流水线进行设计、编码和测试2.请根据”V”模型分别概述测试人员在软件的需求定义阶段、设计阶段、编码阶段、系统集成阶段的工作任务及其相应生成的文档？需求定义阶段：根据项目需求提取测试需求并形成测试需求文档，根据提取的测试需求和项目计划进行测试计划的拟定，测试计划文档设计阶段：根据测试需求拟定测试方案并形成测试方案文档；根据测试方案制定测试用例，并形成测试用例文档编码阶段：执行测试并完善测试用例文档系统集成阶段：测试总结报告，阶段问题统计报告，测试问题报告3.W模型的描述？4.画出软件测试的V模型图"}, "md/summary/测试计划.html": {"url": "md/summary/测试计划.html", "title": "测试计划", "keywords": "", "body": "测试计划1.测试计划工作的目的是什么？测试计划工作的内容都包括什么？其中哪些是最重要软件测试计划是指导测试过程的纲领性文件，包含了产品概述、测试策略、测试方法、测试区域、测试配置、测试周期、测试资源、测试交流、风险分析等内容。借助软件测试计划，参与测试的项目成员，尤其是测试管理人员，可以明确测试任务和测试方法，保持测试实施过程的顺畅沟通，跟踪和控制测试进度，应对测试过程中的各种变更。测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。所以其中最重要的是测试测试策略和测试方法（最好是能先评审）测试计划工作是对测试工作内容的一个有效的组织和规划，能保证测试工作有效的展开。测试计划工作包括测试目标，测试范围的定义，测试方法的选择，测试进度里程碑，测试资源的有效配置和管理。测试计划工作也称为测试策略，主要描述测试工程的总体方法和目标，描述目前在进行那一阶段的测试（单元测试，集成测试，系统测试）以及每一阶段内进行的测试种类（功能测试，性能测试等）确定测试范围，生成测试数据等。其中软件计划中的测试目标最重要，他的软件测试的所需要达成的最终结果。2.测试计划编写的六要素？why—为什么要进行这些测试what—测试哪些方面，不同阶段的工作内容when—测试不同阶段的起止时间where—相应文档，缺陷的存放位置，测试环境等who—项目有关人员组成，安排哪些测试人员进行测试how—如何去做，使用哪些测试工具以及测试方法进行测试。3.项目版本执行过程中，测试人员如何把控测试进度？在项目的系统测试过程中，测试负责人要及时了解测试进度，跟踪BUG提交、修复及验证情况以及系统的拷机情况。在开发初期阶段，测试组执行BBFV时，很多模块、功能点的开发完成进度和原计划会存在一定的偏差，就需要测试负责人动态的刷新WBS计划，根据实际的开发进度调整测试计划。在开发阶段，存在版本编译不出来导致无法测试，开发人员修复代码太随意导致版本稳定性反复，需求变更过大导致后端测试开发变更严重等现象，会导致测试工作无法正常进行。就需要测试负责人及时反馈出来，根据项目本身的特点进行对应的处理。当测试进度出现延期时，要及时确认问题原因，如果是问题协查导致，则需及时与研发人员进行沟通协商，看问题是否必须在测试环境进行排查，若为必现问题可与研发协商要求其在自己环境进行排查，若必须占用测试环境，则需及时调整测试计划，若因此可能影响版本的发布，则应及时与SE确认。若发现有较多BUG未解决，则应主动联系SE及研发人员召开BUG会确定问题的解决时间。若发现有较多BUG未验证，则应提醒项目组的测试人员及时进行验证，对于一些拷机或非必现的BUG，建议测试人员在此BUG上现做拷机标记，连续拷机一周未再复现的做关闭处理，若再次复现则继续进行排查。疑难问题的跟控：比较难复现的问题，怎么去尝试复现。比较难定位的问题，怎么驱动、反馈给SE，协调开发人员定位问题。比较难处理的问题，怎么跟控反馈进度等每天下班前需确认拷机内容，每天上班第一件事需确认拷机结果，只有这样才能保证拷机的效果，实现拷机的真正意义。4.制定测试计划之前需要了解什么问题？软件测试计划的目的是什么？是否所有人都知道？他们同意这个测试计划过程吗？测试的是什么产品？是新程序还是维护升级的？是独立程序还是由多个小程序组成的？产品的质量目标是什么？产品的功能需求和性能指标必须得到所有人的一致认可。5.测试计划都包括哪些项？测试计划的主体部分是应该包括：对时间的安排、人力物力的分配、总体的测试策略以及对风险的评估和相应的措施！还有项目的相关简介、测试范围、测试的参考文档和测试提交的文档、测试时间的安排、人力资源的分配、系统风险的评估和优先级的定义、缺陷严重级别标准以及在接下来测试工作中的编写测试用例和缺陷报告的模板！6.怎样做好测试计划？理解系统。从整个系统的高度了解被测系统必须满足的功能和非功能性需求。利用涉及整个系统的文档，形成对系统的整体了解。及早介入。为了深入了解项目，测试人员应该在系统的开始阶段介入，可以增加对客户需求，客户问题，潜在风险，以及最重要的功能方面的理解测试期望。程序员的期望是什么？客户的期望是什么？销售对测试的期望又是什么？测试目标必须是绝对的，以免说不清楚是否达到目标。吸取教训。把以前工作中学习到的经验教训运用过来，对确定测试策略很有作用。工作量大小。完成测试需要多少工作量？需要多少人员？技术选择。系统会采取什么技术？系统会采用什么架构？这些信息有助于确定测试策略和测试工具。时间表。系统开发和测试分配的时间有多长？截止日期是什么时候？7.什么是测试资源计划资源需求是确定测试策略必备条件的过程。在软件测试之前，要制定一个项目资源计划，包含每一个阶段的任务，所需要的资源，当发生类似到了使用期限或资源共享的事情时，要更新这个计划，在计划中，项目期间可能用到的任何资源都要考虑到，例如：人员：人数，经验和专长，全职还是兼职。设备：计算机，测试硬件，测试工具。软件：应用程序，数据库程序和自定义工具。其它供应：软盘，电话，参考书，培训资料。8.测试有哪些风险和问题市场的压力测试时间不够测试资源的及时到位测试人员的技能需求开发进度的变化，需求的变更开发部门的版本控制短时间上线。这个是已经定好的，没有参考测试人员的意见。时间短往往不能得到充分的测试，测试策略必须根据可用的时间进行调整。尽快指出这样的问题非常重要，只有这样才能调整时间表，确定快速开发的风险并制定降低风险的策略。新的设计过程。引入新的设计过程会增加风险，新的设计过程包括新的工具和设计技术。如果采用新的技术，能否像我们预期的那样运转，都存在很大的风险复杂性。我们应该进行一些分析工作来确定哪个功能最复杂，哪个功能最容易出错，错误会对系统的哪些地方造成重大的影响。使用频率。软件最常用功能中隐藏的问题可能给用户造成严重的损失。不可测试的需求。不可测试的需求会对系统的成功造成巨大的威胁。如果测试组在需求阶段就验证了需求的可测试性，对需求进行了评审，那么此类问题会减少很多"}, "md/summary/测试策略.html": {"url": "md/summary/测试策略.html", "title": "测试策略", "keywords": "", "body": "测试策略1.什么是“测试策略”？测试策略描述测试工程的总体方法和目标主要包括以下三个方面：确定的测试技术和工具制定测试启动停止完成标准风险分析和应对方案其目的是为我们更好的写出高质量的用例提供支撑2.测试策略包括哪些？测试策略包括：要使用的测试技术和工具；测试完成标准；影响资源分配的特殊考虑例如测试与外部接口或者模拟物理损坏、安全性威胁。3.系统测试的策略有哪些？功能测试，性能测试，可靠性测试，负载测试，易用性测试，强度测试，安全测试，配置测试，安装测试，卸载测试，文挡测试，故障恢复测试，界面测试，容量测试，兼容性测试，分布测试，可用性测试"}, "md/summary/测试类型.html": {"url": "md/summary/测试类型.html", "title": "测试类型", "keywords": "", "body": "测试类型1.请列出你所知道的软件测试种类，至少5项？2.黑盒测试、白盒测试、单元测试、集成测试、系统测试、验收测试的区别与联系？黑盒测试：把测试对象当成一个黑盒子，测试人员完全不考虑逻辑结构和内部特性，只依据程式的需求说明书来检查程序的功能是否满足它的功能说明。白盒测试：把测试对象当成一个透明的盒子，允许测试人员利用程序内部逻辑结构及相关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。单元测试：白盒测试的一种，对软件设计中的单元模块进行测试。集成测试：在单元测试的基础上，对单元模块之间的连接和组装进行测试。系统测试：在所有都考虑的情况下，对系统进行测试。验收测试：第三方进行的确认软件满足需求的测试。3.黑盒测试和白盒测试常用的测试方法有哪些，举个例子？黑盒有等价类划分法，边界分析法，因果图法和错误猜测法。白盒有逻辑覆盖法，循环测试路径选择，基本路径测试。例子：在一次输入多个条件的完整性查询中。利用等价类划分法则和边界分析法则，首先利用等价类划分法，可以一个或多个结果是OK的测试用例，然后确认多个NG的测试用例，然后利用边界值分析法，可以对结果分别是OK和NG的测试用例进行扩展和补充。4.简述黑盒测试和白盒测试的优缺点？黑盒测试的优点有：比较简单，不需要了解程序内部的代码及实现；与软件的内部实现无关；从用户角度出发，能很容易的知道用户会用到哪些功能，会遇到哪些问题；基于软件开发文档，所以也能知道软件实现了文档中的哪些功能；在做软件自动化测试时较为方便。黑盒测试的缺点有：不可能覆盖所有的代码，覆盖率较低，大概只能达到总代码量的30%；自动化测试的复用性较低。白盒测试的优点有：帮助软件测试人员增大代码的覆盖率，提高代码的质量，发现代码中隐藏的问题。白盒测试的缺点有：程序运行会有很多不同的路径，不可能测试所有的运行路径；测试基于代码，只能测试开发人员做的对不对，而不能知道设计的正确与否，可能会漏掉一些功能需求；系统庞大时，测试开销会非常大。5.在没有产品说明书和需求文档的情况下能够进行黑盒测试的设计吗？能，可以通过其他工作内容去替代产品说明书和需求文档根据客户的功能点整理测试需求追溯表根据开发人员的软件规范列表整理功能测试点开展项目跨部门讨论会，主要整理对功能点的理解和认识测试人员整理用例需求疑问提交项目组或者产品项目内部的用例，邮件客户代表确认部分争议问题项目的Demo和部分已经开发的系统参考同行业和竞争对手的类似产品交叉模块之间的测试咨询客户或相关者6.单元测试的策略有哪些，主要内容有哪些？逻辑覆盖，循环覆盖，同行评审，桌前检查，代码走查，代码评审，静态数据流分析7.简述集成测试的过程系统集成测试主要包括以下过程：构建的确认过程。补丁的确认过程。系统集成测试测试组提交过程。测试用例设计过程。测试代码编写过程。Bug的报告过程。每周/每两周的构建过程。点对点的测试过程。组内培训过程。8.集成测试进入的准则？退出的准则？集成测试由开发工程师完成进入准则：集成完成、报告完成之后退出准则：按照集成构件计划及增量集成策略完成了整个系统的集成测试达到了测试计划中关于集成测试所规定的覆盖率的要求集成工作版本满足设计定义的各项功能、性能要求；在集成测试中发现的错误已经得到修改，各级缺陷修复率达到标准9.集成测试通常都有那些策略？在把各个模块连接起来的时候，穿越模块接口的数据是否会丢失；各个子功能组合起来，能否达到预期要求的父功能；一个模块的功能是否会对另一个模块的功能产生不利的影响；全局数据结构是否有问题；单个模块的误差积累起来，是否会放大，从而达到不可接受的程度。10.设计系统测试计划需要参考哪些项目文挡？软件测试计划，软件需求工件和迭代计划。系统测试计划的依据是：软件需求规格说明书11.系统测试计划是否需要同行审批，为什么需要，系统测试计划属于项目阶段性关键文档，因此需要评审。12.Alpha测试与beta的区别Alpha测试在系统开发接近完成时对应用系统的测试；测试后仍然会有少量的设计变更。这种测试一般由最终用户或其它人员完成，不能由程序或测试员完成。Beta测试当开发和测试根本完成时所做的测试，最终的错误和问题需要在最终发行前找到。这种测试一般由最终用户或其它人员完成，不能由程序员或测试员完成。Alpha测试：用户在接近正式环境下的测试，开发人员在用户旁记录错误情况和使用中的问题。Beta测试：多个用户在实际使用环境下的测试，开发人员不在测试现场，用户通过发送报告的形式把发现的问题反馈给开发人员。α测试是由一个用户在开发环境下进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的测试。β测试是由软件的多个用户在实际使用环境下进行的测试。这些用户返回有关错误信息给开发者。测试时，开发者通常不在测试现场。因而，β测试是在开发者无法控制的环境下进行的软件现场应用。13.系统测试阶段低级缺陷较多怎么办？公司有预测试这个流程会在开展测试活动之前对主要功能点的正常流程做一个测试以判断这个版本是不是可测试版本如果低级缺陷比较多严重阻碍测试执行的话我们会打回开发部不执行测试14.系统测试的进入和退出准则？进入：（产品集成完成，打成安装包，纳入配置库）需求确认完后退出：系统功能与用户需求说明书一致测试计划规定的时间结束所有确认缺陷都已修复功能性测试用例通过率达到100%非功能性测试用例通过率达到95%15.系统测试阶段低级缺陷较多怎么办？公司有预测试这个流程会在开展测试活动之前对主要功能点的正常流程做一个测试以判断这个版本是不是可测试版本如果低级缺陷比较多严重阻碍测试执行的话我们会打回开发部不执行测试16.系统测试包含哪些方面？恢复测试安全测试强度测试性能测试17.什么是验收测试？验收测试的目的是向未来的用户表明系统能够像预定要求那样工作。经集成测试后，已经按照设计把所有的模块组装成一个完整的软件系统，接口错误也已经基本排除了，接着就应该进一步验证软件的有效性，这就是验收测试的任务，即软件的功能和性能如同用户所合理期待的那样。18.软件验收测试具体包括哪些测试？正式验收测试，alpha测试，beta测试。19.什么是功能测试？功能测试是在规定的一段时间内运行软件系统的所有功能，以验证这个软件系统有无严重错误20.请问功能测试和性能测试的区别是什么？（只总结了两个方面，有其他的自己补充）测试目的：功能测试：检查实际软件的功能是否符合用户的需求，测功能是不是全部实现，某个实现是不是有BUG。主要为了发现以下几类错误：A、是否有不正确或遗漏的功能？B、功能实现是否满足用户需求和系统设计的隐藏需求？C、能否正确接收输入？能否正确输出结果？性能测试：验证软件质量的三个质量特性，可靠性，正确性和效率。主要是测试产品的健壮性测试方式：功能测试：按照系统需求说明书和测试用例，对产品的功能一步步进行测试。找出产品功能是否全部实现性能测试：一般都使用性能工具对产品的健壮性进行评估。通过创建场景和虚拟用户来模拟真是环境，进行压力测试和负载测试。21.兼容性测试这类测试主要想验证软件产品在不同环境之间的兼容性主要有操作系统和浏览器22.什么是易用性测试？可使用性测试主要从使用的合理性和方便性等角度对软件系统进行检查，发现人为因素或使用上的问题。要保证在足够详细的程度下，用户界面便于使用；对输入量可容错、响应时间和响应方式合理可行、输出信息有意义、正确并前后一致；出错信息能够引导用户去解决问题；软件文档全面、正规、确切。23.什么是文档测试这种测试是检查用户文档（如用户手册）的清晰性和精确性。用户文档中所使用的例子必须在测试中一一试过，确保叙述正确无误。24.怎么做好文档测试仔细阅读，跟随每个步骤，检查每个图形，尝试每个示例。检查文档的编写是否满足文档编写的目的内容是否齐全，正确内容是否完善标记是否正确25.文档测试要注意什么？文档的读者群、文档的术语、文档的正确性、文档的完整性、文档的一致性、文档的易用性、样例与示例、文档的语言26.什么是安全测试？安全性测试是要检验在系统中已经存在的系统安全性、保密性措施是否发挥作用，有无漏洞。力图破坏系统的保护机构以进入系统的主要方法有以下几种：正面攻击或从侧面、背面攻击系统中易受损坏的那些部分；以系统输入为突破口，利用输入的容错性进行正面攻击27.什么时候适用自动化测试？可重复的、不知疲倦地运动，对于数据能进行精确的大批量的比较的；回归测试在机械化的执行和比较28.什么时候不宜使用自动化的情况周期短并且一次性的项目进度非常紧张的项目需求非常不稳定的项目界面尚未确定使用了很多第三方或自定义控件的项目29.什么是性能测试？性能测试是要检查系统是否满足在需求说明书中规定的性能。特别是对于实时系统或嵌入式系统。性能测试常常需要与强度测试结合起来进行，并常常要求同时进行硬件和软件检测。通常，对软件性能的检测表现在以下几个方面：响应时间、吞吐量、辅助存储区，例如缓冲区，工作区的大小等、处理精度，等等。30.您在从事性能测试工作时，是否使用过一些测试工具？如果有，请试述该工具的工作原理，并以一个具体的工作中的例子描述该工具是如何在实际工作中应用的有使用过LoadRunner,该工具能够录制测试人员的操作步骤，然后对这个操作步骤模拟出多个用户来播放出来。VUG创建脚本，选择协议，录制操作，编辑操作。控制器（Controller）调度虚拟用户。创建场景，选择脚本，建立虚拟用户，设计shedual，设置ipspoofer。运行脚本。分析测试结果。31.您认为性能测试工作的目的是什么？做好性能测试工作的关键是什么？性能测试工作的目的是检查系统是否满足在需求说明书中规定的性能，性能测试常常需要和强度测试结合起来，并常常要求同时进行软件和硬件的检测。性能测试主要的关注对象是响应时间，吞吐量，占用内存大小（辅助存储区），处理精度等。32.性能测试什么时候开始最合适一般在功能测试的最后阶段执行因为功能走通了性能才有意义总之性能测试要根据用户的实际性能指标来操作是一个很重要的测试活动要根据软件的属性以及它的实际情况来制定策略33.并发性能测试的目的主要体现在三个方面？以真实的业务为依据，选择有代表性的、关键的业务操作设计测试案例，以评价系统的当前性能；当扩展应用程序的功能或者新的应用程序将要被部署时，负载测试会帮助确定系统是否还能够处理期望的用户负载，以预测系统的未来性能；通过模拟成百上千个用户，重复执行和运行测试，可以确认性能瓶颈并优化和调整应用，目的在于寻找到瓶颈问题。"}, "md/summary/测试流程.html": {"url": "md/summary/测试流程.html", "title": "测试流程", "keywords": "", "body": "测试流程1.软件测试的基本流程有哪些？需求分析、编写测试用例、评审测试用例、搭建环境、等待程序开发包、部署程序开发包、冒烟测试、执行具体的测试用例细节、Bug跟踪处理回归测试、N轮之后满足需求，测试结束2.测试结束的标准是什么？测试超过了预定时间，则停止测试。执行了所有的测试用例，但并没有发现故障，则停止测试。使用特定的测试用例设计方案作为判断测试停止的基础正面指出停止测试的具体要求，即停止测试的标准可定义为查出某一预订数目的故障。根据单位时间内查出故障的数量决定是否停止测试。3.软件测试的原则是什么？应当把“尽早地和不断地进行软件测试”作为软件开发者的座右铭。测试用例应由测试输入数据和对应的预期输出结果这两部分组成。程序员应避免检查自己的程序。在设计测试用例时，应包括合理的输入条件和不合理的输入条件。软件测试的原则充分注意测试中的群集现象。经验表明，测试后程序中残存的错误数目与该程序中已发现的错误数目成正比。严格执行测试计划，排除测试的随意性。应当对每一个测试结果做全面检查。妥善保存测试计划，测试用例，出错统计和最终分析报告，为维护提供方便。"}, "md/summary/用例设计.html": {"url": "md/summary/用例设计.html", "title": "用例设计", "keywords": "", "body": "用例设计1.什么是测试用例，测试用例的基本要素？测试用例是为某个特殊目标而编制的一组测试输入、执行条件以及预期结果，以便测试某个程序路径或核实是否满足某个特定需求。测试用例的基本元素：测试索引，测试环境，测试输入，测试操作，预期结果，评价标准。2.怎样写测试用例在测试面试的过程中大多都会问到你是怎么来设计测试用例的刚开始的时候都会被问懵。我们从两个方面来看怎么设计测试用例对于新手来说最简单的是从用户的角度来设计测试用例，即使之前没有接触过软件测试但是每个人的生活中都离不开”APP”。从用户的角度来讲，一个产品首先关注的当然是产品的功能，其次是兼容性和稳定性，最后是容错能力。翻译成测试用户就是，首先写功能测试用例然后写兼容性测试用例和稳定性测试用例，最后想想在测试过程中会遇到哪些异常，针对这些异常设计一些用例，来检验产品的容错能力。常用的用例编写的方法有边界值法、等价类划分法、功能图法、因果图等常用的编写测试用例的方法。3.描述测试用例设计的完整过程？首先根据需求文档、概要设计、测试计划、测试方案细分出各功能模块的测试项再根据各测试项，按照概要设计、详细设计以及测试方案中测试的覆盖率细分出测试子项最后按照测试子项、根据测试用例的设计方法（因果图、边界值、等价类等的设计方法）书写测试用例。注意选用适合的用例管理工具（如word，excel）用例一定要及时更新（补充新的想法，删除过时的需求）做好用例分级做好用例评审，写用例之前可以征询相关人员的意见，如果评审通过可以参考其执行测试，如果未通过，需要继续修改直到通过为止。可以考虑结对编写，这个是不错的主意要全面，包括功能、性能、兼容性、安全性、易用性、容错性等等注意把握适当的颗粒度4.好的测试用例有哪些特点？质量属性：正确性：确保测试标题描述部分的内容正确性。经济性：只为确定需要的目的设计相应的测试步骤。可重复性：自我一致性，即不管谁执行此用例，结果一样。适应性：既能适应短期需要，又能考虑长远需要。可追踪性：用例能追踪到一个具体的需求。自我清理性：单个用例不会影响整个测试环境，即用例执行完了可以恢复原有的测试环境。结构化和可测试性含有规范的测试标题和编号。含有一个确定的测试某一个特定需求的目的。含有关于测试方法的描述。指定条件信息-环境、数据、预置的条件测试、安全入口等。含有操作步骤和预期结果。陈述任何辅助证据，例如截图报告并确保这些东西妥善保存。确保测试环境的干净（即用例不会影响整个环境）。描述时使用主动语气结构。操作步骤不要超过15步。确保单个用例测试执行时用时不超过20分钟。自动化脚本用例添加必要的注释，比如目的、输入和期望结果。如果可能，建议提供可选择性的预置条件测试。用例之间的先后顺序是否跟业务流程一致，即用例在业务流程中的彼此顺序关系是否合理。配置管理：采用命名和编号规范归档。保存为特定的格式，文件类型。用例版本是否与当前被测试软件版本一致（对应）。包含用例需要的相应测试对象，如特定数据库。存档阅读。5.测试用例制定的原则？测试用例要包括欲测试的功能、应输入的数据和预期的输出结果。测试数据应该选用少量、高效的测试数据进行尽可能完备的测试；基本目标是：设计一组发现某个错误或某类错误的测试数据，测试用例应覆盖方面：正确性测试：输入用户实际数据以验证系统是满足需求规格说明书的要求；测试用例中的测试点应首先保证要至少覆盖需求规格说明书中的各项功能，并且正常。容错性（健壮性）测试：程序能够接收正确数据输入并且产生正确（预期）的输出，输入非法数据（非法类型、不符合要求的数据、溢出数据等），程序应能给出提示并进行相应处理。把自己想象成一名对产品操作一点也不懂的客户，在进行任意操作。完整（安全）性测试：对未经授权的人使用软件系统或数据的企图，系统能够控制的程度，程序的数据处理能够保持外部信息（数据库或文件）的完整。接口间测试：测试各个模块相互间的协调和通信情况，数据输入输出的一致性和正确性。数据库测试：依据数据库设计规范对软件系统的数据库结构、数据表及其之间的数据调用关系进行测试。边界值分析法：确定边界情况（刚好等于、稍小于和稍大于和刚刚大于等价类边界值），针对我们的系统在测试过程中主要输入一些合法数据/非法数据，主要在边界值附近选取。压力测试：输入10条记录运行各个功能，输入30条记录运行，输入50条记录运行。进行测试。等价划分：将所有可能的输入数据（有效的和无效的）划分成若干个等价类。错误推测：主要是根据测试经验和直觉，参照以往的软件系统出现错误之处。效率：完成预定的功能，系统的运行时间（主要是针对数据库而言）。可理解（操作）性：理解和使用该系统的难易程度（界面友好性）。可移植性：在不同操作系统及硬件配置情况下的运行性。回归测试：按照测试用例将所有的测试点测试完毕，测试中发现的问题开发人员已经解决，进行下一轮的测试。比较测试：将已经发版的类似产品或原有的老产品与测试的产品同时运行比较，或与已往的测试结果比较。6.测试用例是否纳入测试基线管理？测试用例发生变更的流程？测试用例如何进行标识？是。测试用例没有变更流程测试用例的标识为ST-001这种格式标识7.什么时候编写测试用例？依据是什么？如何保证测试用例与需求的一致性？需要同行评审吗？在测试计划完成之后，按照计划进度编写测试用例。依据是软件需求规格说明书通过同行评审来对用例进行评审，需要同行评审8.测试用例如何设计的？在测试用例的设计之前首先要仔细阅读开发的详细设计文档，充分了解产品的详细功能，不清的地方与开发人员进行沟通，搞懂每个功能，尽量详细到输入框、按钮等小功能，功能点清楚之后按照功能模块分类进行用例编写。在具体的用例设计中会运用到等价类边界值等黑盒测试方法9.如何保证用例覆盖到罕见缺陷？充足的设计时间充分的需求分析每一个功能点都有用例覆盖严格的评审流程保障输出都是有效的在测试执行过程中，会根据实际的项目情况，对用例做增加和修改10.什么时候编写测试用例？依据是什么？如何保证测试用例与需求的一致性？需要同行评审吗？在测试计划完成之后，按照计划进度编写测试用例。依据是软件需求规格说明书通过同行评审来对用例进行评审，需要同行评审11.写测试用例时要注意什么问题复用率：如果随着产品不停得升级，需要设计的详细些，追求一劳永逸；仅使用一两次，则没有必要设计的过于详细；项目进展：项目时间如果允许可以设计的详细些，反之则能执行即可；使用对象：测试用例如果供多人使用，尤其让后参加测试的工程师来执行，则需要设计的详细些。用例的冗余操作步骤要细分简明，可执行12.如何在有限的情况下提高测试效率，保证产品的上线质量？一个详细合理的详细的测试计划测试尽早的介入项目，连接项目的业务需求，做好测试的前期准备对测试项目前景充满信心，调整最佳心态，保持愉悦的工作心情提高测试接受的标准，减少测试版本的送测次数13.如何降低漏测率需求评审梳理需求，尽早与开发人员、需求人员进行需求确认，统一不同角色对需求的认识用例设计及评审测试执行bug回归发布前的功能回归14.测试用例的基本设计方法等价类划分法边界值分析法错误推断法因果图判定表法正交实验法流程法场景法15.测试为什么要写测试用例深入了解需求的过程测试执行的指导规划测试数据的准备反应测试进度举一反三发现隐藏缺陷分析缺陷标准"}, "md/summary/缺陷bug.html": {"url": "md/summary/缺陷bug.html", "title": "缺陷 bug", "keywords": "", "body": "缺陷bug1.什么是缺陷报告，缺陷报告的作用，缺陷报告的要点缺陷报告是描述软件缺陷现象和重现步骤的集合。软件缺陷报告SoftwareBugReport(SBR)或软件问题报告softwareProblemReport(SPR)。缺陷报告是软件测试人员的工作成果之一，体现软件测试的价值缺陷报告可以把软件存在的缺陷准确的描述出来，便于开发人员修正缺陷报告可以反映项目/产品当前的质量状态，便于项目整体进度和质量控制软件测试缺陷报告是软件测试的输出成果之一，可以衡量测试人员的工作能力。标题(Title)简洁、准确、完整、反映缺陷本质、方便查询前缀+标题正文，标题正文采用结果和动作，或者现象和位置的方式表达；步骤(Steps)可复现、完整、简洁、准确按数字编号；实际结果(Actualresults)准确、详细描述软件的现象和特征；期望结果(Expectedresults)准确、丰富、有理有据；平台(Platforms)准确；截图(Sereenshots)准确反映缺陷特征；注释(Notes)关于缺陷的辅助说明2.缺陷报告的优先级别最高优先级：立即修复，停止进一步测试次高优先级：在产品发布之前必须修复中等优先级：如果时间允许应该修复最低优先级：可能会修复，但是也能发布3.简单概述缺陷报告现在缺陷报告一般不再使用纸质档文档编写，而是专用测试管理工具（如TestDirector、禅道），这样便于缺陷管理。在这些工具中，每个缺陷作为一条记录输入指定的缺陷管理系统中。4.缺陷报告包括哪些项？缺陷报告包括：软件名称、版本号、功能模块、缺陷编号、对应的用例编号、编写时间、编写人、测试员、预期结果、实际结果、缺陷描述、严重级别、优先级别5.软件测试缺陷报告的5C原则Correct（准确）：每个组成部分的描述准确，不会引起误解；Clear（清晰）：每个组成部分的描述清晰，易于理解；Concise（简洁）：只包含必不可少的信息，不包括任何多余的内容；Complete（完整）：包含复现该缺陷的完整步骤和其他本质信息；Consistent（一致）：按照一致的格式书写全部缺陷报告。6.软件缺陷的生命周期？测试人员提交新的Bug入库，错误状态为New。高级测试人员验证错误，如果确认是错误，分配给相应的开发人员，设置状态为Open。如果不是错误，则拒绝，设置为Declined（拒绝）状态。开发人员查询状态为Open的Bug，如果不是错误，则置状态为Declined；如果是Bug则修复并置状态为Fixed。不能解决的Bug，要留下文字说明及保持Bug为Open状态。对于不能解决和延期解决的Bug，不能由开发人员自己决定，一般要通过某种会议（评审会）通过才能认可。测试人员查询状态为Fixed的Bug，然后验证Bug是否已解决，如解决置Bug的状态为Closed，如没有解决置状态为Reopen。7.缺陷描述（报告单）中应该包括哪些内容？缺陷的标题，简要描述。缺陷的类型。缺陷的详细步骤描述。缺陷的实际结果。期望结果。有的缺陷需要上传截图，日志信息。缺陷的等级。缺陷指派给开发同事。8.如何提高缺陷的记录质量？通用UI要统一、准确；尽量使用业界惯用的表达术语和表达方法；使用业界惯用的表达术语和表达方法，保证表达准确，体现专业化；每条缺陷报告只包括一个缺陷；不可重现的缺陷也要报告；明确指明缺陷类型；明确指明缺陷严重等级和优先等级；描述(Description)，简洁、准确，完整，揭示缺陷实质，记录缺陷或缺陷出现的位置；短行之间使用自动数字序号，使用相同的字体、字号、行间距；每一个步骤尽量只记录一个操作；确认步骤完整，准确，简短；根据缺陷，可选择是否进行图象捕捉；检查拼写和语法缺陷；尽量使用短语和短句，避免复杂句型句式；缺陷描述内容。9.如果一个缺陷被提交后，开发人员认为不是问题，怎么处理？首先，将问题提交到缺陷管理库里面进行备案。然后，要获取判断的依据和标准：根据需求说明书、产品说明、设计文档等，确认实际结果是否与计划有不一致的地方，提供缺陷是否确认的直接依据；如果没有文档依据，可以根据类似软件的一般特性来说明是否存在不一致的地方，来确认是否是缺陷；根据用户的一般使用习惯，来确认是否是缺陷；与设计人员、开发人员和客户代表等相关人员探讨，确认是否是缺陷；合理的论述，向测试经理说明自己的判断的理由，注意客观、严谨，不掺杂个人情绪。等待测试经理做出最终决定，如果仍然存在争议，可以通过公司政策所提供的渠道，向上级反映，并有上级做出决定。10.软件缺陷的原则软件缺陷区别于软件bug,它是在测试过程中出现的对系统有影响的，但是在设计中没有的或者对修改后的bug测试和开发人员有不同意见等软件未达到产品说明书标明的功能。软件出现了产品说明书指明不会出现的错误。软件功能超出产品说明书指明范围。软件未达到产品说明书虽未指出但应达到的目标。软件测试员认为软件难以理解、不易使用、运行速度缓慢，或者最终用户认为不好。11.软件缺陷的特征“看不到”——软件的特殊性决定了缺陷不易看到“看到但是抓不到”——发现了缺陷，但不易找到问题发生的原因所在12.软件缺陷产生的原因软件产品说明书（需求）——56%设计——27%编写代码——7%其他——10%13.什么是Bug？软件的Bug指的是软件中（包括程序和文档）不符合用户需求的问题。常见的软件Bug分为以下三类：没有实现的功能完成了用户需求的功能，但是运行时会出现一些功能或性能上的问题实现了用户不需要的多余的功能14.缺陷处理流程测试人员提交新的Bug入库，错误状态为New。高级测试人员验证错误，如果确认是错误，分配给相应的开发人员，设置状态为Open。如果不是错误，则拒绝，设置为Declined（拒绝）状态。开发人员查询状态为Open的Bug，如果不是错误，则置状态为Declined；如果是Bug则修复并置状态为Fixed。不能解决的Bug，要留下文字说明及保持Bug为Open状态。对于不能解决和延期解决的Bug，不能由开发人员自己决定，一般要通过某种会议（评审会）通过才能认可。测试人员查询状态为Fixed的Bug，然后验证Bug是否已解决，如解决置Bug的状态为Closed，如没有解决置状态为Reopen。15.缺陷的等级划分严重：系统崩溃、数据丢失、数据毁坏较严重：操作性失误、错误结果、遗漏功能一般：小问题、错别字、UI布局、罕见故障建议：不影响使用的瑕疵或更好的实现16.开发人员修复缺陷后，如何保证不影响其他功能？重新执行用例、看是否出现错误结果。并对周围的一些相关功能点追加新的测试用例。17.状态为已修改的缺陷，实际没有修改怎么办？加强项目质量管理，提高项目执行能力。如果测试人员发现了这样的问题，首先要弄清楚是什么原因导致这种情况，最终还是要督促开发人员，修改掉这些问题。如果是不能重现的问题或者是老版本中遗留下来的问题不能修改的要做好标示。18.生产软件的最终目的是为了满足客户需求，我们以客户需求作为评判软件质量的标准，认为软件缺陷（SoftwareBug）的具体含义包括哪些几个因素？软件未达到客户需求的功能和性能；软件超出客户需求的范围；软件出现客户需求不能容忍的错误；软件的使用未能符合客户的习惯和工作环境。19.如何进行缺陷评估评估软件质量的重要指标，通常评估模型假设缺陷的发现是呈泊松分布的；严格的缺陷评估要考察在测试过程中发现缺陷的间隔时间长短。评估要估计软件当前的可靠性并预测随着测试的继续进行，软件可靠性会怎样提高。SQASuite提供四种形式进行缺陷评估：缺陷分布报告可以生成缺陷数量与缺陷属性的函数。如测试需求和状态。缺陷趋势报告可以看出缺陷增长和减少的趋势；缺陷年龄报告展示一个缺陷处于某种状态的时间长短测试结果进度报告展示测试过程在被测应用的几个版本中的执行结果以测试周期。具体步骤回顾测试日记评估测试需求的覆盖率分析缺陷决定是否达到完成测试的标准，没有满足标准时再测试降低标准确定软件的一个满足标准的子集，看是否可以发布。"}, "md/summary/测试案例.html": {"url": "md/summary/测试案例.html", "title": "测试案例", "keywords": "", "body": "测试案例1.给你一个网站，你应该如何测试？首先，查找需求说明、网站设计等相关文档，分析测试需求。制定测试计划，确定测试范围和测试策略，一般包括以下几个部分：功能性测试、界面测试、性能测试、数据库测试、安全性测试、兼容性测试设计测试用例：功能性测试可以包括，但不限于以下几个方面：链接测试。链接是否正确跳转，是否存在空页面和无效页面，是否有不正确的出错信息返回等。提交功能的测试。多媒体元素是否可以正确加载和显示。多语言支持是否能够正确显示选择的语言等。界面测试可以包括但不限于一下几个方面：页面是否风格统一，美观页面布局是否合理，重点内容和热点内容是否突出控件是否正常使用性能测试一般从以下两个方面考虑：压力测试、负载测试、强度测试、数据库测试要具体决定是否需要开展。数据库一般需要考虑连结性，对数据的存取操作，数据内容的验证等方面。安全性测试：基本的登录功能的检查是否存在溢出错误，导致系统崩溃或者权限泄露相关开发语言的常见安全性问题检查，例如SQL注入等。如果需要高级的安全性测试，确定获得专业安全公司的帮助，外包测试，或者获取支持兼容性测试，根据需求说明的内容，确定支持的平台组合：浏览器的兼容性、操作系统的兼容性、软件平台的兼容性、数据库的兼容性开展测试，并记录缺陷。合理的安排调整测试进度，提前获取测试所需的资源，建立管理体系（例如，需求变更、风险、配置、测试文档、缺陷报告、人力资源等内容）。定期评审，对测试进行评估和总结，调整测试的内容。（一个网站基本完工后，需要通过下面三步测试才可以交付）制作者测试，包括美工测试页面、程序员测试功能。在做完后第一时间内有制作者本人进行测试。全面测试根据交工标准和客户要求，由专人进行全面测试发布测试网站发布到主服务器之后的测试，主要是防止环境不同导致的错误2.一个有广告的纸杯子，请设计测试用例？测试项目：杯子需求测试：查看杯子使用说明书界面测试：查看杯子外观功能度：用水杯装水看漏不漏；水能不能被喝到安全性：杯子有没有毒或细菌可靠性：杯子从不同高度落下的损坏程度可移植性：杯子在不同的地方、温度等环境下是否都可以正常使用兼容性：杯子是否能够容纳果汁、白水、酒精、汽油等易用性：杯子是否烫手、是否有防滑措施、是否方便饮用用户文档：使用手册是否对杯子的用法、限制、使用条件等有详细描述疲劳测试：将杯子盛上水（案例一）放24小时检查泄漏时间和情况；盛上汽油（案例二）放24小时检查泄漏时间和情况等压力测试：用根针并在针上面不断加重量，看压强多大时会穿透跌落测试：杯子加包装（有填充物）,在多高的情况摔下不破损震动测试：杯子加包装（有填充物）,六面震动，检查产品是否能应对恶劣的铁路、公路、航空运输基本功能测试（逻辑功能测试）。硬度：是否达到设计标准。装载能力：在杯子内分别装入少量的、半杯的、满杯的，看其装载量是否达到设计标准。装载种类：开水（是否产生异味）、温水、冷水、冰水、咖啡。..界面测试（UI测试）。看其形状、大小设计是否适合人方便拿起。外观是否吸引人（广告嘛），赏心悦目。带广告的图案沾水受是否掉色、模糊。易用性测试。看其形状、大小设计是否适合人方便拿起。残疾人士用此杯去喝水的容程度。杯子设计是否上大下小，在运输过程中可以套在一起有效利用空间，在使用时也容易拿开。稳定性测试（24X7测试）。装入液体后记录其多少以后漏水。安全性测试。杯子所用的材料（包括纸基、涂层和广告颜料）是否符合食品卫生标准，在内外温度等环境因素下是否会与所盛各种饮料相反应，而产生对人体有害的物质。本地化测试。为国际化和本地化的需要，广告图案和文字是否在政治、宗教和文化方面具有广泛的适用性。对设计的改进建议。“如果是一次性杯子，能否标示已使用（比如变色）”和“杯子是否有使用者标贴（多人使用时防止混淆）”。3.一个身份证号码输入框，怎么设计用例？校验身份证号规则的有效性（包括地址码、生日期码、顺序码和校验码，校验15位身份证号和18位身份正好都是可用的）校验末位是X的情况校验不足15位、16-17位和大于18位的情况如果是必输项，校验不输入的时候会不会有正确的提示如果不是必输项，则要校验不输入的时候流程能否正常进行校验输入非数字的情况，是否会有正确提示信息（包括大小写字母、汉字、特殊字符和标点符号）校验输入全角的数字的时候，系统是否会识别（这个得根据需求确定是否可以使用全角的数字）4.登录功能怎么设计测试用例？具体需求：有一个登录页面，有一个账号和一个密码输入框，一个提交按钮。此题的考察目的：了解需求（测什么都是从了解需求开始）；2、是否有设计TestCase的能力是否熟悉各种测试方法；是否有丰富的Web测试经验；是否了解Web开发；了解需求：登录界面应该是弹出窗口式的，还是直接在网页里面；账号长度和密码的强度（比如需要多少位、大小写敏感、特殊字符混搭等）；界面美观是否有特殊要求？（即是否要进行UI测试）；····用例设计：测试需求分析完成后，开始用例设计，主要可以从以下几个方面考虑：功能测试(FunctionTest)输入正确的账号和密码，点击提交按钮，验证是否能正确登录。（正常输入）输入错误的账号或者密码，验证登录会失败，并且提示相应的错误信息。（错误校验）登录成功后能否跳转到正确的页面（低）账号和密码，如果太短或者太长，应该怎么处理（安全性，密码太短时是否有提示）账号和密码，中有特殊字符（比如空格），和其他非英文的情况（是否做了过滤）记住账号的功能登录失败后，不能记录密码的功能账号和密码前后有空格的处理密码是否加密显示（星号圆点等）牵扯到验证码的，还要考虑文字是否扭曲过度导致辨认难度大，考虑颜色（色盲使用者），刷新或换一个按钮是否好用登录页面中的注册、忘记密码，登出用另一帐号登录等链接是否正确输入密码的时候，大写键盘开启的时候要有提示信息。什么都不输入，点击提交按钮，看提示信息。（非空检查）界面测试(UITest)布局是否合理，2个Textbox和一个按钮是否对齐Textbox和按钮的长度，高度是否符合要求界面的设计风格是否与UI的设计风格统一界面中的文字简洁易懂，没有错别字。性能测试(PerformanceTest)打开登录页面，需要几秒输入正确的账号和密码后，登录成功跳转到新页面，不超过5秒安全性测试(SecurityTest)登录成功后生成的Cookie是否有HttpOnly（降低脚本盗取风险）账号和密码是否通过加密的方式，发送给Web服务器账号和密码的验证，应该是用服务器端验证，而不能单单是在客户端用javaScript验证账号和密码的输入框，应该屏蔽SQL注入攻击账号和密码的输入框，应该禁止输入脚本（防止XSS攻击）错误登录的次数限制（防止暴力破解）考虑是否支持多用户在同一机器上登录；考虑一用户在多台机器上登录可用性测试(UsabilityTest)是否可以全用键盘操作，是否有快捷键输入账号，密码后按回车，是否可以登录输入框是否可以以Tab键切换兼容性测试（CompatibilityTest）主流的浏览器下能否显示正常已经功能正常（IE6~11,FireFox,Chrome,Safari等）不同的平台是否能正常工作，比如Windows,Mac移动设备上是否正常工作，比如iPhone,Android不同的分辨率本地化测试（LocalizationTest）不同语言环境下，页面的显示是否正确。软件辅助性测试（AccessibilityTest）软件辅助功能测试是指测试软件是否向残疾用户提供足够的辅助功能高对比度下能否显示正常（视力不好的人使用）5.移动端和web端测试有什么区别单纯从功能测试的层面上来讲的话，APP测试、web测试在流程和功能测试上是没有区别的。根据两者载体不一样，则区别如下：系统结构方面web项目，b/s架构，基于浏览器的；web测试只要更新了服务器端，客户端就会同步会更新。app项目，c/s结构的，必须要有客户端；app修改了服务端，则客户端用户所有核心版本都需要进行回归测试一遍。性能方面web项目需监测响应时间、CPU、Memoryapp项目除了监测响应时间、CPU、Memory外，还需监测流量、电量等兼容方面web项目：浏览器（火狐、谷歌、IE等）操作系统（Windows7、Windows10、Linux等）app项目：设备系统：iOS（ipad、iphone）、Android（三星、华为、联想等）、Windows（Win7、Win8）、OSX（Mac）手机设备可根据手机型号、分辨率不同相对于Wed项目，APP有专项测试干扰测试：中断，来电，短信，关机，重启等弱网络测试（模拟2g、3g、4g，wifi网络状态以及丢包情况）；网络切换测试（网络断开后重连、3g切换到4g/wifi等）安装、更新、卸载安装：需考虑安装时的中断、弱网、安装后删除安装文件等情况卸载：需考虑卸载后是否删除app相关的文件更新：分强制更新、非强制更新、增量包更新、断点续传、弱网状态下更新界面操作：关于手机端测试，需注意手势，横竖屏切换，多点触控，前后台切换安全测试：安装包是否可反编译代码、安装包是否签名、权限设置，例如访问通讯录等边界测试：可用存储空间少、没有SD卡/双SD卡、飞行模式、系统时间有误、第三方依赖（QQ、微信登录）等权限测试：设置某个App是否可以获取该权限，例如是否可访问通讯录、相册、照相机等测试工具方面自动化工具：APP一般使用Appium;Web一般使用Selenium性能测试工具：APP一般使用JMeter;Web一般使用LR、JMeter6.测试一个C/S客户端时，需要考虑的因素客户端安装测试客户端升级测试客户端可维护性测试个体的客户端应用以“分离的”模式被测试——不考虑服务器和底层网络的运行；客户端软件和关联的服务器端应用被一起测试，但网络运行不被明显的考虑；完整的C/S体系结构，包括网络运行和性能被测试。应用功能测试客户端应用被独立地执行，以揭示在其运行中的错误。服务器测试测试服务器的协调和数据管理功能，也考虑服务器性能（整体反映时间和数据吞吐量）。数据库测试：测试服务器存储的数据的精确性和完整性，检查客户端应用提交的事务，以保证数据被正确地存储、更新和检索。事务测试：创建一系列的测试以保证每类事务被按照需求处理。测试着重于处理的正确性，也关注性能问题。网络通信测试：这些测试验证网络节点间的通信正常地发生，并且消息传递、事务和相关的网络交通无错的发生7.测试电梯，请详细描述如果给你一台电梯，请问你如何测试它，分析如下：功能：上升、下降、停止、开门、关门、梯内电话、灯光、指示灯等；性能：速度、反应时间、关门时间等；压力：超载、尖锐物碰撞电梯壁等；安全：停电、报警装置、轿箱停靠位置、有人扒门时的情况等；可用性：按键高度、操作是否方便、舒适程度等；UI：美观程度、光滑程度、形状、质感等；稳定性：长时间运行情况等；兼容性：不同电压是否可工作、不同类型电话是否可安装等。其实在简单分析的过程中，发现许多东西根本测试不全，比如电话、灯光、材质、调度程序、可维修性等，当发现在一个用例中无法说清楚时，这些应该拆分开来分别测试。可以告诉主考官，你需要模块化地测试电话、灯光等。再有在一起的组装测试。下面是详细的测试点：需求测试：查看电梯使用说明书、安全说明书等界面测试：查看电梯外观功能测试：测试电梯能否实现正常的上升和下降功能。电梯的按钮是否都可以使用。电梯门的打开，关闭是否正常。报警装置是否可用。与其他电梯之间是否协作良好。通风状况如何。突然停电时的情况。上升途中的响应。电梯本来在1楼，如果有人按18楼，那么电梯在上升到5楼的时候，有人按了10楼，这时候是否会在10楼先停下来电梯下降到10层时显示满员，此时若8层有人等待电梯，是否在8层停。是否有手机信号可靠性测试：门关上的一刹那出现障碍物。同时按关门和开门按钮。点击当前楼层号码多次点击同一楼层号码同时按上键和下键易用性：电梯的按钮的设计符合一般人的习惯吗用户文档：使用手册是否对电梯的用法、限制、使用条件等有详细的描述压力测试：1.看电梯的最大承重量，在负载过重时报警装置是否有提醒稳定性测试：看垫底在最大负载下平行运行的最长时间8.对一只圆珠笔进行测试界面测试，无论我们做那类软件（嵌入式别提），只要给用户有看到的东西，从测试的角度，就要考虑界面测试，这个呢，现在针对微软的产品，某公司开发了一套界面检查表，我这里有一份，想要可以找我界面测试测什么，怎么测呢？针对这个问题我是这样回答的，印刷在产品上的图片，文字，这可能涉及不同的东西，有圆珠笔厂家的信息，也有针对不同用户的信息（譬如小孩子喜欢颜色搭配多一点的，而成人用稳重的产品等），可能涉及的还有人的审美观，你圆珠笔色彩搭配之类的功能测试，这是我们测试的重点，也是客户针对某家公司产品给出满意度的参考点，圆珠笔功能主要是书写，这里面涉及一个功用方面的焦点——书写的快慢程度，也就是流利不流利的问题（这涉及笔芯的材质问题）针对这方面的测试，个人认为应从以下几点材质问题，这涉及程序员和用户之间的关系，两者利益均有，程序员考虑成本问题，用户考虑污染问题，也就是说制作圆珠笔的材料与环境的问题，厂商考虑价格因素，用户考虑环境因素以及安全性因素。这就把安全性测试给说出来了，大的方面因为笔油材质的问题，和使用者之间的健康问题有联系，要测小的方面，笔油的速率，以及书写后是否马上可以涂抹，可否修改，这都涉及安全性的问题性能问题，温度，湿度，气压对笔芯产生不同的影响安全性问题测试不同的高度，笔身做自由落体损坏程度兼容性问题不同的笔筒和笔芯之间的互相兼容强度测试弹簧在不同的压力之下，承受变形的程度在金山面试时候，考官特意问我针对笔芯那个米珠如何测试界面测试界面测试也就是对其外表先进行判断。尺寸是否适合用户使用？用户需要的是什么样的尺寸，小孩和成年人使用的尺寸是有区别的；色彩搭配是否合理？形状是否美观？是否方便携带和存放？笔芯颜色是否与客户要求一致？笔身印的log或者文字是否这么正确功能测试笔筒开合；笔芯替换；出墨快慢；笔头出墨粗细；是不是可操作性签字笔；性能测试笔芯的寿命；笔墨的气味；写过的字用纸水浸透后，笔墨是否会晕开压力测试笔尖在多大压力范围内可以正常写字，不能正常出墨，太重损坏笔尖或纸张；笔壳能在多大压力范围内正常使用？成人用力太重掰断笔壳，掉到地上易摔，能在纸上写出清晰的字性能测试握笔的地方纹路是否会硌手或太滑；书写的流畅度；写出的墨水多久能干；高温和低温环境对笔芯出墨和笔壳的影响；长时间不盖笔套，或笔盖盖多长时间不用，会不会对笔下次写字有影响安全测试笔墨是否有易燃性；笔墨是否对皮肤有害；笔杆折断，材质是否容易刮伤手；误食笔芯是否会引起中毒（有小孩或者有人喜欢咬笔头）兼容性测试笔壳和笔芯是否能够很好的适应主流签字笔尺寸；这个笔芯的笔尖如果损坏，换上其他的笔芯的笔尖是否能用；这个笔芯的笔墨如果用完，换上其他笔芯的笔墨是否可以使用；笔的笔墨如果在其他笔的笔墨上写字是否可以成功覆盖其他测试比较测试与其他品牌签字笔比较，优劣在哪些地方？场景测试笔从高处摔到地上，笔尖是否会摔坏；倒着写，是否可以写出很多字来；扔到水里，笔墨会不会一直晕开；笔在粗糙的纸上是否能写出字…9.游戏测试与软件测试的区别游戏测试作为软件测试的一部分，它具备了软件测试所有的一切共同的特性：测试的目的是发现软件中存在的缺陷。测试都是需要测试人员按照产品行为描述来实施。产品行为描述可以是书面的规格说明书，需求文档，产品文件，或是用户手册，源代码，或是工作的可执行程序。每一种测试都需要产品运行于真实的或是模拟环境之下。每一种测试都要求以系统方法展示产品功能，以证明测试结果是否有效，以及发现其中出错的原因，从而让程序人员进行改进。游戏世界测试，主要有以下几个特性：游戏情节的测试，主要指游戏世界中的任务系统的组成，有人也称为游戏世界的事件驱动，我喜欢称为游戏情感世界的测试。游戏世界的平衡测试，主要表现在经济平衡，能力平衡（包含技能，属性等等），保证游戏世界竞争公平。游戏文化的测试，比如整个游戏世界的风格，是中国文化主导，还是日韩风格等等，大到游戏整体，小到NPC（游戏世界人物）对话，比如一个书生，他的对话就必需斯文，不可以用江湖语言J。10.想象一个登录框，包括ID、密码、登录、取消，记住密码（复选框），尽可能的写出你想到的测试点？ID测试要点：字符类型（包括：数字、字母、汉字、特殊字符）、字符长度默认值空值、字符集存在空格、复制、粘贴密码测试要点：密码长度（例如：密码不能少于7个字符，最长不能超过20个字符）密码复杂度、强度（例如：密码必须包含特殊字符、数字字母大小写等等，长度是否长）密码字符类型（例如：只允许输入数字、字母、特殊字符、下划线）、默认值密码为空字符集、存在空格复制、粘贴登录测试要点用户名和密码都符合要求（格式上的要求）用户名和密码都不符合要求（格式上的要求）用户名符合要求，密码不符合要求（格式上的要求）密码符合要求，用户名不符合要求（格式上的要求）用户名或密码为空数据库中不存在的用户名，不存在的密码数据库中存在的用户名，错误的密码数据库中不存在的用户名，存在的密码输入的数据前存在空格输入正确的用户名密码以后按[enter]是否能登陆取消鼠标左键点击“取消”按钮鼠标左键双击“取消”按钮鼠标右键点击“取消”按钮鼠标右键双击“取消”按钮鼠标指针移动到“取消”按钮”，按回车键鼠标指针停留在“取消”按钮上记住密码（复选框）点击选中“记住密码”按钮，重新登录不选中“记住密码”按钮，重新输入密码登录输入已存在ID和错误密码，勾选“记住密码”，点击登录输入错误ID和正确密码，勾选“记住密码”，点击登录输入正确ID和正确密码，勾选“记住密码”，点击登录输入错误ID和错误密码，勾选“记住密码”，点击登录。账号或密码登陆正确或错误时，进入后续页面或弹出反馈内容是否正确？各类浏览器的各个版本登陆测试兼容性，不同的浏览器有可能会错位显示。电脑和移动设备登陆测试。输入一段如'or'='or'之类代码作为账号或密码看是否能登陆登录后，测试不操作后需多长时间会自动注销；退出后，刷新页面检查是否真的退出。11.针对添加购物车这个测试点说一下你要怎么测试“添加购物车”（增删改查的角度）能否加入购物车，同一件商品能否再次添加到购物车。购物车商品件数的上限限制（淘宝限制100件）购物车是否可以正常移除商品，移除商品后，能否再添加回来。添加的每种商品是否可以正常增减数量，数量大于0退出购物车，再去查询购物车，商品正常。购物车的商品可以全选，取消全选，可以复选，选中的商品和数量可以正常下单。商品添加到购物车以后，已下架。购物车会提示此宝贝已失效。商品添加到购物车以后，降价了，购物车会有降价提示。商品添加到购物车以后，库存不足了。12.网上银行转账是怎么测的，设计一下测试用例回答思路：宏观上可以从质量模型（万能公式）来考虑，重点需要测试转账的功能、性能与安全性。设计测试用例可以使用场景法为主，先列出转账的基本流和备选流。然后设计场景，最后根据场景设计数据。实际面试中需要举出具体的例子。先检查界面。再测试功能：验证同行转账，跨行转账。验证转账限额。验证非法账户（挂失，冻结，锁定的账户）的转账。再测试性能方面的。"}, "md/summary/Linux基础.html": {"url": "md/summary/Linux基础.html", "title": "Linux 基础", "keywords": "", "body": "Linux基础1.说出10个以上的Linux命令创建文件：touch删除文件：rm查看文件：cat复制：cp创建文件夹：mkdir剪切或者重命名：mv压缩解压缩：tar查看：ls编辑：vi查看当前路径：pwd切换用户：su创建用户：useradd删除用户：userdel创建用户组：groupadd删除用户组：groupdel查找：find修改权限：chmod查看进程：ps杀进程：kill查看日志：tail杀进程：kill-9进程号查看日志：tail-fcatalina.out-n3002.在RedHat中，从root用户切到userl用户，一般用什么命令？susuuser1切换到user1，但切换后的当前目录还是root访问的目录su–user1切换到user1，并且当前目录切换到user1的根目录下（/home/user1/）3.Linux中，一般怎么隐藏文件？文件名以一个.开头4.在Linux系统中，一个文件的访问权限是755，其含义是什么？755表示该文件所有者对该文件具有读、写、执行权限，该文件所有者所在组用户及其他用户对该文件具有读和执行权限。5.查看占用CPU使用率最高的进程？ps-aux|sort-k3nr|head-K6.如何查看一个文件的末尾50行？查看/etc/profile的前10行内容，应该是：#head-n10/etc/profile查看/etc/profile的最后50行内容，应该是：#tail-n50/etc/profile7.如何过滤文件内容中包含”ERROR“的行？grep&quot;ERROR&quot;file_namecatfile_name|grep&quot;ERROR&quot;8.查看某端口号？netstat-anp|grep80ss-plsport=:809.查看某进程号？ps-A|grepps_nameps-A|grepps_number10.查看IP地址？ifconfigipaddr11.创建和删除一个多级目录？mkdir-p./a/brm-rf./a12.在当前用户家目录中查找haha.txt文件？find~/-namehaha.txt13.如何查询出tomcat的进程并杀掉这个进程，写出linux命令？ps-A|greptomcatkill-9tomcat_port14.动态查看日志文件？tail-flog_file15.查看系统硬盘空间的命令？df-aTh16.查看当前机器listen的所有端口？netstat-tlnp17.把一个文件夹打包压缩成.tar.gz的命令，以及解压拆包.tar.gz的命令？tarzcvfxxx.tar.gzfiletarzxvfxxx.tar.gz18.在linux中find和grep的区别？Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。linux下的find：在目录结构中搜索文件，并执行指定的操作。此命令提供了相当多的查找条件，功能很强大。简单点说说，grep是查找匹配条件的行，find是搜索匹配条件的文件。19.linux查看文件用什么命令，查看进程用什么命令查看文件内容的命令有morelessheadtailcat查看进程：ps-A|grep进程号20.查看日志常用什么命令，主要查看什么内容查看日志常用tail命令。主要查看程序运行的记录，比如支付失败，后台就有报错信息打印到.log日志文件中，就可以通过分析日志信息来初步定为问题。（补充：同时也去查询数据库，分析订单数据，查看支付状态等等）PS:日志就是.log的文本文件，和.txt一样属于文本文件。vi或者vim编辑器属于记事本软件，一般不会用来查看日志。"}, "md/summary/SQL基础.html": {"url": "md/summary/SQL基础.html", "title": "SQL 基础", "keywords": "", "body": "基础知识1.什么是数据库？数据库(Database)是按照数据结构来组织、存储和管理数据的仓库2.什么是关系型数据库，主键，外键，索引分别是什么？关系型数据库是由多张能互相联接的二维行列表格组成的数据库主关键字(primarykey)是表中的一个或多个字段，它的值用于唯一地标识表中的某一条记录外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为主表，具有此外键的表被称为主表的从表。外键又称作外关键字在关系数据库中，索引是一种单独的、物理的对数据库表中一列或多列的值进行排序的一种存储结构，它是某个表中一列或若干列值的集合和相应的指向表中物理标识这些值的数据页的逻辑指针清单3.写出表的增删改查SQL语法表的创建：createtable表名(列名1类型约束，列2类型约束…)表的删除：droptable表名表的更改（结构的更改，不是记录的更新）：altertable表名add|drop列名|约束名插入记录：insertinto表名…values…更新记录：update表名set列名=值where条件删除记录：deletefrom表名where条件4.SQL的表连接方式有哪些？SQL中连接按结果集分为：内连接，外连接，交叉连接内连接：innerjoinon，两表都满足的组合。内连接分为等值连接，不等连接，自然连接。等值连接：两表中相同的列都会出现在结果集中。自然连接：两表中具体相同列表的列会合并为同一列出现在结果集中。外连接：分为左（外）连接，右（外）连接，全连接左（外）连接：Aleft(outer)joinB,以A表为基础，A表的全部数据，B表有的组合，没有的为null。右（外）连接：Aright(outer)joinB,以B表为基础，B表的全部数据，A表有的组合，没有的为null。全连接：Afull(outer)join两表相同的组合在一起，A表有，B表没有的数据（显示为null），同样B表有，A表没有的显示为null。交叉连接：crossjoin,就是笛卡尔乘积。5.表的连接查询方式有哪些，有什么区别？交叉连接即笛卡儿乘积，是指两个关系中所有元组的任意组合使用内连接时，如果两个表的相关字段满足连接条件，就从这两个表中提取数据并组合成新的记录自连接是一种特殊的内连接，它是指相互连接的表在物理上为同一张表，但可以在逻辑上分为两张表外连接是只限制一张表中的数据必须满足连接条件，而另一张表中的数据可以不满足连接条件的连接方式6.什么三范式？1NF:表中的字段都是单一属性，不再可分。2NF：在1NF的基础上，表中所有的非主属性都必须完全依赖于任意一组候选键，不能仅依赖于候选键中的某个属性。3NF：在2NF的基础上，表中所有的属性都不依赖其他非主属性。简单的说就是：1NF表示每个属性不可分割，2NF表示非主属性不存在对主键的部分依赖，3NF表示不存在非主属性对主键的依赖传递。7.SQL的select语句完整的执行顺序？from子句组装来自不同数据源的数据；where子句基于指定的条件对记录行进行筛选；groupby子句将数据划分为多个分组；使用聚集函数进行计算；使用having子句筛选分组；计算所有的表达式；select的字段；使用orderby对结果集进行排序。8.说一下Mysql数据库存储的原理？储存过程是一个可编程的函数，它在数据库中创建并保存。它可以有SQL语句和一些特殊的控制结构组成。当希望在不同的应用程序或平台上执行相同的函数，或者封装特定功能时，存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟。它允许控制数据的访问方式。存储过程通常有以下优点：存储过程能实现较快的执行速度存储过程允许标准组件是编程。存储过程可以用流程控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。存储过程可被作为一种安全机制来充分利用。存储过程能够减少网络流量9.事务的特性？原子性(Atomicity)：事务中的全部操作在数据库中是不可分割的，要么全部完成，要么均不执行。一致性(Consistency)：几个并行执行的事务，其执行结果必须与按某一顺序串行执行的结果相一致。隔离性(Isolation)：事务的执行不受其他事务的干扰，事务执行的中间结果对其他事务必须是透明的。持久性(Durability)：对于任意已提交事务，系统必须保证该事务对数据库的改变不被丢失，即使数据库出现故障10.简述什么是存储过程和触发器？存储过程：是数据库中的一个对象，Transact-SQL语句的预编译集合，这些语句在一个名称下存储并作为一个单元进行处理。（可以理解为C语言中的函数，有参数、返回值等函数特性）触发器是一种特殊类型的存储过程，当使用下面的一种或多种数据修改操作在指定表中对数据进行修改时，触发器会生效：UPDATE、INSERT或DELETE。11.什么是数据库索引？数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用B_TREE。B_TREE索引加速了数据访问，因为存储引擎不会再去扫描整张表得到需要的数据；相反，它从根节点开始，根节点保存了子节点的指针，存储引擎会根据指针快速寻找数据。12.数据库怎么优化查询效率？储存引擎选择：如果数据表需要事务处理，应该考虑使用InnoDB，因为它完全符合ACID特性。如果不需要事务处理，使用默认存储引擎MyISAM是比较明智的分表分库，主从。对查询进行优化，要尽量避免全表扫描，首先应考虑在where及orderby涉及的列上建立索引应尽量避免在where子句中对字段进行null值判断，否则将导致引擎放弃使用索引而进行全表扫描应尽量避免在where子句中使用！=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描应尽量避免在where子句中使用or来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描Update语句，如果只更改1、2个字段，不要Update全部字段，否则频繁调用会引起明显的性能消耗，同时带来大量日志对于多张大数据量（这里几百条就算大了）的表JOIN，要先分页再JOIN，否则逻辑读会很高，性能很差。13.你用的Mysql是哪个引擎，各引擎之间有什么区别？主要MyISAM与InnoDB两个引擎，其主要区别如下：InnoDB支持事务，MyISAM不支持，这一点是非常之重要。事务是一种高级的处理方式，如在一些列增删改中只要哪个出错还可以回滚还原，而MyISAM就不可以了；MyISAM适合查询以及插入为主的应用，InnoDB适合频繁修改以及涉及到安全性较高的应用；InnoDB支持外键，MyISAM不支持；MyISAM是默认引擎，InnoDB需要指定；InnoDB不支持FULLTEXT类型的索引；InnoDB中不保存表的行数，如selectcount()fromtable时，InnoDB；需要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count()语句包含where条件时MyISAM也需要扫描整个表；对于自增长的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中可以和其他字段一起建立联合索引；清空整个表时，InnoDB是一行一行的删除，效率非常慢。MyISAM则会重建表；InnoDB支持行锁（某些情况下还是锁整表，如updatetableseta=1whereuserlike'%lee%'14.如何对查询命令进行优化？应尽量避免全表扫描，首先应考虑在where及orderby涉及的列上建立索。应尽量避免在where子句中对字段进行null值判断，避免使用！=或&lt;&gt;操作符，避免使用or连接条件，或在where子句中使用参数、对字段进行表达式或函数操作，否则会导致权标扫描不要在where子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用。很多时候可考虑用exists代替in。f.尽量使用数字型字段。尽可能的使用varchar/nvarchar代替char/nchar。任何地方都不要使用selectfromt，用具体的字段列表代替“”，不要返回用不到的任何字段。尽量使用表变量来代替临时表。避免频繁创建和删除临时表，以减少系统表资源的消耗。尽量避免使用游标，因为游标的效率较差。在所有的存储过程和触发器的开始处设置SETNOCOUNTON，在结束时设置SETNOCOUNTOFF。m.尽量避免大事务操作，提高系统并发能力。尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。15.数据库的优化？优化索引、SQL语句、分析慢查询；设计表的时候严格根据数据库的设计范式来设计数据库；使用缓存，把经常访问到的数据而且不需要经常变化的数据放在缓存中，能节约磁盘IO优化硬件；采用SSD，使用磁盘队列技术(RAID0,RAID1,RDID5)等采用MySQL内部自带的表分区技术，把数据分层不同的文件，能够提高磁盘的读取效率；垂直分表；把一些不经常读的数据放在一张表里，节约磁盘I/O；主从分离读写；采用主从复制把数据库的读操作和写入操作分离开来；分库分表分机器（数据量特别大），主要的原理就是数据路由；选择合适的表引擎，参数上的优化进行架构级别的缓存，静态化和分布式；不采用全文索引；采用更快的存储方式，例如NoSQL存储经常访问的数据。16.Sql注入是如何产生的，如何防止？程序开发过程中不注意规范书写sql语句和对特殊字符进行过滤，导致客户端可以通过全局变量POST和GET提交一些sql语句正常执行。产生Sql注入。下面是防止办法：过滤掉一些常见的数据库操作关键字，或者通过系统函数来进行过滤。在PHP配置文件中将Register_globals=off;设置为关闭状态SQL语句书写的时候尽量不要省略小引号(tab键上面那个）和单引号提高数据库命名技巧，对于一些重要的字段根据程序的特点命名，取不易被猜到的对于常用的方法加以封装，避免直接暴漏SQL语句开启PHP安全模式：Safe_mode=on;打开magic_quotes_gpc来防止SQL注入控制错误信息：关闭错误提示信息，将错误信息写到系统日志。使用mysqli或pdo预处理。17.NoSQL和关系数据库的区别？SQL数据存在特定结构的表中；而NoSQL则更加灵活和可扩展，存储方式可以省是JSON文档、哈希表或者其他方式。在SQL中，必须定义好表和字段结构后才能添加数据，例如定义表的主键(primarykey)，索引(index),触发器(trigger),存储过程(storedprocedure)等。表结构可以在被定义之后更新，但是如果有比较大的结构变更的话就会变得比较复杂。在NoSQL中，数据可以在任何时候任何地方添加，不需要先定义表。SQL中如果需要增加外部关联数据的话，规范化做法是在原表中增加一个外键，关联外部数据表。而在NoSQL中除了这种规范化的外部数据表做法以外，我们还能用如下的非规范化方式把外部数据直接放到原数据集中，以提高查询效率。缺点也比较明显，更新审核人数据的时候将会比较麻烦。SQL中可以使用JOIN表链接方式将多个关系数据表中的数据用一条简单的查询语句查询出来。NoSQL暂未提供类似JOIN的查询方式对多个数据集中的数据做查询。所以大部分NoSQL使用非规范化的数据存储方式存储数据。SQL中不允许删除已经被使用的外部数据，而NoSQL中则没有这种强耦合的概念，可以随时删除任何数据。SQL中如果多张表数据需要同批次被更新，即如果其中一张表更新失败的话其他表也不能更新成功。这种场景可以通过事务来控制，可以在所有命令完成后再统一提交事务。而NoSQL中没有事务这个概念，每一个数据集的操作都是原子级的。在相同水平的系统设计的前提下，因为NoSQL中省略了JOIN查询的消耗，故理论上性能上是优于SQL的。18.MySQL与MongoDB本质之间最基本的差别是什么差别在多方面，例如：数据的表示、查询、关系、事务、模式的设计和定义、速度和性能。MongoDB是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。在高负载的情况下，添加更多的节点，可以保证服务器性能。MongoDB旨在为WEB应用提供可扩展的高性能数据存储解决方案。MongoDB将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB文档类似于JSON对象。字段值可以包含其他文档，数组及文档数组。MongoDB是一个面向文档的数据库，目前由10gen开发并维护，它的功能丰富齐全，所以完全可以替代MySQL。与MySQL等关系型数据库相比，MongoDB的优点如下：弱一致性，更能保证用户的访问速度。文档结构的存储方式，能够更便捷的获取数据。内置GridFS，支持大容量的存储。内置Sharding。第三方支持丰富。（这是与其他的NoSQL相比，MongoDB也具有的优势）性能优越：MongoDB本身它还算比较年轻的一个产品，所以它的问题，就是成熟度肯定没有传统MySQL那么成熟稳定。所以在使用的时候：尽量使用稳定版，不要在线上使用开发版，这是一个大原则；另外一点，备份很重要，MongoDB如果出现一些异常情况，备份一定是要能跟上。除了通过传统的复制的方式来做备份，离线备份也还是要有，不管你是用什么方式，都要有一个完整的离线备份。往往最后出现了特殊情况，它能帮助到你；另外，MongoDB性能的一个关键点就是索引，索引是不是能有比较好的使用效率，索引是不是能够放在内存中，这样能够提升随机读写的性能。如果你的索引不能完全放在内存中，一旦出现随机读写比较高的时候，它就会频繁地进行磁盘交换，这个时候，MongoDB的性能就会急剧下降，会出现波动。另外，MongoDB还有一个最大的缺点，就是它占用的空间很大，因为它属于典型空间换时间原则的类型。那么它的磁盘空间比普通数据库会浪费一些，而且到目前为止它还没有实现在线压缩功能，在MongoDB中频繁的进行数据增删改时，如果记录变了，例如数据大小发生了变化，这时候容易产生一些数据碎片，出现碎片引发的结果，一个是索引会出现性能问题。另外一个就是在一定的时间后，所占空间会莫名其妙地增大，所以要定期把数据库做修复，定期重新做索引，这样会提升MongoDB的稳定性和效率。在最新的版本里，它已经在实现在线压缩，估计应该在2.0版左右，应该能够实现在线压缩，可以在后台执行现在repairDataBase的一些操作。如果那样，就解决了目前困扰我们的大问题。19.Mysql数据库中怎么实现分页？select*fromtablelimit(start-1)*limit,limit;其中start是页码，limit是每页显示的条数。20.Mysql数据库的操作？修改表-修改字段，重命名版：altertable表名change原名新名类型及约束；altertablestudentschangebirthdaybirthdatetimenotnull;修改表-修改字段，不重名版本：altertable表名modify列名类型和约束；altertablestudentsmodifybirthdatenotnull;全列插入：insertinto表名values(...)insertintostudentsvalues(0,&quot;郭靖&quot;,1,&quot;内蒙&quot;,&quot;2017-6&quot;);部分插入：值的顺序与给出的列顺序对应：insertintostudents(name,birthday)values(&quot;黄蓉&quot;,&quot;2017-8&quot;);修改：update表名set列1=值1，列2=值2.。whereupdatestudentssetgender=0,homwtown=&quot;古墓&quot;，whereid=5;备份：mysqldump-uroot-p数据库名&gt;python.sql;恢复：mysql-uroot-p数据库名&lt;python.sql;21.优化数据库？提高数据库的性能？对语句的优化用程序中，保证在实现功能的基础上，尽量减少对数据库的访问次数；通过搜索参数，尽量减少对表的访问行数，最小化结果集，从而减轻网络负担；能够分开的操作尽量分开处理，提高每次的响应速度；在数据窗口使用SQL时，尽量把使用的索引放在选择的首列；算法的结构尽量简单；在查询时，不要过多地使用通配符如SELECT*FROMT1语句，要用到几列就选择几列如：SELECTCOL1,COL2FROMT1；在可能的情况下尽量限制尽量结果集行数如：SELECTTOP300COL1,COL2,COL3FROMT1,因为某些情况下用户是不需要那么多的数据的。不要在应用中使用数据库游标，游标是非常有用的工具，但比使用常规的、面向集的SQL语句需要更大的开销；按照特定顺序提取数据的查找。避免使用不兼容的数据类型例如float和int、char和varchar、binary和varbinary是不兼容的。数据类型的不兼容可能使优化器无法执行一些本来可以进行的优化操作。例如：SELECTnameFROMemployeeWHEREsalary&gt;60000在这条语句中，如salary字段是money型的，则优化器很难对其进行优化，因为60000是个整型数。我们应当在编程时将整型转化成为钱币型，而不要等到运行时转化。若在查询时强制转换，查询速度会明显减慢。避免在WHERE子句中对字段进行函数或表达式操作。若进行函数或表达式操作，将导致引擎放弃使用索引而进行全表扫描。避免使用!=或&lt;&gt;、ISNULL或ISNOTNULL、IN，NOTIN等这样的操作符尽量使用数字型字段合理使用EXISTS,NOTEXISTS子句。尽量避免在索引过的字符数据中，使用非打头字母搜索。分利用连接条件消除对大型表行数据的顺序存取避免困难的正规表达式使用视图加速查询能够用BETWEEN的就不要用INDISTINCT的就不用GROUPBY部分利用索引能用UNIONALL就不要用UNION不要写一些不做任何事的查询尽量不要用SELECTINTO语句必要时强制查询优化器使用某个索引虽然UPDATE、DELETE语句的写法基本固定，但是还是对UPDATE语句给点建议：尽量不要修改主键字段。当修改VARCHAR型字段时，尽量使用相同长度内容的值代替。尽量最小化对于含有UPDATE触发器的表的UPDATE操作。避免UPDATE将要复制到其他数据库的列。避免UPDATE建有很多索引的列。避免UPDATE在WHERE子句条件中的列。22.什么是数据的完整性？数据完整性指的是存储在数据库中的数据的一致性和准确性。完整性分类：实体完整性：主键值必须唯一且非空。（主键约束）引用完整性（也叫参照完整性）：外键要么为空，要么引用主表中存在的记录。（外键约束）。用户自定义完整性：针对某一具体关系数据库中的约束条件。23.存储过程和函数的区别？相同点：存储过程和函数都是为了可重复的执行操作数据库的sql语句的集合。存储过程和函数都是一次编译，就会被缓存起来，下次使用就直接命中已经编译好的sql语句，不需要重复使用。减少网络交互，减少网络访问流量。不同点：标识符不同，函数的标识符是function，存储过程是proceduce。函数中有返回值，且必须有返回值，而过程没有返回值，但是可以通过设置参数类型(in,out)来实现多个参数或者返回值。存储函数使用select调用，存储过程需要使用call调用。select语句可以在存储过程中调用，但是除了select..into之外的select语句都不能在函数中使用。通过inout参数，过程相关函数更加灵活，可以返回多个结果。24.怎么进行SQL的查询优化？从表连接的角度优化：尽量使用内连接，因为内连接是两表都满足的行的组合，而外连接是以其中一个表的全部为基准。尽量使用存储过程代替临时写SQL语句：因为存储过程是预先编译好的SQL语句的集合，这样可以减少编译时间。从索引的角度优化：对那些常用的查询字段简历索引，这样查询时值进行索引扫描，不读取数据块。还有一些常用的select优化技巧：只查询那些需要访问的字段，来代替select*将过滤记录越多的where语句向前移：在一个SQL语句中，如果一个where条件过滤的数据库记录越多，定位越准确，则该where条件越应该前移。25.索引的作用，聚集索引与非聚集索引的区别索引是一个数据库对象，使用索引，可以是数据库程序无须对整个数据进行扫描，就可以在其中找到目标数据，从而提高查找效率。索引的底层采用的是B树。聚集索引：根据记录的key再表中排序数据行。非聚集索引：独立于记录的结构，非聚集所以包含的key，且每个键值项都有指向该简直的数据行的指针。聚集索引与非聚集索引的区别：聚集索引的物理存储按索引排序，非聚集所以的物理存储不按索引排序。聚集索引插入，更新数据的速度比非聚集索引慢，单查询速度更快。聚集索引的叶级结点保存的是时间的数据项，而非聚集结点的叶级结点保存的是指向数据项的指针。一个表只能有一个聚集索引（因为只有一种排序方式），但可以有多个非聚集索引。"}, "md/summary/web测试.html": {"url": "md/summary/web测试.html", "title": "web 测试", "keywords": "", "body": "web测试1.描述用浏览器访问www.baidu.com的过程先要解析出baidu.com对应的ip地址：要先使用arp获取默认网关的mac地址组织数据发送给默认网关（ip还是dns服务器的ip，但是mac地址是默认网关的mac地址）默认网关拥有转发数据的能力，把数据转发给路由器路由器根据自己的路由协议，来选择一个合适的较快的路径转发数据给目的网关目的网关（dns服务器所在的网关），把数据转发给dns服务dns服务器查询解析出baidu.com对应的ip地址，并原路返回请求这个域名的client得到了baidu.com对应的ip地址之后，会发送tcp的3次握手，进行连接使用http协议发送请求数据给web服务器web服务器收到数据请求之后，通过查询自己的服务器得到相应的结果，原路返回给浏览器浏览器接收到数据之后通过浏览器自己的渲染功能来显示这个网页浏览器关闭tcp连接，即4次挥手结束，完成整个访问过程2.常用浏览器有哪些？IE，Chrome，Safari，Firefox，Opera3.如何测试购买下单和退货流程产品经理设计了单品优惠，组合优惠，订单优惠，优惠券优惠（优惠券优惠包含通用券，定向券，满减券，折扣券）和礼品卡，其中礼品卡上需要单独购买的。请问如何测试购买下单和退货流程，需要注意什么？（包含数据存储）4.什么是sql注入，什么是跨站脚本，什么是跨站请求伪造？SQL注入攻击是注入攻击最常见的形式（此外还有OS注入攻击（Struts2的高危漏洞就是通过OGNL实施OS注入攻击导致的）），当服务器使用请求参数构造SQL语句时，恶意的SQL被嵌入到SQL中交给数据库执行。SQL注入攻击需要攻击者对数据库结构有所了解才能进行，攻击者想要获得表结构有多种方式：如果使用开源系统搭建网站，数据库结构也是公开的（目前有很多现成的系统可以直接搭建论坛，电商网站，虽然方便快捷但是风险是必须要认真评估的）；错误回显（如果将服务器的错误信息直接显示在页面上，攻击者可以通过非法参数引发页面错误从而通过错误信息了解数据库结构，Web应用应当设置友好的错误页，一方面符合最小惊讶原则，一方面屏蔽掉可能给系统带来危险的错误回显信息）；盲注。防范SQL注入攻击也可以采用消毒的方式，通过正则表达式对请求参数进行验证，此外，参数绑定也是很好的手段，这样恶意的SQL会被当做SQL的参数而不是命令被执行，JDBC中的PreparedStatement就是支持参数绑定的语句对象，从性能和安全性上都明显优于Statement。XSS（CrossSiteScript，跨站脚本攻击）是向网页中注入恶意脚本在用户浏览网页时在用户浏览器中执行恶意脚本的攻击方式。跨站脚本攻击分有两种形式：反射型攻击（诱使用户点击一个嵌入恶意脚本的链接以达到攻击的目标，目前有很多攻击者利用论坛、微博发布含有恶意脚本的URL就属于这种方式）持久型攻击（将恶意脚本提交到被攻击网站的数据库中，用户浏览网页时，恶意脚本从数据库中被加载到页面执行，QQ邮箱的早期版本就曾经被利用作为持久型跨站脚本攻击的平台）。CSRF攻击（CrossSiteRequestForgery，跨站请求伪造）是攻击者通过跨站请求，以合法的用户身份进行非法操作（如转账或发帖等）。CSRF的原理是利用浏览器的Cookie或服务器的Session，盗取用户身份，其原理如下图所示。防范CSRF的主要手段是识别请求者的身份，主要有以下几种方式：在表单中添加令牌（token）；验证码；检查请求头中的Referer（前面提到防图片盗链接也是用的这种方式）。令牌和验证都具有一次消费性的特征，因此在原理上一致的，但是验证码是一种糟糕的用户体验，不是必要的情况下不要轻易使用验证码，目前很多网站的做法是如果在短时间内多次提交一个表单未获得成功后才要求提供验证码，这样会获得较好的用户体验。5.给你一个网站怎么开展测试？首先，查找需求说明、网站设计等相关文档，分析测试需求。制定测试计划，确定测试范围和测试策略，一般包括以下几个部分：功能性测试，界面测试，性能测试，数据库测试，安全性测试，.兼容性测试设计测试用例：功能性测试可以包括，但不限于以下几个方面：链接测试；链接是否正确跳转，是否存在空页面和无效页面，是否有不正确的出错信息返回等；提交功能的测试；多媒体元素是否可以正确加载和显示；多语言支持是否能够正确显示选择的语言等界面测试可以包括但不限于以下几个方面：页面是否风格统一，美观。页面布局是否合理，重点内容和热点内容是否突出。控件是否正常使用。对于必须但为安装的空间，是否提供自动下载并安装的功能。文字检查。性能测试一般从以下两个方面考虑：压力测试，负载测试，强度测试数据库测试要具体决定是否需要开展。数据库一般需要考虑连结性，对数据的存取操作，数据内容的验证等方面。安全性测试：基本的登录功能的检查；是否存在溢出错误，导致系统崩溃或者权限泄露；相关开发语言的常见安全性问题检查，例如SQL注入等；如果需要高级的安全性测试，确定获得专业安全公司的帮助，外包测试，或者获取支持。兼容性测试，根据需求说明的内容，确定支持的平台组合：浏览器的兼容性；操作系统的兼容性；软件平台的兼容性；数据库的兼容性。开展测试，并记录缺陷。合理的安排调整测试进度，提前获取测试所需的资源，建立管理体系（例如，需求变更、风险、配置、测试文档、缺陷报告、人力资源等内容）。定期评审，对测试进行评估和总结，调整测试的内容。6.电商支付模块的测试如何展开？支付流程里面就涉及到了第三方支付接口：下单接口商户提交下单请求到第三方支付接口，第三方支付收单成功后返回下单成功结果给到商户系统。（下单接口的最终处理结果分为下单成功和下单失败，若未收到明确结果可调用单笔订单查询接口查询结果。）支付接口调用该接口时指定支付参数，完成买家账户向商户账户的支付，采用页面跳转交互模式和后台通知交互模式。（结果分为两路返回：一路为前台在return_url页面跳转显示支付结果；一路为后台在notify_url收到支付结果通知后进行响应。）退款接口调用第三方支付的支付请求接口返回付款成功后，在需要做退款处理时调用退款请求接口发起退款处理。（退款接口的最终处理结果分为退款成功和退款失败，若未收到明确结果可调用退款查询接口查询结果。）单笔订单查询接口根据订单号查询单笔订单信息和状态。退款订单查询接口：调用第三方支付的退款接口返回后，在需要查询退款请求状态可调用退款订单查询接口查询退款订单的状态和订单信息。测试过程中需要注意的主要测试点及异常场景：首先要保证接口都能正常调用；生成一笔订单，支付完成后，同步或异步重复回调，只有一次有效；生成一笔订单，复制订单号和金额，再次生成一笔订单，用fiddler设置断点，用第一笔已完成的订单号和订单金额去替换现有的订单号和金额，无法完成支付；生成一笔订单，跳转到第三方时修改金额，无法到账，或者如果是游戏充值游戏币的话，到账为篡改后的金额对应的游戏币；异步通知屏蔽，同步有效，进行支付，同步能够正常到账；同步设置无效，异步有效，进行支付，异步能够正常到账；同步异步都设置无效，在第三方支付完成后，在重发机制时间范围内，设置异步有效，到下次通知时间点时，能够正常通知到账（补单机制的验证，如果商户收到第三方支付成功的通知后，要告知第三方支付收到了成功的通知，如果第三方支付收到商户应答不是ok或超时，第三方支付就会认为通知失败，会在规定的时间内持续调用notify_url，一般有时间或次数的限制）；针对支付订单在数据库中存储是否完整和正确进行校验（比如：第三方订单号--方便与第三方对账和问题排查、订单金额、订单状态等）；如果是用户购买实物商品，用户发起退货，要保证退货流程正常，资金能正常返还，要考虑下并发情况的验证以确保安全性；如果是用户购买虚拟商品，比如话费、油卡之类的商品，只有在发货失败的时候才能发起退货，注意验证；7.如何开展兼容性测试？Web兼容性测试首先开展人工测试，测试工程师测试主流浏览器和常用操作系统测试主流程和主界面，看看主流程和主界面是否有问题，如果存在问题，那么记录下bug情况，以及浏览器型号和版本，以及操作系统，准确定位bug产生的原因，提交bug，告知开发人员修改。所有的主流设备都需要进行测试，只关注主流程和主界面，毕竟每个系统主流程和主界面不是很多，所以这个工作量还是可以承受的。其次借助第三方测试工具，目前我觉得比较好用的第三方Web测试工具有IEtester（离线）、SuperPreview（离线）和Browsershots：browsershots.org（在线），一款可以测试IE的兼容，一款可以测试主流浏览器的兼容，包括谷歌、火狐、Opera等等。借助第三方测试工具，找到bug产生的位置，分析测试结果，告知程序员调整。APP兼容性测试APP的兼容性测试和Web测试类似，首先开展人工测试，测试工程师借助测试设备对主流程和主功能，主界面进行测试；收集所有的能收集到的不同型号的测试设备测试主流程和主界面，看看主流程和主界面是否有问题，如果存在问题，综合考虑设备的使用率等因素，看看是否需要调整，如果需要，那么记录下bug情况以及测试设备的型号和操作系统，准确定位bug产生的原因，提交bug，告知开发人员修改。其次借助第三方测试工具，对于APP的兼容性测试，推荐的是百度众测平台和云测平台，我经常使用的是云测平台，这两款测试工具里面包含了安卓和iOS的测试；测试很齐全，包括功能测试、深度兼容测试、性能测试、网络环境测试，还可以模拟海量用户测试，还可以导入自己编写的测试用例进行功能测试，里面还包括测试专家的测试，当然了找专家是要花钱滴。基本进行兼容性测试是不需要花钱的；测试工程师把打包好的apk或者IPA文件，上传到测试平台，选择需要测试的设备型号，开始任务即可；等待一段时间，在等待的时间你是不需要盯着的，你可以做其他的工作。测试完成后会生成一份测试报告，可以查看错误页面和错误日志，如果需要调整，那么提交bug，告知程序员修改即可。8.nginx,tomcat,apache都是什么？Nginx(enginex)是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器。ApacheHTTPServer是一个模块化的服务器，源于NCSAhttpd服务器Tomcat服务器是一个免费的开放源代码的Web应用服务器，属于轻量级应用服务器，是开发和调试JSP程序的首选。9.apache和nginx的区别？Nginx相对Apache的优点：轻量级，同样起web服务，比apache占用更少的内存及资源；抗并发，nginx处理请求是异步非阻塞的，支持更多的并发连接，而apache则是阻塞型的，在高并发下nginx能保持低资源低消耗高性能；配置简洁；高度模块化的设计，编写模块相对简单；社区活跃。Apache相对Nginx的优点rewrite，比nginx的rewrite强大；模块超多，基本想到的都可以找到；少bug，nginx的bug相对较多；超稳定。10.Selenium有哪些定位元素方法id定位name定位class_nametag_namelink_textpartial_link_textXpathcss当定位一个元素是，如果存在ID属性值时，我们可以优先考虑ID定位，当没有ID，有name属性值和class属性值时也可以采用name和class_name定位。当次能确定该元素的标签为页面唯一时，可以采用tag_name定位，一般来说采用link_text定位的方法比较少。如果ID，name，class_name单个定位不了，可以采用css和xpath定位。"}, "md/summary/API测试.html": {"url": "md/summary/API测试.html", "title": "API 测试", "keywords": "", "body": "API测试1.什么是接口接口是指外部系统与系统之间以及内部各子系统之间的交互点。包括外部接口、内部接口，内部接口又包括：上层服务与下层服务接口、同级接口。2.如果模块请求http改为了https，测试方案应该如何制定，修改？分别用http还有https登录试试。如果用https可以正常登录，地址栏显示一把锁头，那么这个网站是有部署SSL的。如果http和https都能够正常登录，进一步说明该网站没有设置强制https登录，或者说没有设置http链接自动跳转https链接；相反如果用http登录，结果跳转到https页面，说明网站部署了SSL，而且设置了http自动跳转https。3.常用HTTP协议调试代理工具有什么？详细说明抓取HTTPS协议的设置过程？Fiddler是一个http协议调试代理工具打开Fiddler，进入Tools-Options-HTTPS，配置允许抓取HTTPS连接和解析HTTPS流量然后选择要解释的来源，设置是否忽略服务证书错误（这些操作做完之后，在浏览器方位IP:8888，安装证书就可以在浏览器抓取HTTPS协议了）进入Tools-Options-Connections，保证打开启抓取HTTPS连接，然后默认端口按需求是或否需要修改，然后点选允许远程计算机连接选项4.描述TCP/IP协议的层次结构物数网传应5.接口产生的垃圾数据如何清理造数据和数据清理，需要连数据库做增删改查的操作测试用例前置操作，setUp做数据准备后置操作，tearDown做数据清理6.依赖第三方的接口如何处理这个需要自己去搭建一个mock服务，模拟接口返回数据。如可以采用moco，moco是一个开源的框架，moco服务搭建需要自己能够熟练掌握，面试会问你具体如何搭建，如何模拟返回的数据，是用的什么格式，如何请求的7.测试的数据你放在哪？测试数据到底该怎么放，这个是面试官最喜欢问的一个题了，似乎仁者见仁智者见智，没有标准的答案，有的人说放excel，也有的说放.py脚本，也有的说放ini配置文件，还有放到json，yaml文件，txt文件，甚至有的放数据库，五花八门，一百个做自动化的小伙伴有100个放的地方。这里总结下测试的数据到底该怎么放？首先测试的数据是分很多种的，有登录的账户数据，也有注册的账户数据，还有接口的参数，还有邮箱配置的数据等等等等，所以这个题不能一概而论给答死了。要不然就是给自己挖坑。以下两个大忌不能回答：测试的数据是不能写死到代码里面的，这个是原则问题，也是写代码的大忌（你要是回答写在代码里面，估计就是回去等通知了）测试数据放到.py的开头，这种其实很方便，对于少量的，固定不变的数据其实是可以放的，但是面试时候，千万不能这样说，面试官喜欢装逼的方法测试数据存放总结：对于账号密码，这种管全局的参数，可以用命令行参数，单独抽出来，写的配置文件里（如ini、text）对于一些一次性消耗的数据，比如注册，每次注册不一样的数，可以用随机函数生成对于一个接口有多组测试的参数，可以参数化，数据放yaml,text,json,excel都可以对于可以反复使用的数据，比如订单的各种状态需要造数据的情况，可以放到数据库，每次数据初始化，用完后再清理对于邮箱配置的一些参数，可以用ini配置文件对于全部是独立的接口项目，可以用数据驱动方式，用excel/csv管理测试的接口数据对于少量的静态数据，比如一个接口的测试数据，也就2-3组，可以写到.py脚本的开头，十年八年都不会变更的总之不同的测试数据，可以用不同的文件管理8.什么是数据驱动，如何参数化？参数化和数据驱动的概念这个肯定要知道的，参数化的思想是代码用例写好了后，不需要改代码，只需维护测试数据就可以了，并且根据不同的测试数据生成多个用例python里面用unittest框架。9.下个接口请求参数依赖上个接口的返回数据这个很容易，不同的接口封装成不同的函数或方法，需要的数据return出来，用一个中间变量a去接受，后面的接口传a就可以了10.依赖于登录的接口如何处理登录接口依赖token的，可以先登录后，token存到一个yaml或者json，或者ini的配置文件里面，后面所有的请求去拿这个数据就可以全局使用了如果是cookies的参数，可以用session自动关联s=requests.session()后面请求用s.get()和s.post()就可以自动关联cookies了11.接口测试的步骤有哪些？发送接口请求测试接口获取返回值断言：判断实际结果是否符合预期12.接口测试中依赖登录状态的接口如何测试？依赖登最状态的接口，本质上是在每次发送请求时需要带上存储有账户有效信息的Session或Cookie才能发送成功，在构建POST请求时添加必要的Session或Cookie13.依赖于第三方数据的接口如何进行测试？可以利用一些MOCK工具（如：JSONServer、EasyMock）来模拟第三方的数据返回，最大限度的降低对第三方数据接口的依赖14.解释什么是SOAP？SOAP代表简单对象访问控制，它是一种基于XML的协议，用于在计算机之间交换信息。15.解释什么是RESTAPI？这是开发人员执行请求并接收响应的一组功能。在RESTAPI中，通过HTTP协议进行交互REST-代表状态转移，它正快速成为API创建的标准。16.API测试发现的Bug类型是什么？缺少或重复的功能无法正常处理错误条件可靠性安全未使用的标志未实现错误错误处理不一致性能多线程问题错误不正确17.我们测试的接口属于哪一类？服务器接口（基于HTTP协议的接口）,大多数人常说的接口测试，通常是B/S架构，由客户端（浏览器）调用，或模拟客户端（浏览器）调用服务器提供的请求接口，由服务器完成处理并返回一个应答的过程。例如：Webservice接口，http接口，jms接口，hessian接口。18.Cookie保存在哪里？如果设置了过期时间，Cookie保存在硬盘中。如果没有设置过期时间，Cookie保存在内存中。19.HTTP有哪些请求方法？HTTP共有如下7种请求方式，每种都可以发送Header和Body：GET、POST、PUT、DELETE、OPTIONS、HEAD、PATCH20.接口自动化测试的流程？基本的接口功能自动化测试流程为：需求分析--&gt;用例设计--&gt;脚本开发--&gt;测试执行--&gt;结果分析21.接口测试用例的编写要点有哪些？必填字段：请求参数必填项、可选项合法性：输入输出合法、非法参数边界：请求参数边界值等容错能力：大容量数据、频繁请求、重复请求（如：订单）、异常网络等的处理响应数据校验：断言、数据提取传递到下一级接口。..逻辑校验：如两个请求的接口有严格的先后顺序，需要测试调转顺序的情况性能：对接口模拟并发测试，逐步加压，分析瓶颈点安全性：构造恶意的字符请求，如：SQL注入、XSS、敏感信息、业务逻辑（如：跳过某些关键步骤；未经验证操纵敏感数据）测试每个参数类型不合法的情况（类型不合法容易遗漏NULL型）测试每个参数取值范围不合法的情况测试参数为空的情况测试参数前后台定义的一致性测试每个参数的上下限（这里容易出致命的BUG，如果程序处理不当，可能导致崩溃）如果两个请求有严格的先后顺序，需要测试调转顺序的情况22.提到UI级别测试和API测试之间的关键区别？UI（用户界面）是指测试图形界面，如用户如何与应用程序交互，测试应用程序元素，如字体，图像，布局等。UI测试基本上侧重于应用程序的外观和感觉。而API可以实现两个独立的软件系统之间的通信。实现API的软件系统包含可由另一软件系统执行的功能或子例程。23.HTTPS的工作原理我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤。客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。Web服务器利用自己的私钥解密出会话密钥。Web服务器利用会话密钥加密与客户端之间的通信。24.HTTPS有哪些优点？尽管HTTPS并非绝对安全，掌握根证书的机构、掌握加密算法的组织同样可以进行中间人形式的攻击，但HTTPS仍是现行架构下最安全的解决方案，主要有以下几个好处：使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。25.HTTPS的缺点虽然说HTTPS有很大的优势，但其相对来说，还是存在不足之处的：HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。26.HTTPS和HTTP的区别主要如下https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。27.POST和GET有什么区别？GET在浏览器回退时是无害的，而POST会再次提交请求。GET产生的URL地址可以被保存为书签，而POST不可以。GET请求会被浏览器主动cache，而POST不会，除非手动设置。GET请求只能进行url编码，而POST支持多种编码方式。GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。GET请求在URL中传送的参数是有长度限制的，而POST没有。GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。GET参数通过URL传递，POST放在请求Body中。GET产生一个TCP数据包，POST产生两个TCP数据包。GET请求的URL传参有长度限制，而POST请求没有长度限制GET请求的参数只能是ASCII码，所以中文需要URL编码，而POST请求传参没有这个限制；GET产生一个TCP数据包；POST产生两个TCP数据包28.Session与Cookie有什么区别？保存位置。SESSION数据保存在服务器端，Cookie数据保存在客户端浏览器保存方式。SESSION默认被存在在服务器的一个文件里，可以手动设置放在文件、数据库、或内存中；Cookie默认保存在客户端内存中，如果设置了过期时间就保存在硬盘中。依赖关系。SESSION依赖Cookie来识别session_id，如果浏览器禁用了Cookie，SESSION也会失效，此时可以通过url传递session_id。安全性。因为SESSION数据保存在服务端，所以SESSION安全性比Cookie高。尺寸大小。SESSION基本上没有大小限制，COOKIE保存的内容比较小，具体由浏览器决定。服务器性能。SESSION对服务器的压力会更大一些，而Cookie放在客户端，所以对服务器基本没影响29.TCP和UDP有什么区别TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达；UDP尽最大努力交付，即不保证可靠交付TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流；UDP是面向报文的UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）每一条TCP连接只能是点到点的；UDP支持一对一，一对多，多对一和多对多的交互通信TCP首部开销20字节；UDP的首部开销小，只有8个字节TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道30.什么是TCP/IP？TCP/IP，也就是互联网协议套件（英语：InternetProtocolSuite，缩写IPS）是一个网络通信模型，以及一整个网络传输协议家族，为网际网络的基础通信架构。因为该协议家族的两个核心协议：TCP（传输控制协议）和IP（网际协议）为该家族中最早通过的标准，所以它常被通称为TCP/IP协议族，简称TCP/IP。由于在网络通讯协议普遍采用分层的结构，当多个层次的协议共同工作时，类似计算机科学中的堆栈，因此又被称为TCP/IP协议栈。TCP/IP提供点对点的链接机制，将数据应该如何封装、定址、传输、路由以及在目的地如何接收，都加以标准化。它将软件通信过程抽象化为四个抽象层，采取协议堆栈的方式，分别实现出不同通信协议。协议族下的各种协议，依其功能不同，被分别归属到这四个层次结构之中，常被视为是简化的七层OSI模型。31.cookie有什么作用？cookie可以解决http的无状态的问题，与服务器进行交互，作为http规范存在。它具有极高的简便性、可扩展性和可用性，也可以通过加密和SSL技术来提高其安全性。因此推荐使用cookie作为标识而不是身份验证的工具。其中cookie的作用就是为了解决HTTP协议无状态的缺陷所作出的努力32.Cookie测试的测试点禁止使用Cookie设置浏览器禁止使用Cookie，访问网页后，检查存放Cookie文件中未生成相关文件；Cookie存储路径按照操作系统和浏览器对Cookie存放路径的设置，检查存放路径是否与设置一致；Cookie过期检查按照Cookie过期时间，检查存放文件该Cookie是否被自动删除检查浏览器中Cookie选项通过不同浏览器，设置是否接受Cookie文件，如同意接受Cookie，检查存放路径中是否存在Cookie文件浏览器删除Cookie通过浏览器的设置，删除Cookie文件Cookie加密提交敏感信息时，数据应加密Cookie保存信息验证Cookie能正常工作篡改Cookie修改Cookie内容，查看系统功能是否出现异常，或数据错乱Cookie的兼容性使用不同类型，或同一类型不同版本的浏览器，检查cookie文件的兼容性刷新操作对cookie的影响进行刷新操作后，是否重新生成cookie文件或是对cookie文件进行修改检查cookie内容存储是否完整正确若cookie进行了加密，先对cookie文件内容进行解密，然后检查是否按照设计要求存储了相关所有的cookie记录信息。对应硬盘存储空间没有空闲时，是否能进行cookie内容的有效存储多次做相同的操作或设置，检查是否更新或添加了新的cookie文件按照设计要求进行判断如果使用cookie来统计次数，则要检测是否统计正确例如通过用户登录次数进行统计，访问网站，每次都需要输入用户名和密码，分第一次登陆还是非第一次登录33.cookie的缺点大小和数目受限制。浏览器对一个域cookie的条目数有上限要求，且每个cookie的大小不得超过4kb。存在安全性问题，易被人拦截。需要指定域，不可以跨域浪费带宽，因为我每次请求一个新的页面，cookie都会被自动发送过去。有的移动端浏览器不支持cookie或浏览器禁用cookie有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。34.cookie与session的区别cookie数据存放在客户的浏览器上，session数据放在服务器上。cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗考虑到安全应当使用session。session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用cookie。单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。所以个人建议：将登陆信息等重要信息存放为session其他信息如果需要保留，可以放在cookie中"}, "md/summary/APP测试.html": {"url": "md/summary/APP测试.html", "title": "APP 测试", "keywords": "", "body": "APP测试1.什么是Android四大组件？Android的四大组件包括：Activity、Service、BroadcasReceiver、ContentProvider2.当点击APP图标启动程序，说明将要发生那些过程？点击桌面app图标，Launcher进程采用BinderIPC向system_server进程发起startActivity请求；system_server进程收到请求后，向zygote进程发送创建进程的请求（zygote进程是Android系统的第一个进程，zygote意为受精卵，所有进程都是由它孵化而来）zygote进程fork出新的子进程，即App进程；App进程，通过BinderIPC向system_server进程发起attachApplication请求system_server进程收到请求后，进行一系列的准备工作，通过BinderIPC向App进程发送scheduleLaunchActivity请求App的binder线程（ApplicationThread）在收到请求后，通过handler向主线程发送LAUNCH_ACTIVITY消息主线程收到Message后，通过发射机制创建目标Activity，并回调Activity.onCreate()方法3.APP测试的内容主要包括哪些，如何开展？功能测试：业务逻辑正确性测试：依据：产品文档-&gt;测试用例编写兼容性测试：系统版本：Android:官方版本，定制版本；IOS：官方提供版本分辨率：720x1280、1080x1920网络情况：2g3g4g5gWi-Fi异常测试热启动应用：应用在后台长时间待机；应用在后台待机过程中，手机重启网络切换和中断恢复：网络切换；中断恢复：电话信息中断恢复升级，安装卸载测试升级测试：临近版本升级(1.0-&gt;1.1);跨版本(1.0-&gt;....-&gt;2.2)安装测试：首次安装；覆盖安装（同版本，不同版本覆盖）;卸载后安装卸载测试：首次卸载；卸载安装后在卸载健壮性测试手机资源消耗：cpu，内存流量消耗：图片，数据，视频电量测试崩溃恢复4.Android的兼容性测试都考虑哪些内容？品牌机型兼容：根据市场占有率、发布时间等指标对主流、最新机型进行重点兼容ROM兼容：需兼容原生的ROM（2.1、2.2、2.3、4.0、4.1、4.2）；第三方ROM（小米、百度易、点心、魅族、阿里云……）屏幕兼容：需兼容HVGA、VGA、WVGA、FWVGA、720p、1080p屏幕分辨率，并考虑不同PPI的情况软件兼容：安全类软件（百度手机管家、360优化大师、360安全卫士、QQ手机管家、安卓优化大师、网秦、LBE），输入法软件（系统自带、Sogou、百度）版本兼容：服务器端需要兼容产品早期版本所需的API接口网络兼容：WiFi、3大运营商的2G,3G,4G网络，需区分WAP和NET接入5.针对App的安装功能，写出测试点？安装正常安装测试，检查是否安装成功。APP版本覆盖测试。例如：先安装一个1.0版本的APP,再安装一个高版本(1.1版本）的APP，检查是否被覆盖。回退版本测试。例如：先装一个2.0版本的APP,再安装一个1.0版本的APP,正常情况下版本是可以回退的。安装时内存不足，弹出提示。根据安装手册操作，是否正确安装。安装过程中的意外情况（强行断电、断网、来电话了、查看信息）等等，检查会发生的情况。通过‘同步软件’，检查安装时是否同步安装了一些文件。在不同型号、系统、屏幕大小、分辨率上的手机进行安装。安装时是否识别有SD卡，并默认安装到sd卡中。安装完成后，能否正常启动应用程序。安装完成后，重启手机能否正常启动应用程序。安装完成后，是否对其他应用程序造成影响。安装完成后，能否添加快捷方式。安装完成后，杀毒软件是否会对其当做病毒处理。多进程进行安装，是否安装成功。在安装过程中，所有的提示信息必须是英文或者中文，提示信息中不能出现代码、符号、乱码等。安装之后，是否自动启动程序。是否支持第三方安装。在安装中点击取消。卸载用自己的卸载程序进行卸载，检查是否卸载干净。用第三方工具，检查是否卸载干净。在卸载过程中，点击取消按钮，看是否正常退出卸载程序，检查软件是否还能继续正常使用。卸载过程中，出现意外（比如手机关机，没电，查看信息，接打电话），程序是否还能运行。在卸载过程中，突然重启设备，再次访问程序，是否还能运行。在没用使用程序时，删除目录文件，看程序是否能运行。在使用过程中，直接删除目录文件，程序是否还能运行。不同系统、硬件环境、网络环境下进行卸载。卸载成功后，是否对其他程序有影响。卸载后再次安装，是否正常使用。在卸载过程中，所有的提示信息必须是英文或者中文，提示信息中不能出现代码、符号、乱码等。更新当客户端有新版本时，提示更新。非强制更新，可以取消更新，旧版本正常使用，下次使用软件时，仍然会出现更新提示。强制更新，强制更新而用户没有更新时，退出客户端，下次启动，依然提示更新。不卸载更新，检查是否可以更新。不卸载更新，检查资源同名文件如图片等是否更新成最新版本。非wifi网络下，提示是否更新，取消就加入待下载，wifi下自动更新。6.常用的ADB命令？adb--help/adb:看见帮助信息adbstart-server:启动adb服务adbkill-server:关闭adb服务adbdevices:查看手机设备号adbpush电脑手机adbpull手机电脑adblogcat|grep(unix)包名adblogcat|findstr(win)包名adbshell:进入shell命令行，可以操作Linux命令adbshelldumpsyswindowwindows|grepmFocusedApp:获取包名启动名(win：adbshelldumpsyswindowwindows|findstrmFocusedApp)adbinstall路径/apk文件：安装apk到手机上adbuninstall包名：卸载app从手机上adbshellamstart-W包名/启动名：app启动时间7.在查看logcat命令日志时候怎么内容保存到本地文件？输出重定向：logcat&gt;&gt;log_file_name8.App崩溃（闪退），可能是什么原因导致的？缓存垃圾过多：由于安卓系统的特性，如果长时间不清理垃圾文件。会导致越来越卡。也会出现闪退情况。运行的程序过多，导致内存不足应用版本兼容问题：如果应用版本太低，会导致不兼容，造成闪退。此外，有些新版本在调试中，也会造成应用闪退。解决方法：如果是版本太旧，更新为新版本即可；如果是新版本闪退，可能是应用在改版调试，可卸载后安装旧版。检查APP中访问网络的地方，组件中的ImageView是否可以正常的下载并显示到app页面上。检查APP的sdk和手机的系统是否兼容。在一些特定情况下的闪退，比如播放视频，在Android5.0升级到Android6.0的时候，有些系统API老版本有，新版本没有，到时回去对象的时候失败，报空，系统就会出现闪退问题。9.如何测试监测app的内存使用、CPU消耗、流量使用情况？adbshelltopAndroid应用性能测试通常包括：启动时间、内存、CPU、耗电量、流量、流畅度等根据手机的使用应用频度和强度不同，可将应用使用强度分为如下几种状态：空闲状态：指启动应用后，不做任何操作或切换到后台运行的情况称为空闲状态，该情况为应用对内存的消耗是最小的。中强度状态：该情况用户使用应用的强度和时间长短不确定，相对来说使用时长偏长。高强度状态：该种情况为应用内高频率的使用，用户很少达到，跑monkey时可认为高强度状态，该种情况常用来测试应用内存泄漏的情况测试时，可根据用户的操作习惯模拟应用使用频率和强度等级。使用adb命令，手机连接电脑开启USB调试模式，进入adbshell。查看CPU占用率top-m10-scpu在测试过程中，QA需要关注对应包的cpu占用率，反复进行某个操作，cpu占用过高且一直无法释放，此时可能存在风险。如果你想筛选出你自己的应用的话可以用下面命令top-d3|greppackageName查看内存使用情况dumpsysmeminfo&lt;package_name&gt;dumpsysmeminfo&lt;package_id&gt;参数含义：NaitveHeapSize:从mallinfousmblks获得，代表最大总共分配空间NativeHeapAlloc:从mallinfouorblks获得，总共分配空间NativeHeapFree:从mallinfofordblks获得，代表总共剩余空间NativeHeapSize约等于NativeHeapAlloc+NativeHeapFreemallinfo是一个C库，mallinfo函数提供了各种各样的通过C的malloc（）函数分配的内存的统计信息。DalvikHeapSize:从RuntimetotalMemory()获得，DalvikHeap总共的内存大小。DalvikHeapAlloc:RuntimetotalMemory()-freeMemory()，DalvikHeap分配的内存大小。DalvikHeapFree:从RuntimefreeMemory()获得，DalvikHeap剩余的内存大小。DalvikHeapSize约等于DalvikHeapAlloc+DalvikHeapFree重点关注如下几个字段：Native/Dalvik的Heap信息中的alloc：具体在上面的第一行和第二行，它分别给出的是JNI层和Java层的内存分配情况，如果发现这个值一直增长，则代表程序可能出现了内存泄漏。Total的PSS信息：这个值就是你的应用真正占据的内存大小，通过这个信息，你可以轻松判别手机中哪些程序占内存比较大了。10.弱网测试怎么测弱网环境测试主要依赖于弱网环境的模拟。环境搭建方式一般有两种：软件方式和硬件方式。软件方式的成本低，主要就是通过模拟网络参数来配置弱网环境，通常来讲可以达到测试目的。一般可通过热点共享设置。在各类网络软件中，主要就是对带宽、丢包、延时等进行模拟弱网环境。如果要求更接近弱网环境，比如现在很多的专项测试，会更倾向于通过硬件方式来协助测试，但这种方式相对会麻烦很多，一般会由网维协助搭建。当然，对于有些无法模拟的情况，只能靠人工移动到例如电梯、地铁等信号比较弱的地方。11.//*[contains(@text,&quot;登录&quot;)]是什么意思定位第一个元素text属性包含登录的元素12.Appium都有哪些启动方式客户端启动命令行启动"}, "md/summary/管理工具.html": {"url": "md/summary/管理工具.html", "title": "管理工具", "keywords": "", "body": "管理工具1.简述常用的Bug管理或者用例管理工具，并且描述其中一个工作流程常用：testlink，QC，mantis，禅道，TAPD，JIRA。TAPD：产品创建（需求，计划，模块）--&gt;项目创建（PM排期、任务分解）--&gt;研发（编码、单元测试等）--&gt;测试（测试计划，用例，执行，bug，报告等）。2.禅道和qc的区别？同为缺陷管理工具。QC作为缺陷管理工具，QC在缺陷管理方面，做的相对完善。提bug页面：填写内容可以根据测试需求，不断修改添加新的字段；以我上一家公司为例，在提bug过程中，有一下几个必填项：Bug状态（new、fixed、closed等）、发现人员、缺陷发现阶段（测试阶段、上现阶段等）、缺陷来源（测试人员给出的bug定位）、Bug分类（功能、性能等问题）、测试阶段（单元测试、集成测试、系统测试等）、归属需求、缺陷回归次数、优先级、分配给，这些必填项再加上bug标题和操作描述、上传附件，使很多疑问都变得清晰。缺陷查看页面：可以根据自己需要选择要呈现的字段，相对人性化可操作，每个显示的字段都可以进行筛选，使研发人员很快能定位到属于自己的bug，再根据bug状态、优先级进行筛选，使未完结的bug能有序并无遗漏地完成修改；页面还有注释功能，研发人员能写出针对本问题的各种感想，方便完善而又人性化。禅道（开源版）禅道涉及面非常广，但是在缺陷管理这方面，与老牌的QC还是略逊一筹。提bug页面：页面是非常清晰整洁的web页面，但是需要填写的字段，并没有完全覆盖开发和测试人员的全部需求。页面字段：产品模块（对应QC中的项目）、所属项目（对应QC中的需求）、影响版本（bug所属版本？）、当前指派（修改bug的人员）、bug标题、重现步骤、相关需求（页面标注了这个字段，但是什么也没有显示，并且没有可填写的位置）、相关任务、类型/严重。"}, "md/summary/Selenium基础.html": {"url": "md/summary/Selenium基础.html", "title": "Selenium 基础", "keywords": "", "body": "Selenium基础1.什么是Selenium？Selenium就是一套专门用于自动化Web浏览器的工具。而已！你用这个东西来做什么完全取决于你。主要是用于自动化Web应用程序进行测试，但肯定不仅限于此。它也是无数其他浏览器自动化工具，API和框架的核心技术。2.什么是seleniumIDE？SeleniumIDE是Selenium脚本的集成开发环境。它被实现为Firefox扩展（插件），并允许您记录，编辑和调试测试。由于IDE录制生成的脚本不具备可维护性，实际测试中没有用到。3.SeleniumWebdriver原理？每个Selenium命令，这里指的是所谓的基础操作，例如，点击、输入等，都会创建一条HTTP请求，发送给BrowserWebDriverBrowserWebDriver使用一个HTTPServer监听和接收HTTP请求HTTPServer根据协议规则定义这些Selenium命令对应的浏览器具体操作浏览器执行这些操作浏览器将执行状态返回给HTTPServerHTTPServer再将这些状态信息返回给自动化脚本4.如何设计自动化测试用例编写测试脚本之前要编写测试用例，而且测试用例不能直接使用手工测试的用例。自动化的测试用例是一个完整的场景：用户登录系统到用户退出。用例只验证一个功能点。不用试图登陆后验证所有的功能再退出，测试用例尽量只做正向的逻辑验证。用例之间不产生关联，相互独立，也要高内聚，低耦合，测试用例关注的是功能逻辑的实现。测试用例的上下文必须有一定的顺序性，前置条件清晰，检查点的设置要侧重，全面，灵活测试用例对数据的操作要进行还原测试用例必须是可回归的。5.webdriver如何开启和退出一个浏览器？开启：dr=webdriver.浏览器类型()关闭：dr.quit()6.什么是自动化测试框架？测试自动化框架是设置特定产品的自动化规则的集成系统。该系统集成了功能库，测试数据源，对象详细信息和各种可重复使用的模块。这些组件用作需要组装以代表业务流程的小型构建块。该框架为测试自动化提供了基础，并简化了自动化工作。也是为自动化软件测试提供支持的假设框架，概念和工具的主要优点是维护成本低。如果任何测试用例发生变化，那么只需要更新测试用例文件，驱动程序脚本和启动脚本将保持不变。理想情况下，如果应用程序发生更改，则无需更新脚本。选择正确的框架/脚本技术有助于降低成本。与测试脚本相关的成本是由于开发和维护工作。7.Selenium是什么，流行的版本有哪些？Selenium是基于Web的最流行的UI自动化测试工具。它提供了一组支持多种平台的公开API（例如Linux，Windows，MacOSX等）。此外，像GoogleChrome，MozillaFirefox，InternetExplorer和Safari等所有现代浏览器都可以用来运行Selenium测试。它也涵盖了Android平台，其中Appium是实现SeleniumWebdriver界面的工具，用于移动自动化。值得注意的是，除了许多后来的小型版本之外，Selenium还有三个主要版本：Selenium1或SeleniumRC，于2004年初发布，提供了一个使用服务器与浏览器交换命令和响应的API集。Selenium2或SeleniumWebdriver，在2011年中推出，并在Selenium功能中引入了一系列重大改进。这些新的API完全取代了服务器组件，并与目标浏览器本地交互。Selenium3这个版本是在2016年末发布的大版本。它带来的主要变化是引入WebdriverAPI的W3C规范，用于浏览器自动化。也就是说，每个主要的浏览器都会有自己的WebdriverAPI来实现功能。Selenium4这个版本还在测试中，该版本主要是在底层更符合W3C规范，对上层用户使用并无太大影响。8.XPath中使用单斜杠和双斜杠有什么区别？如果XPath是从文档节点开始，它将允许创建“绝对”路径表达式。例如/html/body/p匹配body下所有的段落元素。如果XPath在文档中的任意位置开始进行选择匹配，那么它将允许创建“相对”路径表达式。例如//p匹配所有的段落元素。9.你对SeleniumGrid有什么了解？它提供了什么功能？SeleniumGrid是一款利用现有计算基础架构大幅加速Web应用程序功能测试的工具。允许测试者轻松地在多台机器上并行运行多个测试，并且可以在异构环境中运行。基于优秀的SeleniumWeb测试工具，SeleniumGrid允许测试者并行运行多个SeleniumRemoteControl实例。更好的是，它集成显示所有Selenium远程控制，所以不必担心实际的基础设施。SeleniumGrid将运行Selenium测试套件所需的时间，缩短到Selenium实例的单个实例运行时间的一小点。10.当有很多定位器时，如ID、名称、XPath、CSS定位器，我应该使用哪一个？如果有唯一的名称或标识符可用，那么应该使用它们来代替XPath和CSS定位器。如果没有，那么CSS定位器应该被优先考虑，因为在大多数现代浏览器中，它们的速度比XPath更快，但XPath更加灵活与实用。11.隐式等待与显式等待有什么不同？隐式等待是设置的全局等待，分为页面加载超时等待页面元素加载超时异步脚本超时。如果是页面元素超时，设置等待时间，是对页面中的所有元素设置加载时间。隐式等待是其实可以理解成在规定的时间范围内，浏览器在不停的遍历页面属性，直到找到相关元素或者时间结束。显式等待只是用于特定搜索的一个计时器。它的可扩展性更强，你可以设置它来等待任何条件。通常情况下，可以使用一些预先构建的条件来等待元素变得可点击，可见，不可见等，或者只是编写适合需求的条件。实际测试中隐式等待通常就会在打开浏览器后加上。"}, "md/summary/性能测试基础.html": {"url": "md/summary/性能测试基础.html", "title": "性能测试基础", "keywords": "", "body": "性能测试基础1.性能测试有哪些分类负载测试在这里，负载测试指的是最常见的验证一般性能需求而进行的性能测试，在上面我们提到了用户最常见的性能需求就是“既要马儿跑，又要马儿少吃草”。因此负载测试主要是考察软件系统在既定负载下的性能表现。我们对负载测试可以有如下理解：负载测试是站在用户的角度去观察在一定条件下软件系统的性能表现。负载测试的预期结果是用户的性能需求得到满足。此指标一般体现为响应时间、交易容量、并发容量、资源使用率等。压力测试压力测试是为了考察系统在条件下的表现，条件可以是超负荷的交易量和并发用户数。注意，这个条件并不一定是用户的性能需求，可能要远远高于用户的性能需求。可以这样理解，压力测试和负载测试不同的是，压力测试的预期结果就是系统出现问题，而我们要考察的是系统处理问题的方式。比如说，我们期待一个系统在面临压力的情况下能够保持稳定，处理速度可以变慢，但不能系统崩溃。因此，压力测试是能让我们识别系统的弱点和在极限负载下程序将如何运行。例子：负载测试关心的是用户规则和需求，压力测试关心的是软件系统本身。并发测试验证系统的并发处理能力。一般是和服务器端建立大量的并发连接，通过客户端的响应时间和服务器端的性能监测情况来判断系统是否达到了既定的并发能力指标。负载测试往往就会使用并发来创造负载，之所以把并发测试单独提出来，是因为并发测试往往涉及服务器的并发容量，以及多进程/多线程协调同步可能带来的问题。这是要特别注意，必须测试的。基准测试当软件系统中增加一个新的模块的时候，需要做基准测试，以判断新模块对整个软件系统的性能影响。按照基准测试的方法，需要打开/关闭新模块至少各做一次测试。关闭模块之前的系统各个性能指标记下来作为基准（Benchmark），然后与打开模块状态下的系统性能指标作比较，以判断模块对系统性能的影响。稳定性测试“路遥知马力”，在这里我们要说的是和性能测试有关的稳定性测试，即测试系统在一定负载下运行长时间后是否会发生问题。软件系统的有些问题是不能一下子就暴露出来的，或者说是需要时间积累才能达到能够度量的程度。为什么会需要这样的测试呢？因为有些软件的问题只有在运行一天或一个星期甚至更长的时间才会暴露。这种问题一般是程序占用资源却不能及时释放而引起的。比如，内存泄漏问题就是经过一段时间积累才会慢慢变得显著，在运行初期却很难检测出来；还有客户端和服务器在负载运行一段时间后，建立了大量的连接通路，却不能有效地复用或及时释放。可恢复测试测试系统能否快速地从错误状态中恢复到正常状态。比如，在一个配有负载均衡的系统中，主机承受了压力无法正常工作后，备份机是否能够快速地接管负载。可恢复测试通常结合压力测试一起来做。2.你认为性能测试的目的是什么？做好性能测试的工作的关键是什么？性能测试工作的目的是检查系统是否满足在需求说明书中规定的性能，性能测试常常需要和强度测试结合起来，并常常要求同时进行软件和硬件的检测。性能测试主要的关注对象是响应时间，吞吐量，占用内存大小（辅助存储区），处理精度等。3.服务端性能分析都从哪些角度来进行？从维度上划分，性能指标主要分为两大类，分别是业务性能指标和系统资源性能指标。业务性能指标可以直观地反映被测系统的实际性能状况，常用的指标项有：并发用户数事务吞吐率（TPS/RPS）事务平均响应时间事务成功率系统资源性能指标，主要是反映整个系统环境的硬件资源使用情况，常用的指标包括：服务器：CPU利用率、处理器队列长度、内存利用率、内存交换页面数、磁盘IO状态、网卡带宽使用情况等；数据库：数据库连接数、数据库读写响应时长、数据库读写吞吐量等；网络：网络吞吐量、网络带宽、网络缓冲池大小；缓存（Redis）：静态资源缓存命中率、动态数据缓存命中率、缓存吞吐量等；测试设备（压力发生器）：CPU利用率、处理器队列长度、内存利用率、内存交换页面数、磁盘IO状态、网卡带宽使用情况等。4.如何理解压力测试，负载测试以及性能测试？性能测试（PerformanceTest）：通常收集所有和测试有关的所有性能，被不同人在不同场合下进行使用。压力测试（StressTest）：是在一定的『负荷条件』下，长时间连续运行系统给系统性能造成的影响。负载测试（LoadTest）：在一定的工作负荷下，给系统造成的负荷及系统响应的时间。5.编写一个http接口性能测试方案，测试过程的关注点有哪些，流程等？一、准备工作1、系统基础功能验证性能测试在什么阶段适合实施？切入点很重要！一般而言，只有在系统基础功能测试验证完成、系统趋于稳定的情况下，才会进行性能测试，否则性能测试是无意义的。2、测试团队组建根据该项目的具体情况，组建一个几人的性能测试team，其中DBA是必不可少的，然后需要一至几名系统开发人员（对应前端、后台等），还有性能测试设计和分析人员、脚本开发和执行人员；在正式开始工作之前，应该对脚本开发和执行人员进行一些培训，或者应该由具有相关经验的人员担任。3、工具的选择综合系统设计、工具成本、测试团队的技能来考虑，选择合适的测试工具，最起码应该满足一下几点：支持对web（这里以web系统为例）系统的性能测试，支持http和https协议；工具运行在Windows平台上；支持对webserver、前端、数据库的性能计数器进行监控；4、预先的业务场景分析为了对系统性能建立直观上的认识和分析，应对系统较重要和常用的业务场景模块进行分析，针对性的进行分析，以对接下来的测试计划设计进行准备。二、测试计划测试计划阶段最重要的是分析用户场景，确定系统性能目标。1、性能测试领域分析根据对项目背景，业务的了解，确定本次性能测试要解决的问题点；是测试系统能否满足实际运行时的需要，还是目前的系统在哪些方面制约系统性能的表现，或者，哪些系统因素导致系统无法跟上业务发展？确定测试领域，然后具体问题具体分析。2、用户场景剖析和业务建模根据对系统业务、用户活跃时间、访问频率、场景交互等各方面的分析，整理一个业务场景表，当然其中最好对用户操作场景、步骤进行详细的描述，为测试脚本开发提供依据。3、确定性能目标前面已经确定了本次性能测试的应用领域，接下来就是针对具体的领域关注点，确定性能目标（指标）；其中需要和其他业务部门进行沟通协商，以及结合当前系统的响应时间等数据，确定最终我们需要达到的响应时间和系统资源使用率等目标；比如：登录请求到登录成功的页面响应时间不能超过2秒；报表审核提交的页面响应时间不能超过5秒；文件的上传、下载页面响应时间不超过8秒；服务器的CPU平均使用率小于70%，内存使用率小于75%；各个业务系统的响应时间和服务器资源使用情况在不同测试环境下，各指标随负载变化的情况等；4、制定测试计划的实施时间预设本次性能测试各子模块的起止时间，产出，参与人员等等。三、测试脚本设计与开发性能测试中，测试脚本设计与开发占据了很大的时间比重。1、测试环境设计本次性能测试的目标是需要验证系统在实际运行环境中的性能外，还需要考虑到不同的硬件配置是否会是制约系统性能的重要因素！因此在测试环境中，需要部署多个不同的测试环境，在不同的硬件配置上检查应用系统的性能，并对不同配置下系统的测试结果进行分析，得出最优结果（最适合当前系统的配置）。这里所说的配置大概是如下几类：数据库服务器；应用服务器；负载模拟器；软件运行环境，平台。测试环境测试数据，可以根据系统的运行预期来确定，比如需要测试的业务场景，数据多久执行一次备份转移，该业务场景涉及哪些表，每次操作数据怎样写入，写入几条，需要多少的测试数据来使得测试环境的数据保持一致性等等。可以在首次测试数据生成时，将其导出到本地保存，在每次测试开始前导入数据，保持一致性。2、测试场景设计通过和业务部门沟通以及以往用户操作习惯，确定用户操作习惯模式，以及不同的场景用户数量，操作次数，确定测试指标，以及性能监控等。3、测试用例设计确认测试场景后，在系统已有的操作描述上，进一步完善为可映射为脚本的测试用例描述，用例大概内容如下：用例编号：查询表单_xxx_x1（命名以业务操作场景为主，简洁易懂即可）用例条件：用户已登录、具有对应权限等操作步骤：系统业务场景描述4、脚本和辅助工具的开发及使用按照用例描述，可利用工具进行录制，然后在录制的脚本中进行修改；比如参数化、关联、检查点等等，最后的结果使得测试脚本可用，能达到测试要求即可；建议尽量自己写脚本来实现业务操作场景，这样对个人技能提升较大；一句话：能写就绝不录制！！！四、测试执行与管理在这个阶段，只需要按照之前已经设计好的业务场景、环境和测试用例脚本，部署环境，执行测试并记录结果即可。1、建立测试环境按照之前已经设计好的测试环境，部署对应的环境，由运维或开发人员进行部署，检查，并仔细调整，同时保持测试环境的干净和稳定，不受外来因素影响。2、执行测试脚本这一点比较简单，在已部署好的测试环境中，按照业务场景和编号，按顺序执行我们已经设计好的测试脚本。3、测试结果记录根据测试采用的工具不同，结果的记录也有不同的形式；现在大多的性能测试工具都提供比较完整的界面图形化的测试结果，当然，对于服务器的资源使用等情况，可以利用一些计数器或第三方监控工具来对其进行记录，执行完测试后，对结果进行整理分析。五、测试分析1、测试环境的系统性能分析根据我们之前记录得到的测试结果（图表、曲线等），经过计算，与预定的性能指标进行对比，确定是否达到了我们需要的结果；如未达到，查看具体的瓶颈点，然后根据瓶颈点的具体数据，进行具体情况具体分析（影响性能的因素很多，这一点，可以根据经验和数据表现来判断分析）。2、硬件设备对系统性能表现的影响分析由于之前设计了几个不同的测试环境，故可以根据不同测试环境的硬件资源使用状况图进行分析，确定瓶颈是在数据库服务器、应用服务器抑或其他方面，然后针对性的进行优化等操作。3、其他影响因素分析影响系统性能的因素很多，可以从用户能感受到的场景分析，哪里比较慢，哪里速度尚可，这里可以根据2\\3\\5原则对其进行分析；至于其他诸如网络带宽、操作动作、存储池、线程实现、服务器处理机制等一系列的影响因素，具体问题具体分析，这里就不一一表述了。4、测试中发现的问题在性能测试执行过程中，可能会发现某些功能上的不足或存在的缺陷，以及需要优化的地方，这也是执行多次测试的优点。6.描述软件产生内存泄露的原因以及检查方式。（可以结合一种开发语言进行描述）内存泄露的原因，主要是由于开发过程当中申请了计算机资源（例如对象、内存等），但是使用资源完成以后没有及时释放资源导致的。例如在C语言当中使用了malloc申请了内存，但是未使用free来释放内存。7.什么是系统瓶颈？瓶颈主要是指整个软硬件构成的软件系统某一方面或者几个方面能力不能满足用户的特定业务要求，“特定”是指瓶颈会在某些条件下会出现，因为毕竟大多数系统在投入前。严格的从技术角度讲，所有的系统都会有瓶颈，因为大多数系统的资源配置不是协调的，例如CPU使用率刚好达到100%时，内存也正好耗尽的系统不是很多见。因此我们讨论系统瓶颈要从应用的角度讨论：关键是看系统能否满足用户需求。在用户极限使用系统的情况下，系统的响应仍然正常，我们可以认为改系统没有瓶颈或者瓶颈不会影响用户工作。因此我们测试系统瓶颈主要是实现下面两个目的：发现“表面”的瓶颈。主要是模拟用户的操作，找出用户极限使用系统时的瓶颈，然后解决瓶颈，这是性能测试的基本目标。发现潜在的瓶颈并解决，保证系统的长期稳定性。主要是考虑用户在将来扩展系统或者业务发生变化时，系统能够适应变化。满足用户目前需求的系统不是最好的，我们设计系统的目标是在保证系统整个软件生命周期能够不断适应用户的变化，或者通过简单扩展系统就可以适应新的变化。"}, "md/summary/LordRunner相关.html": {"url": "md/summary/LordRunner相关.html", "title": "LordRunner 相关", "keywords": "", "body": "LordRunner相关1.LoadRunner的工作原理是什么？LoadRunner通过模拟上千万用户实施并发负载，实时性能监控的系统行为和性能方式来确认和查找问题。VuGen发生器：捕捉用户的业务流，并最终将其录制成一个脚本：选择相应的一种协议；在客户端模拟用户使用过程中的业务流程，并录制成一个脚本；编辑脚本和设置Run-TimeSettings项；编译脚本生成一个没有错误的可运行的脚本。控制器（Controller）：设计场景，包括手动场景设计和目标场景设计两种方式；场景监控，可以实时监控脚本的运行的情况。可以通过添加计数器来监控Windows资源、应用服务器和数据库使用情况。场景设计的目的是设计出一个最接近用户实际使用的场景，场景设计越接近用户使用的实际情况，测试出来的数据就越接近真实值。负载发生器（LoadGenerators）模拟用户对服务器提交请求。通常，在性能测试过程中会将控制器和负载发生器分开；当使用多台负载发生器时，一定要保证负载均衡（指在进行性能测试的过程中，保证每台负载发生器均匀地对服务器进行施压）。分析器（Analysis）：主要用于对测试结果进行分析。2.LoadRunner分哪四部分？用户动作设计（VuGen发生器）场景设计（Controller）负载压力生成（LoadGenerators）测试数据分析（Analysis）3.LoadRunner进行测试的流程？测试测试创建虚拟用户脚本创建运行场景运行测试脚本监视场景分析测试的结果以上，最好是结合一个案例，根据以上流程来介绍。4.什么是并发？在LoadRunner中，如何进行并发的测试？集合点失败了会怎么样？在同一时间点，支持多个不同的操作。LoadRunner中提供IP伪装，集合点，配合虚拟用户的设计，以及在多台电脑上设置，可以比较好的模拟真实的并发。集合点，即是多个用户在某个时刻，某个特定的环境下同时进行虚拟用户的操作的。集合点失败，则集合点的操作就会取消，测试就不能进行。5.LoadRunner脚本如何录制和编写？打开LoadRunner的VirtualUserGenerator，新建脚本在弹出框中选择Web（HTTP/HTML）协议，然后点击创建按钮弹出startRecording窗口，选择对应的录制类型（InternetApplications），选择浏览器（这里我们选择IE），选择需要测试的web地址，选择浏览器安装地址。点击ok自动打开IE浏览器，进入相对应地址，在页面上方显示一个录制工具条。此时我们发给服务器的所有请求都会被记录在脚本中。输入用户名和密码，在点击登录前插入事务，输入事务名称，点击ok然后点击登录按钮，待登录成功，显示出成功页面后，点击结束事务，再点击ok。然后点击工具条上的停止按钮。结束录制，回到脚本中。这时候需要等待会，待自动生成脚本。生成的脚本含有刚才录制的信息，点击菜单栏，回放按钮。回放如果有红色，是报错信息，没有红色，说明运行成功。还可点击“View”菜单栏的“TestResults”进行查看。显示passed即为成功。脚本便可使用。6.LoadRunner中的ThinkTime有什么作用？用户在执行连续操作之间等待的时间称为“思考时间”，它是决定对服务器施压大小的因素之一。设置思考时间，是为了更真实的模拟用户。Vuser使用Lr_think_time函数来模拟用户思考时间。录制Vuser脚本时，VuGen将录制实际思考时间，并插入到Vuser脚本中响应的Lr_think_time语句。可以编辑录制的Lr_think_time语句，并向Vuser脚本手动添加更多Lr_think_time语句。可以通过选择【插入】&gt;【步骤】&gt;【思考时间】来插入思考时间步骤。当录制JavaVuser脚本时，不会在Vuser脚本中生成Lr_think_time语句。可以使用【Run-timeSettings】，更改执行Vuser脚本时Lr_think_time语句的运行方式。7.在搜索引擎中输入汉字就可以解析到对应的域名，请问如何用LoadRunner进行测试？建立测试计划，确定测试标准和测试范围设计典型场景的测试用例，覆盖常用业务流程和不常用的业务流程等根据测试用例，开发自动测试脚本和场景：录制测试脚本新建一个脚本（Web/HTML协议）点击录制按钮，在弹出的对话框的URL中输入访问地址在打开的浏览器中进行正常操作流程后，结束录制调试脚本并保存。可能要注意到字符集的关联设置测试场景针对性能设置测试场景，主要判断在正常情况下，系统的平均事务响应时间是否达标针对压力负载设置测试场景，主要判断在长时间处于满负荷或者超出系统承载能力的条件下，系统是否会崩溃执行测试，获取测试结果，分析测试结果8.一台客户端有三百个客户与三百个客户端有三百个客户对服务器施压，有什么区别？300个用户在一个客户端上，会占用客户机更多的资源，而影响测试的结果。线程之间可能发生干扰，而产生一些异常。300个用户在一个客户端上，需要更大的带宽。IP地址的问题，可能需要使用IPSpoof来绕过服务器对于单一IP地址最大连接数的限制。所有用户在一个客户端上，不必考虑分布式管理的问题；而用户分布在不同的客户端上，需要考虑使用控制器来整体调配不同客户机上的用户。同时，还需要给予相应的权限配置和防火墙设置。9.客户交付一个性能测试项目，请阐述你的实施流程测试设计阶段：了解被测系统的性能需求，定义测试目标和范围；了解系统的技术信息，如系统架构等；确定测试方案、进度安排，并制定测试计划，场景设置方案，及需要收集的测试数据；同相关人员协商讨论测试方案；准备数据收集模板；不同项目的性能测试，需要收集的数据不同；针对性的制定一个模板，更符合需要；测试环境准备：技术准备；选择性能测试工具；测试方案中涉及到的技术问题；测试数据的收集方案实现；如：如何监控系统资源等；搭建测试环境；创建初始数据；如虚拟用户使用的账号等；测试执行阶段：录制脚本；调试脚本；执行场景；收集测试数据，并简单整理；测试分析阶段：分析测试数据；提交测试报告。10.解释5个常用的性能指标的名称与具体含义并发：所有用户在同一时刻对系统执行操作，一般指做同一件事情或操作。在线：所有用户在一段时间内对系统执行操作。请求响应时间：从client端发出请求到得到响应的整个时间；包括：client端响应时间+网络响应时间+Server端响应时间。事务请求响应时间：完成相应事务所用的时间；这个是性能测试中重点关注的指标。TPS（TransactionPerSecond）：每秒钟系统能够处理的交易或事务的数量。它是衡量系统处理能力的重要指标。TPS是LoadRunner中重要的性能参数指标。点击率（HitPerSecond）：每秒发送的HTTP请求的数量；点击率越大对Server的压力越大资源利用率：对不同资源的使用程度，如CPU，I/O,内存，……11.简述LoadRunner的工作原理？LoadRunner会自动监控指定的URL或应用程序所发出的请求及服务器返回的响应，它做为一个第三方（Agent）监视客户端与服务器端的所有对话，然后把这些对话记录下来，生成脚本，再次运行时模拟客户端发出的请求，捕获服务器端的响应。12.什么是集合点？设置集合点有什么意义？LoadRunner中设置集合点的函数是哪个？集合点：是一个并发访问的点，例如在测试计划中，可能会要求系统能够承受1000人同时提交数据，在LoadRunner中可以通过在提交数据操作前面加入集合点，这样当虚拟用户运行到提交数据的集合点时，LoadRunner就会检查同时有多少用户运行到集合点，如果不到1000人，LoadRunner就会命令已经到集合点的用户在此等待，当在集合点等待的用户达到1000人时，LoadRunner命令1000人同时去提交数据，并发访问的目的。注意：集合点经常和事务结合起来使用，常放在事务的前面，集合点只能插入到Action部分，vuser_init和vuser_end中不能插入集合点。集合点函数：lr_rendezvous(“SubmitData”)13.HTML-basedscript与URL-basedscript的脚本有什么区别？使用“HTML-basedscript”的模式录制脚本，VuGen为用户的每个HTML操作生成单独的步骤，这种脚本看上去比较直观；使用“URL-basedscript”模式录制脚本时，VuGen可以捕获所有作为用户操作结果而发送到服务器的HTTP请求，然后为用户的每个请求分别生成对应方法。通常，基于浏览器的Web应用会使用“HTML-basedscript”模式来录制脚本；而没有基于浏览器的Web应用、Web应用中包含了与服务器进行交互的JavaApplet、基于浏览器的应用中包含了向服务器进行通信的JavaScript/VBScript代码、基于浏览器的应用中使用了HTTPS安全协议，这时使用“URL-basedscript”模式进行录制。14.如何设置LoadRunner才能让集合点只对一半的用户生效？在LoadRunner中，进入Controller-&gt;Scenario-&gt;Rendezvous…-&gt;Policy，系统弹出Policy对话框。在该对话框中可以设定集合点执行的策略。第一项：表示当所有用户数的X%到达集合点时，开始释放等待的用户并继续执行场景。第二项：表示当前正在运行用户数的X%到达集合点时，开始释放等待的用户并继续执行场景。第三项：表示当X个用户到达集合点时，开始释放等待的用户并继续执行场景。其中还有一项TimeoutbetweenVusers，就30秒来说，当第一个用户到达集合点后，再等待30秒，如果在30秒内到达的用户数达到指定的数量，就开始继续执行场景。如果在30秒内还没有达到指定的用户数量，就不再等待，开始释放等待的用户并继续执行场景。由上可知，将第一项用户数设置成50%可。15.LoadRunner中如何监控Windows资源？进入被监视windows系统，开启以下二个服务：RemoteProcedureCall(RPC)和RemoteRegistryService；在controller中，WindowsResources窗口中右击鼠标选择AddMeasurements，添加被监控windows的IP地址，选择所属系统，然后选择需要监控的指标就可以开始监控。16.什么是负载测试？负载测试是通过逐步增加系统负载，测试系统性能的变化，并最终确定在满足性能指标的情况下，系统所能承受的最大负载量的测试，例如，访问一个页面的响应时间规定不超过1秒，负载测试就是测试在响应时间为1秒时，系统所能承受的最大并发访问用户的数量。17.什么是性能测试？性能测试：指在一定的约束条件下（指定的软件、硬件、网络环境等），确定系统所能承受的最大负载压力。18.说明负载测试过程？第一步：计划测试。在这里，我们需开发一个明确定义的测试计划，以确保该测试方案能完成负载测试目标。第二步：创建虚拟用户。创建的脚本需要包含单个虚拟用户需要执行的操作、多个虚拟用户作为一个整体要执行的操作、以及能够作为事务来度量的操作。第三步：创建场景。一个场景描述了在一个测试会话中发生的事件。它包含了当场景中运行时的机器、脚本和虚拟用户。我们使用LoadRunner中的Controller创建场景。我们可以创建手动场景也可以创建基于目标的场景。在手动场景中，我们定义虚拟用户的数量、负载生成器、被分配到每个脚本中虚拟用户的百分比。对于web测试，我们创建基于目标的场景，其中目标即测试过程中要达成的性能目标。LoadRunner会由此自动为我们创建一个场景。第四步：运行场景。我们通过配置多个虚拟用户同时执行任务来模拟对服务器加压。在测试之前，我们设置场景的配置和计划安排。我们可以运行整个场景、一组虚拟用户或单个虚拟用户。第五步：监控场景。我们使用LoadRunner联机运行来监测场景执行、事务系统资源，Web资源，Web服务器资源，Web应用服务器资源，数据库服务器资源，网络延迟，流媒体资源，防火墙服务器资源，ERP服务器资源，Java性能监视器。第六步：分析测试结果。在场景执行时，LoadRunner记录了应用软件在不同负载下的性能。我们可以使用LoadRunner的图表和报告来分析应用软件的性能。19.我们什么时候做负载和性能测试？我们一旦完成界面（GUI）测试，我们就可以执行负载测试。现代的软件系统架构庞大而复杂的。而单用户测试主要是侧重于系统组件的功能和用户界面的测试，应用测试侧重于整个系统的性能和可靠性。例如，一个典型的应用测试场景，描绘了1000个用户，同时登录到系统。这就产生了问题，如系统的响应时间是多少，它会崩溃么；是否兼容不同的应用软件和系统平台；它是否可以支撑成千上万的用户等，这时我们就需要做负载和性能测试。20.什么是LoadRunner的组件？LoadRunner的组件有虚拟用户生成器，控制器、代理程序、LoadRunner的分析器和监控器，LoadRunner在线帮助21.你用LoadRunner的哪个组件录制脚本？虚拟用户生成器（VuGen）可以用来录制脚本。它通过多种应用程序类型和通讯协议来确保你开发一个Vuser脚本。22.在多用户模式下你用LoadRunner的哪个组件来回放脚本？Controller组件可以用来在多用户模式下回放脚本。这个过程可以在一组虚拟用户以组的形式执行脚本的场景中运行时完成。23.什么是场景场景定义了发生在每个测试会话中的事件。例如，一个场景定义和控制了要加载的虚拟用户的数量，要被执行的动作，虚拟用户模拟压力时的机器。24.解释WebVuser脚本的录制模式我们使用VuGen通过记录一个用户在客户端执行典型的业务流程来开发一个Vuser脚本。VuGen通过记录客户端和服务器之间的交互来创建脚本。例如，基于Web的应用程序，VuGen监测客户端直到数据库，跟踪所有发送出的请求，再从数据库服务器接收。我们使用VuGen：监测应用程序和服务器的交互；使形成函数调用；插入生成的函数调用到一个Vuser脚本中。25.为什么创建参数？参数就像脚本中的变量。他们被用来改变对服务器的输入值来模拟真正的用户。每次当脚本运行时，不同的数据设置被发送到服务器。为了更精确的在Controller中测试，从而更好的模拟使用模型；一个脚本在系统上模拟很多不同的用户。26.什么是关联？解释自动关联和手动关联的区别关联是用来获取每次脚本运行时由嵌套请求产生的唯一的数据。关联提供值以避免产生重复值的错误，并且优化代码（避免嵌套请求）。自动关联是我们自己为关联设置的一定规则。它可以是应用服务器特定的。这里的值被通过规则创建的数据取代。在手动关联里，我们要关联的值被浏览和创建关联以用来关联。27.什么是关联？解释自动关联和手动关联的区别，你在哪里设置自动关联的选项从web自动关联的观点来说，可以在录制选项中和关联表单中设置。这里我们可以使整个脚本关联，选择在线信息或者离线的动作，在这里我们可以定义关联的规则。为数据库自动关联可以使用显示输出窗口和为了关联浏览，找出关联查询的图表，选择我们想关联的查询值来完成。如果我们知道要被关联的特殊值，我们只用为这个值创建关联，指定如何创建这个值。28.什么函数可以捕捉到webVuser脚本的动态值？Web_reg_save_param函数保存动态的数据信息到一个参数中。29.什么时候你在虚拟用户产生器中禁用日志，什么时候选择标准日志和扩展日志？一旦我们调试脚本来验证它的功能，我们可以只记录错误。当我们在场景中添加一个脚本，日志记录将自动被禁用。标准日志选项：当您选择标准日志，它在脚本执行调试时创建一个标准的功能和发送信息的日志。大负荷的测试场景时，禁用此选项。当你复制一个脚本到一个场景，日志自动禁用扩展日志选项：选择扩展日志创建一个扩展的日志，包括警告和其他信息。禁用此选项为大负荷的测试场景。当你复制一个脚本的场景，将被自动禁用日志记录。我们可以指定附加信息，用扩展日志选项添加到扩展日志中。30.你如何调试LoadRunner的脚本？VuGen包含两个选项帮助调试VuGen脚本—通过逐步命令和断点运行某一步。选项对话框中的Debug设置，使我们决定在场景运行期间进行跟踪的程度。Debug信息被写到输出窗口，我们可以使用lr_set_debug_message函数手动设置你的脚本中的信息类。如果我们希望得到关于一小部分脚本的调试信息时，这就有意义了。31.在run-timesetting里你可以设置哪些改变？RunTimeSetting中我们所做的是：Pacing—它有迭代次数。Log—在此，我们有已禁用的标准日志。扩展ThinkTime—在ThinkTime里有两个选项，忽略thinktime和回放thinktime。General—在General选项卡中，我们可以设置vusers作为进程或者多线程，将每一步作为一个事务。32.你在哪里设置Vuser测试时迭代？我们在VuGen中的RunTimeSetting中设置迭代。这个导航是RunTimeSetting，Pacing选项卡，设置迭代次数。33.你如何在负载下执行功能测试？负载下的功能可以通过同时运行多个Vuser来测试。通过增加一定数量的Vuser，我们可以判断服务器可以承受多少负载。34.什么是Rampup？你如何设置？这个选项被用来逐步增加Vuser的数量/服务器上的负载。初始值设置，间隔的等待值可以被指定。要设置Rampup，进入“场景调度选项”35.Vuser作为线程运行的优势是什么？VuGen提供使用多线程的设施。这使每个产生器中运行更多的Vuser。如果Vuser作为进程运行，相同的驱动程序为每个Vuser加载到内存，从而占用大量的内存。这限制了在单发生器中运行的Vuser的数量。如果Vuser作为线程运行，为给定数量的Vuser（如100），只有一个驱动程序的实例被加载到内存。每个线程共享父驱动程序的内存，从而使每个产生器运行更多的Vuser。36.如果你想停止执行出错的脚本，怎么做？Lr_abort函数中止执行Vuser脚本。它指示Vuser停止执行Action部分，执行vuser_end部分，并结束执行。这个函数是有用的，当你需要手工停止一个脚本的执行，作为一个指定错误条件下的结果。当你使用这个函数停止一个脚本，Vuser被分配成停止状态。为让它生效，我们必须首先在Run—TimeSetting中取消选择“Continueonerror”37.响应时间和吞吐量间的关系是什么？吞吐量图表显示的是Vuser每秒从服务器收到的以字节为单位的数据量。当我们比较它和事务响应时间，我们会发现，若吞吐量下降，响应时间也会下降。同样，高峰时期的吞吐量和最高的响应时间大约在同一个时间。38.你如何识别性能瓶颈？性能瓶颈可以使用监控器监测。这些监控器可能是应用服务器监控器、web服务器监控器和网络监控器。它们帮助找出在场景中导致响应时间增加有问题的区域。通常所做的测试指标是性能响应时间、吞吐量，点击率，网络延迟图等39.如果web服务器、数据库服务器、网络都一切正常，那么哪里可能有问题？问题可能是系统本身，应用程序服务器或为应用程序编写的代码。40.你如何找出web服务器相关的问题？利用web资源监控器，我们可以发现web服务器的性能。使用这些监测器我们可以分析发生在场景中的web服务器的吞吐量，每秒点击数、以及每秒HTTP响应数，每秒下载的网页数量。41.覆盖图和关联图之间的区别是什么？覆盖图：它覆盖两个图表的内容，使共用一个X轴。合并后的图形左Y轴显示当前图形中的值，右Y轴显示合并图的Y轴的值。关联图：绘制相互对立的两个图表的Y轴。活动图的Y轴，成为合并后的图的X轴。合并图的Y轴成为合并后的图的Y轴42.你是怎么计划负载的？标准是什么？计划负载测试，以决定用户数量，我们将使用的机器型号，在哪里运行。它是基于两个重要文件，任务分配图和事务状况。任务分配图，给我们提供用户数量为一个特定的业务信息和负载时间。从这个图决定使用高峰期和不工作时段。事务配置文件，为我们提供了有关交事务方面的情况，包括事务的名称和我们决定的它们关于场景的优先等级。43.vuser_init动作包含什么？Vuser_init动作包含登录到服务器的程序44.vuser_end动作包含什么？Vuser_end部分包含注销的程序。45.什么是ThinkTime？你如何改变这个阈值？ThinkTime是一个真实的用户动作之间的等待时间。例如：当一个用户从服务器接收数据时，用户可以在响应前等待几秒钟来检查响应数据。此延迟就是ThinkTime。更改这个阈值：阈值是一个标准水平，思考时间低于阈值水平时将被忽略，Vugen不会生成思考时间语句。默认值是5秒。我们可以在Vugen录制选项中改变ThinkTime阈值。46.简述使用LoadRunner的步骤制定性能测试计划—&gt;开发测试脚本—&gt;设计测试场景—&gt;执行测试场景—&gt;监控测试场景—&gt;分析测试结果47.什么是集合点？设置集合点有什么意义？LoadRunner中设置集合点的函数是哪个？在性能测试过程中，需要模拟大量用户在同一时刻，访问系统并同时操作某一任务，可以通过配置集合点来实现，多个用户同时进行某操作；集合点可以在服务器上创建密集的用户负载，使LoadRunner能够测试服务器在负载状态下的性能。设置集合点函数：lr_rendezvous(&quot;Meeting&quot;)；//Meeting是集合点名称48.你如何在负载测试模式下执行功能测试？在负载测试模式下，可以通过同时运行数个虚拟用户，通过增加虚拟用户数，确定服务器在多大的负载量下，仍然可以正常运行，我一般进行核心功能操作，验证核心功能运行是否正常。49.什么是逐步递增？你如何来设置？虚拟用户数随着负载时间逐渐增加，可以帮助确定系统响应时间减慢的准确时间点。可以在“加压”选项卡中进行设置：将设置更改为：“每30秒启动2个Vuser”50.响应时间和吞吐量之间的关系是什么？当系统吞吐量未达到系统处理极限时，系统性能不会衰减，交易平均响应时间一般也不会递增，当系统达到吞吐量极限时，客户端交易会在请求队列中排队等待，等待的时间会记录在响应时间中，故交易平均响应时间一般会递增。51.在LoadRunner中为什么要设置思考时间和pacing录制时记录的是客户端和服务端的交互，如果要精确模拟用户的行为，那么客户操作客户端时花费了很多时间要怎么模拟呢？录入填写提交的内容，从列表中下拉搜索选择特定的值等，这时LoadRunner不会记录用户的客户端操作，而是记录了用户这段时间，成为思考时间(Think-time)，因为用户的这些客户端操作不会影响服务端，只是让服务器端在这段时间内没有请求而已，所以加入思考时间就能模拟出熟练的或者生疏的用户操作，接近实际对于服务端的压力。Vuser思考时间模拟实际用户在不同操作之间等待的时间。例如，当用户收到来自服务器的数据时，可能要等待几秒钟查看数据，然后再做出响应。这种延迟就称为“思考时间”。VuGen使用lr_think_time函数将思考时间值录制到Vuser脚本中。以下录制的函数指明用户等待了8秒钟才执行下一个操作：lr_think_time(8);当您运行了Vuser脚本并且Vuser遇到了上述lr_think_time语句时，默认情况下，Vuser将等待8秒钟后再执行下一个操作。可以使用思考时间运行时设置来影响运行脚本时Vuser使用录制思考时间的方式。52.如何理解TPS?TPS主要还是体现服务器对当前录制的事务的处理速度快慢。TPS高并不代表性能好。TPS是TransactionsPerSecond的缩写，也就是事务数/秒。它是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数，最终利用这些信息来估计得分。客户机使用加权协函数平均方法来计算客户机的得分，试软件就是利用客户机的这些信息使用加权协函数平均方法来计算服务器端的整体TPS得分。53.LoadRunner中的设置线程和进程的区别LoadRunner中，在进行运行设置中有一项选择，是按进程运行Vuser或按线程运行Vuser?下面进行分别来讲：按进程运行Vuser：Controller将使用驱动程序mdrv运行Vuser。如果按进程方式运行每个Vuser，则对于每个Vuser实例，都将启动一个mdrv进程。如果设置了10个Vuser，则在任务管理器中出现10个mdrv进程。多个mdrv进程肯定会占用大量内存及其他系统资源，这就限制了可以在任一负载生成器上运行的Vuser的数量。按线程运行Vuser:及设置了10个Vuser，其只会调用一个驱动程序mdrv.而每个Vuser都按线程运行，这些线程Vuser将共享父进程的内存段。这就节省了大量内存，从而可以在一个负载生成器上运行更多的Vuser。任何选择都是有两面性的。选择线程方式运行Vuser会带来一些安全问题。因为线程的资源是从进程资源中分配出来的，因此同一个进程中的多个线程会有共享的内存空间，这样可能会引起多个线程的同步问题，调度不好，就会出问题，不如A线程要用的资源就必须等待B线程释放，而B也在等待其他资源释放才能继续。这就会出现这样的问题：同一个测试场景，用线程并发就会超时失败或报错，而用进程并发就没错。虽然会有区别，但两种方式的运行都会给服务端造成的压力是一样的。54.HTML-Basedscrīpt和URL-Basedscrīpt录制的区别？基于浏览器的应用程序推荐使用HTML-Basedscrīpt。不是基于浏览器的应用程序推荐使用URL-Basedscrīpt。如果基于浏览器的应用程序中包含了Javascrīpt并且该脚本向服务器产生了请求，比如DataGrid的分页按钮等，也要使用URL-Basedscrīpt方式录制。基于浏览器的应用程序中使用了HTTPS安全协议，使用URL-Basedscrīpt方式录制。录制过程中不要使用浏览器的“后退”功能，LoadRunner对其支持不太好。55.LoadRunner如何创建脚本？启动VuGen:选择需要新建的协议脚本，可以创建单协议，或是多协议脚本点击StartRecord按钮，输入程序地址，开始进行录制使用VuGen进行录制：创建的每个Vuser脚本都至少包含三部分：vuser_init、一个或多个Actions及vuser_end。录制期间，可以选择脚本中VuGen要插入已录制函数的部分。运行多次迭代的Vuser脚本时，只有脚本的Actions部分重复，而vuser_init和vuser_end部分将不重复56.LoadRunner如何设置RecordingOptions选项？（以单协议http/html为例）菜单tools-&gt;RecordingOptions进入录制的设置窗体Recording标签页：选用哪种录制方式Browser标签页：浏览器的选择RecordingProxy标签页：浏览器上的代理设置Advanced标签页：可以设置录制时的thinktime，支持的字符集标准等Correlation标签页：手工设置关联，通过关联可在测试执行过程中保存动态值。使用这些设置可以配置VuGen在录制过程中执行的自动关联的程度。57.LoadRunner常用的分析点都有哪些？Vusers：提供了生产负载的虚拟用户运行状态的相关信息，可以帮助我们了解负载生成的结果。Rendezvous（负载过程中集合点下的虚拟用户）：当设置集合点后会生成相关数据，反映了随着时间的推移各个时间点上并发用户的数目，方便我们了解并发用户的变化情况。Errors（错误统计）：通过错误信息可以了解错误产生的时间和错误类型，方便定位产生错误的原因。ErrorsperSecond（每秒错误）：了解在每个时间点上错误产生的数目，数值越小越好。通过统计数据可以了解错误随负载的变化情况，定为何时系统在负载下开始不稳定甚至出错。AverageTransactionResponseTime（平均事务响应时间）：反映随着时间的变化事务响应时间的变化情况，时间越小说明处理的速度越快。如果和用户负载生成图合并，就可以发现用户负载增加对系统事务响应时间的影响规律。TransactionsperSecond（每秒事务）：TPS吞吐量，反映了系统在同一时间内能处理事务的最大能力，这个数据越高，说明系统处理能力越强。TransactionsSummary（事务概要说明）：统计事物的Pass数和Fail数，了解负载的事务完成情况。通过的事务数越多，说明系统的处理能力越强；失败的事务数越小说明系统越可靠。TransactionperformanceSummary（事务性能概要）：事务的平均时间、最大时间、最小时间柱状图，方便分析事务响应时间的情况。柱状图的落差越小说明响应时间的波动小，如果落差很大，说明系统不够稳定。TransactionResponseTimeUnderLoad（用户负载下事务响应时间）：负载用户增长的过程中响应时间的变化情况，该图的线条越平稳，说明系统越稳定。TransactionsResponsetime（事务响应时间百分比）：不同百分比下的事务响应时间范围，可以了解有多少比例的事物发生在某个时间内，也可以发现响应时间的分布规律，数据越平稳说明响应时间变化越小。TransactionResponseTime（各时间段上的事务数）：每个时间段上的事务个数，响应时间较小的分类下的是无数越多越好。HitsperSecond（每秒点击）：当前负载重对系统所产生的点击量记录，每一次点击相当于对服务器发出了一次请求，数据越大越好。Throughput（吞吐量）：系统负载下所使用的带宽，该数据越小说明系统的带宽依赖就越小，通过这个数据可以确定是不是网络出现了瓶颈。HTTPResponsesperSecond（每秒HTTP响应）：每秒服务器返回各种状态的数目，一般和每秒点击量相同。点击量是客户端发出的请求数，而HTTP响应数是服务器返回的响应数。如果服务器的响应数小于点击量，那么说明服务器无法应答超出负载的连接请求。ConnectionsperSecond（每秒连接）：统计终端的连接和新建的连接数，方便了解每秒对服务器产生连接的数量。同时连接数越多，说明服务器的连接池越大，当连接数随着负载上升而停止时，说明系统的连接池已满，通常这时候服务器会返回504错误。需要修改服务器的最大连接来解决该问题。58.LoadRunner不执行检查方法怎么解决？在录制Web协议脚本中添加了检查方法Web_find，但是在脚本回放的过程中并没有执行。错误现象：在脚本中插入函数Web_find，在脚本中设置文本以及图像的检查点，但是在回放过程中并没有对设置的检查点进行检查，即Web_find失效。错误分析：由于检查功能会消耗一定的资源，因此LoadRunner默认关闭了对文本以及图像的检查，所以在设置检查点后，需要开启检查功能。解决办法：打开运行环境设置对话框进行设置，在“Run-timeSettings”的“InternetProtocol”选项里的“Perference”中勾选“Check”下的“EnableImageandtextcheck”选项。59.并发用户数是什么？跟在线用户数什么关系？并发主要是针对服务器而言，是否并发的关键是看用户操作是否对服务器产生了影响。因此，并发用户数量的正确理解为：在同一时刻与服务器进行了交互的在线用户数量，这种交互既可以是单向的传输数据，也可以是双向的传送数据。并发用户数是指系统运行期间同一时刻进行业务操作的用户数量。该数量取决于用户操作习惯、业务操作间隔和单笔交易的响应时间。使用频率较低的应用系统并发用户数一般为在线用户数的5%左右。使用频率较高的应用系统并发用户数一般为主线用户数的10%左右60.在什么地方设置HTTP页面filter?在runtime_settings中downloadfilter里面进行设置。61.如何设置可以让一个虚拟IP对应到一个Vuser?62.什么是ContentCheck?如何来用？ContentCheck的设置是为了让VuGen检测何种页面为错误页面。如果被测的Web应用没有使用自定义的错误页面，那么这里不用作更改；如果被测的Web应用使用了自定义的错误页面，那么这里需要定义，以便让VuGen在运行过程中检测，服务器返回的页面是否包含预定义的字符串，进而判断该页面是否为错误页面。如果是，VuGen就停止运行，指示运行失败。使用方法：点击在runtimesettings中点击“ContentCheck”，然后新建立一个符合要求的应用程序和规则，设定需要查找的文本和前缀后缀即可使用。63.生成WEB性能图有什么意义？大概描述即可可以很直观的看到，在负载下系统的运行情况以及各种资源的使用情况，可以对系统的性能瓶颈定位、性能调优等起到想要的辅助作用。64.树视图和脚本视图各有什么优点？TreeView的好处是使用户更方便地修改脚本，TreeView支持拖拽，用户可以把任意一个节点拖拽到他想要的地方，从而达到修改脚本的目的。用户可以右键单击节点，进行修改/删除当前函数参数属性，增加函数等操作，通过TreeView能够增加LoadRunner提供的部分常用通用函数和协议相关函数。ScriptView适合一些高级用户，在ScriptView中能够看到一行行的API函数，通过ScriptView向脚本中增加一些其他API函数，对会编程的高手来说很方便"}, "md/summary/计算机网络基础.html": {"url": "md/summary/计算机网络基础.html", "title": "计算机网络基础", "keywords": "", "body": "计算机网络基础1.什么是局域网和广域网局域网（LocalAreaNetwork），简称LAN，是指在某一区域内由多台计算机互联成的计算机组。“某一区域”指的是同一办公室、同一建筑物、同一公司和同一学校等，一般是方圆几千米以内。局域网可以实现文件管理、应用软件共享、打印机共享、扫描仪共享、工作组内的日程安排、电子邮件和传真通信服务等功能。局域网是封闭型的，可以由办公室内的两台计算机组成，也可以由一个公司内的上千台计算机组成。广域网（WideAreaNetwork），简称WAN，是一种跨越大的、地域性的计算机网络的集合。通常跨越省、市，甚至一个国家。广域网包括大大小小不同的子网，子网可以是局域网，也可以是小型的广域网。2.DNS是什么，它是如何工作的？域名解析服务。用于将域名解析为IP，或反和将IP解析为域名。客户机可指定DNS服务器来解析，或用本机hosts文件进行解析。Windows下配置DNS服务器在《搭建Windows测试环境》中有。3.请简述ip地址，网关，子网掩码的含义IP地址是TCP/IP网络中的主机（或称为节点）的惟一地址。IP地址是网络层的逻辑地址缺省网关(DefaultGateway)是指缺省的路由器。只有在不同子网之间通信时，才需要配置缺省网关的IP地址子网(Subnet)是在TCP/IP网络上，用路由器连接的网段，子网掩码(SubnetMask)用来确定IP地址中的网络地址部分。其格式与IP地址相同，也是一组32位的二进制数。4.简述子网掩码的用途子网掩码主要用来判断两个IP地址是否处在同一个局域网当中；子网掩码是由连续的2进制1组成的。子网掩码和IP地址进行按位与运算后，结果一致，表示处于一个局域网当中，如果不一致，表示不再一个局域网当中，需要寻找路由。5.一台计算机的IP是192.168.10.71子网掩码255.255.255.64与192.168.10.201是同一局域网吗？子网掩码不对。不可能出现255.255.255.64的子网掩码。另外，也不能说成“同一局域网”，局域网是针对物理的拓扑结构而言。事实上，我们研究的是否在同一子网的一些IP，往往都是同一个局域网内。6.请简述DNS、活动目录、域的概念DNS：域名服务，作用是将网络域名解析成IP地址；活动目录：微软提供的目录服务的一种，它存储有关网络上的对象信息，并使管理员和用户更方便的查找和使用这类信息；域：网络系统的一个安全边界，在一个域当中，计算机和用户共享一些列的安全信息。7.10M兆宽带是什么意思？理论下载速度是多少？首先我们要搞懂其中的区别，运营商说的10M，完整的单位应该是10Mbps（bps：比特率），而我们讲的下载速度单位是MB，虽然都念兆，但是不一样的。它们之间的换算关系是：1MB=8×1Mbps，换个方式看：1Mbps÷8=128KB，也就是说，运营商称的10M宽带，实际速度是10Mbps÷8=1280KB，约1.25MB。8.什么是IP地址？IP地址是指互联网协议地址（英语：InternetProtocolAddress，又译为网际协议地址），是IPAddress的缩写。IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。9.OSI七层网络模型的划分？物数网传会表应10.TCP和UDP有什么不同？TCP：优点：可靠稳定TCP的可靠体现在TCP在传输数据之前，会有三次握手来建立连接，而且在数据传递时，有确认。窗口。重传。拥塞控制机制，在数据传完之后，还会断开来连接用来节约系统资源。缺点：慢，效率低，占用系统资源高，易被攻击在传递数据之前要先建立连接，这会消耗时间，而且在数据传递时，确认机制。重传机制。拥塞机制等都会消耗大量时间，而且要在每台设备上维护所有的传输连接。然而，每个连接都会占用系统的CPU，内存等硬件资源。因为TCP有确认机制。三次握手机制，这些也导致TCP容易被利用，实现DOS.DDOS.CC等攻击。UDP：优点：快，比TCP稍安全UDP没有TCP拥有的各种机制，是一种无状态的传输协议，所以传输数据非常快，没有TCP的这些机制，被攻击利用的机会就少一些，但是也无法避免被攻击。缺点：不可靠，不稳定因为没有TCP的这些机制，UDP在传输数据时，如果网络质量不好，就会很容易丢包，造成数据的缺失。适用场景：TCP：当对网络质量有要求时，比如HTTP，HTTPS，FTP等传输文件的协议；POP，SMTP等邮件传输的协议UDP：对网络通讯质量要求不高时，要求网络通讯速度要快的场景11.HTTP属于哪一层的协议？HTTP协议属于应用层协议12.HTTP和HTTPS的区别？安全性上的区别：HTTPS：HTTP协议的安全加强版，通过在HTTP上建立加密层，对传输数据进行加密。主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。表现形式：HTTPS站点会在地址栏上显示一把绿色小锁，表明这是加密过的安全网站，如果采用了全球认证的顶级EVSSL证书的话，其地址栏会以绿色高亮显示，方便用户辨认。SEO：在2015年之前百度是无法收录HTTPS页面的，不过自从2015年5月份百度搜索全站HTTPS加密后，就已经可以收录HTTPS了。谷歌则是从2014年起便开始收录HTTPS页面，并且HTTPS页面权重比HTTP页面更高。从SEO的角度来说，HTTPS和HTTP区别不大，甚至HTTPS效果更好。技术层面：如果要说HTTPS和HTTP的区别，最关键的还是在技术层面。比如HTTP标准端口是80，而HTTPS标准端口是443；HTTP无需证书，HTTPS需要CA机构颁发的SSL证书；HTTP工作于应用层，HTTPS工作于传输层。13.cookies和session的区别？cookies:是针对每一个网站的信息，每一个网站只对应一个，其它网站不能访问，这个文件是保存在客户端的，每次你打相应网站，浏览器会查找这个网站的cookies，如果有就会将这个文件起发送出去。cookies文件的内容大致包函这些信息如用户名，密码，设置等。session：是针对每一个用户的，只有客户机访问，程序就会为这个客户新增一个session。session里主要保存的是用户的登录信息，操作信息等。这个session在用户访问结束后会被自动消失（如果超时也会）。14.HTTP的get请求和post请求的区别？在客户端，Get方式在通过URL提交数据，数据在URL中可以看到；POST方式，数据放置在HTMLHEADER内提交。GET方式提交的数据最多只能有1024字节，而POST则没有此限制。安全性问题。使用Get的时候，参数会显示在地址栏上，而Post不会。所以，如果这些数据是中文数据而且是非敏感数据，那么使用get；如果用户输入的数据不是中文字符而且包含敏感数据，那么还是使用post为好。安全的和幂等的。所谓安全的意味着该操作用于获取信息而非修改信息。幂等的意味着对同一URL的多个请求应该返回同样的结果。15.HTTP1.0和HTTP1.1有什么区别HTTP协议老的标准是HTTP/1.0，目前最通用的标准是HTTP/1.1。在同一个tcp的连接中可以传送多个HTTP请求和响应。多个请求和响应可以重叠，多个请求和响应可以同时进行。更加多的请求头和响应头（比如HTTP1.0没有host的字段）.它们最大的区别：在HTTP/1.0中，大多实现为每个请求/响应交换使用新的连接。HTTP1.0规定浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接，服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求。在HTTP/1.1中，一个连接可用于一次或多次请求/响应交换，尽管连接可能由于各种原因被关闭。HTTP1.1支持持久连接，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。一个包含有许多图像的网页文件的多个请求和应答可以在一个连接中传输，但每个单独的网页文件的请求和应答仍然需要使用各自的连接。HTTP1.1还允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著地减少了整个下载过程所需要的时间。16.TCP的连接建立过程，以及断开过程？17.客户端使用DHCP获取IP的过程？发现阶段：即DHCP客户端寻找DHCP服务器的阶段。提供阶段：即DHCP服务器提供IP地址的阶段。选择阶段：即DHCP客户端选择某台DHCP服务器提供的IP地址的阶段。确认阶段：即DHCP服务器确认所提供的IP地址的阶段。18.B/S和C/S的区别b/s代表浏览器和服务器架构；c/s代表客户端和服务器架构网络环境不同（c/s建立在专用的局域网上，b/s建立在广域网上）安全要求不同（c/s必须安装客户端，安全度较高；b/s安全度较低）系统维护不同（c/s升级困难，需要重新安装最新客户端；b/s无缝升级）对系统要求不同（c/s对系统要求较高；b/s对系统要求较低）19.TCP/UDP有哪些区别？TCP-有连接，所以握手过程会消耗资源，过程为可靠连接，不会丢失数据，适合大数据量交换UDP-非可靠连接，会丢包，没有校验，速度快，无须握手过程*TCPUDP是否连接面向连接面向非连接传输可靠性可靠的不可靠的应用场合传输大量数据少量数据速度慢快20.常用的响应码HTTP响应码，也称http状态码(HTTPStatusCode)，反映了web服务器处理HTTP请求状态，每一个响应码都代表了一种服务端反馈的响应状态，标识了本次请求是否成功。我们应该了解常见的响应码代表的状态，通过响应码能够对错误进行排查和定位，这是一个测试的必备技能HTTP响应码通常分为五大类：1XX——信息类（Information），表示收到http请求，正在进行下一步处理，通常是一种瞬间的响应状态2XX——成功类（Successful），表示用户请求被正确接收、理解和处理200（OK）：请求成功。一般用于GET与POST请求201（Created）：已创建。成功请求并创建了新的资源202（Accepted）：3XX——重定向类（Redirection），表示没有请求成功，必须采取进一步的动作301（MovedPermanently）：资源被永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI302（Found）：资源临时移动。资源只是临时被移动，客户端应继续使用原有URI304：用其他策略获取资源4XX——客户端错误（ClientError），表示客户端提交的请求包含语法错误或不能正确执行400（BadRequests）：客户端请求的地址不存在或者包含不支持的参数401（Unauthorized）：未授权，或认证失败。对于需要登录的网页，服务器可能返回此响应403（Forbidden）：没权限。服务器收到请求，但拒绝提供服务404（NotFound）：请求的资源不存在。遇到404首先检查请求url是否正确5XX——服务端错误（ServerError），表示服务器不能正确执行一个正确的请求（客户端请求的方法及参数是正确的，服务端不能正确执行，如网络超时、服务僵死，可以查看服务端日志再进一步解决）500（InternalServerError）：服务器内部错误，无法完成请求503（ServiceUnavailable）：由于超载或系统维护（一般是访问人数过多），服务器无法处理客户端的请求，通常这只是暂时状态"}, "md/summary/逻辑题.html": {"url": "md/summary/逻辑题.html", "title": "逻辑题", "keywords": "", "body": "逻辑题1.烧一根不均匀的绳，从头烧到尾总共需要1个小时。现在有若干条材质相同的绳子，问如何用烧绳的方法来计时一个小时十五分钟呢？第一步：A绳从两头烧，同时B绳只烧一头。30分钟后，A烧完了。第二步：A烧完，同时B绳另一头也点燃，开始两头烧，烧完是15分钟。第三步：再取一根C绳从两头烧，烧完30分钟。三步加起来就是1小时15分钟。2.你有一桶果冻，其中有黄色、绿色、红色三种，闭上眼睛抓取同种颜色的两个。抓取多少个就可以确定你肯定有两个同一颜色的果冻？根据抽屉原理，4个1、第一次就抓取了两个一样颜色。2、第一次抓取的两个颜色不同。那就再抓两个，要么这两个相同，要么有至少一个与第一次有相同。3.如果你有无穷多的水，一个3公升的提捅，一个5公升的提捅，两只提捅形状上下都不均匀，问你如何才能准确称出4公升的水？用5升桶满桶，倒入3升桶中，倒满后大桶里剩2升。把3升桶倒空，把那2升倒入3升桶中。用5升桶满桶再向3升里倒，倒入一升就满，大桶里剩下的是4升。4.一个岔路口分别通向诚实国和说谎国。来了两个人，已知一个是诚实国的，另一个是说谎国的。诚实国永远说实话，说谎国永远说谎话。现在你要去说谎国，但不知道应该走哪条路，需要问这两个人。请问应该怎么问？问其中一人：另外一个人会说哪一条路是通往诚实国的？回答者所指的那条路必然是通往说谎国的。5.12个球一个天平，现知道只有一个和其它的重量不同，问怎样称才能用三次就找到那个球呢？（注意此题并未说明那个球的重量是轻是重，所以需要仔细考虑）12个球：第一次：4，4如果平了：那么剩下的球中取3放左边，取3个好球放右边，称：如果左边重，那么取两个球称一下，哪个重哪个是次品，平的话第三个重，是次品，轻的话同理如果平了，那么剩下一个次品，还可根据需要称出次品比正品轻或者重。如果不平：那么不妨设左边重右边轻，为了便于说明，将左边4颗称为重球，右边4颗称为轻球，剩下4颗称为好球取重球2颗，轻球2颗放在左侧，右侧放3颗好球和一颗轻球。如果左边重，称那两颗重球，重的一个次品，平的话右边轻球次品。如果右边重，称左边两颗轻球，轻的一个次品。如果平，称剩下两颗重球，重的一个次品，平的话剩下那颗轻球次品。13个球：第一次：4，4，如果平了剩5颗球用上面的方法仍旧能找出次品，只是不能知次品是重是轻，如果不平，同上。6.在一天的24小时之中，时钟的时针、分针和秒针完全重合在一起的时候有几次？都分别是什么时间？你怎样算出来的？23次，因为分针要转24圈，时针才能转1圈，而分针和时针重合两次之间的间隔显然&gt;1小时，它们有23次重合机会，每次重合中秒针有一次重合机会，所以是23次重合时间可以对照手表求出，也可列方程求出。7.已知：每个飞机只有一个油箱，飞机之间可以相互加油（注意是相互，没有加油机）一箱油可供一架飞机绕地球飞半圈，问题：为使至少一架飞机绕地球一圈回到起飞时的飞机场，至少需要出动几架飞机？（所有飞机从同一机场起飞，而且必须安全返回机场，不允许中途降落，中间没有飞机场）3架飞机5架次，飞法：ABC3架同时起飞，1/8处，C给AB加满油，C返航，1/4处，B给A加满油，B返航，A到达1/2处，C从机场往另一方向起飞，3/4处，C同已经空油箱的A平分剩余油量，同时B从机场起飞，AC到7/8处同B平分剩余油量，刚好3架飞机同时返航。所以是3架飞机5架次。8.一间囚房里面关押着两个犯人。每天监狱都会为这间囚房提供一罐汤，让这两个犯人自己分。起初，这两个人经常会发生争执，因为他们总是有人认为对方的汤比自己的多。后来他们找到了一个两全其美的办法：一个人分汤，让另一个人先选。于是争端就这么解决了。可是，现在这间囚房里又加进来一个新犯人，现在是三个人来分汤。必须寻找一个新的方法来维持他们之间的和平。该怎么办呢？按：心理问题，不是逻辑问题先让甲分汤，分好后由乙和丙按任意顺序给自己挑汤，剩余一碗留给甲。这样乙和丙两人的总和肯定是他们两人可拿到的最大。然后将他们两人的汤混合之后再按两人的方法再次分汤。9.一张长方形的桌面上放n个一样大小的圆形硬币。这些硬币中可能有一些不完全在桌面内，也可能有一些彼此重叠；当再多放一个硬币而它的圆心在桌面内时，新放的硬币便必定与原先某些硬币重叠。请证明整个桌面可以用4n个硬币完全覆盖要想让新放的硬币不与原先的硬币重叠，两个硬币的圆心距必须大于直径。也就是说，对于桌面上任意一点，到最近的圆心的距离都小于2，所以，整个桌面可以用n个半径为2的硬币覆盖。把桌面和硬币的尺度都缩小一倍，那么，长、宽各是原桌面一半的小桌面，就可以用n个半径为1的硬币覆盖。那么，把原来的桌子分割成相等的4块小桌子，那么每块小桌子都可以用n个半径为1的硬币覆盖，因此，整个桌面就可以用4n个半径为1的硬币覆盖。10.如果29只青蛙在29分钟里捕捉到了29只苍蝇，那么，要在87分钟内捉到87只苍蝇，需要多少只青蛙才行？平均1只青蛙抓一只苍蝇要29分钟，那么87分钟内每只青蛙可以抓3只苍蝇，87只苍蝇只需要87/3=29只青蛙11.一个人花8块钱买了一只鸡，9块钱卖掉了。然后他觉得不划算，花10块钱又买回来了，11块钱卖给了另外一个人，请问他赚了多少钱？2元钱12.A、B、C、D、E五名学生有可能参加计算机竞赛，根据下列条件判断哪些人参加了竞赛？A参加时，B也参加；B和C只有一个人参加；C和D或者都参加，或者都不参加；D和E中至少有一个人参加；如果E参加，那么A和D也都参加。根据条件有可能参加竞赛的人是：C和D。因为C和D参加符合条件（3），由条件（2）知：B不参加，因为B不参加，所以由条件（1）知：A不参加，因为A不参加，D参加，所以由条件（5）知：E不参加。所以有可能参加的是：C和D。13.一天张三的店里来了一位顾客，挑了25元的货。顾客拿出100元，张三没零钱找不开，就到隔壁店里把这100元换成零钱，回来给顾客找了75元的零钱。过一会，李四回来找张三，说刚才的钱是假钱，张三马上给李四换了真钱，请问张三赔了多少？75块钱跟25元的货14.如果20分钟前离上午9点钟的分数钟，等于现在离上午12点的分钟数的3倍，那么现在离上午12点还有多少分钟？（十一点20分）40分钟"}, "md/summary/人力资源.html": {"url": "md/summary/人力资源.html", "title": "人力资源", "keywords": "", "body": "人力资源1.你的测试职业发展是什么？你自认为做测试的优势在哪里？测试经验越多，测试能力越高。所以我的职业发展是需要时间累积的，一步步向着高级测试工程师奔去。而且我也有初步的职业规划，前3年累积测试经验，按如何做好测试工程师的要求自己，不断的更新自己改正自己，做好测试任务。优势在于我对测试坚定不移的信心和热情，虽然经验还不够，但测试需要的基本技能我有信心在工作中得以发挥。2.你找工作时，最重要的考虑因素为何？工作的性质和内容是否能让我发挥所长，并不断成长。3.为什么我们应该录取你？您可以由我过去的工作表现所呈现的客观数据，明显地看出我全力以赴的工作态度。4.请谈谈你个人的最大特色我的坚持度很高，事情没有做到一个令人满意的结果，绝不罢手。5.一个测试工程师应具备那些素质和技能？掌握基本的测试基础理论本着找出软件存在的问题的态度进行测试，即客观吧，不要以挑刺形象出现可熟练阅读需求规格说明书等文档以用户的观点看待问题有着强烈的质量意识细心和责任心良好的有效的沟通方式（与开发人员及客户）具有以往的测试经验能够及时准确地判断出高危险区在何处6.还有问一下你是怎样保证软件质量的，也就是说你觉得怎样才能最大限度地保证软件质量？测试并不能够最大限度的保证软件的质量，软件的高质量是开发和设计出来的，而不是测试出来的，它不仅要通过对软件开发流程的监控，使得软件开发的各个阶段都要按照指定的规程进行，通过对各个阶段产物的评审，QA对流程的监控，对功能及配置的审计来达到开发的最优化。当然测试也是保证软件质量的一个重要方式，是软件质量保证工程的一个重要组成部分。7.为什么选择测试这行？它是一个新兴的行业，有发展潜力，而且很锻炼人，需要掌握更多的技能，比做开发要更难8.为什么值得他们公司雇用？帮助公司提高软件质量和测试部门的技术水平9.如果我雇用你，你能给部门带来什么贡献？分享我的测试经验和测试技能，提高测试部门技术水平10.如何从工作中看出你是个自动自觉的人自动自觉范围太广工作成果工作质量11.你的工作通常能在时限内完成吗。（我想问一下就是她问这个问题的动机是什么）在有足够的资源和合理的工作量的情况下，完全可以按时完成，并能比一般人做的更好12.通常你对于别人批评你会有什么样的反应有错即改，无错勉之13.如果明知这样做不对，你还会依主管的指过去做吗？如果你接到一个客户抱怨的电话，你确知无法解决他的问题，你会怎么处理？弄清楚客户为什么抱怨？是怎么样的问题？如果是客服问题，提交客服部门解决如果是质量问题，分析原因，下一版本改进14.你在五年内的个人目标和职业目标分别是什么？分析这个问题是用来了解你的计划能力的，通过这个问题，面试人同时还可以知道你的目标是否符合企业对你的安排。错误回答我想在将来的某个时候考虑这个问题。如今企业的领导者更换频繁，我认为做太多的个人计划是荒谬可笑的，不是吗？评论这种回答属于令人反感的一类。首先，当有人想了解你的目标时，&quot;将来的某个时候&quot;这种通俗说法并不奏效。其次，认为企业很脆弱，领导者更换频繁，这种说法毫无疑问会令人反感，而且也是不合理的。最后，认为做计划可笑，看不起这个问题，而且反问面试人，这些都注定了这样的求职者最终会失败。正确回答从现在起的五年之内，我希望能够在一个很好的职位上待几年，而且最好有一次晋升，然后就期待着下一步。不管是向上提升，还是在企业内横向调动，对我个人来说，我希望找到一家企业——一家愿意做相互投入的企业——待上一段时间。评论这个问题没有回答得过分具体（那样可能会产生漏洞），而且它表明你有雄心，并且思考过在企业中的成长方式。通过表达横向调动和向上提升的愿望，表明你是一个有灵活性的人。15.你怎样做出自己的职业选择？分析：面试人提出这个问题是为了了解求职者的动机，看看他（她）应聘这份工作是否有什么历史渊源，是否有职业规划，是不是仅仅在漫无目的地申请很多工作。错误回答：我一直都想在企业界工作。自孩提时代起，我就梦想自己至少也要成为大企业的副总裁。评论：除了难以令人相信之外，这种回答还存在一个问题：它表明求职者会对副总裁以下的职位不感兴趣。正确回答：在上大学四年级前的那个夏天，我决定集中精力在某一领域谋求发展。尽管我是学商业的，但是我不知道自己最终会从事哪一行业的工作。我花了一定的时间考虑自己的目标，想清楚了自己擅长做的事情以及想从工作中得到的东西，最后我得出了一个坚定的结论，那就是这个行业是最适合我的。评论：这种回答表明，求职者认真地做过一些计划，缩小了自己的关注点，而且也认准了前进的方向。这种回答还表明，求职者理解个人职业规划的重要性，并且有能力做出认真的个人决策。16.离职时候工资多少？说比现在期望薪资少500元。"}, "md/summary/其他.html": {"url": "md/summary/其他.html", "title": "其他", "keywords": "", "body": "其他1.好的测试工程师应具备的素质？沟通能力、移情能力、技术能力、自信心、外交能力、幽默感、很强的记忆力、耐心、怀疑精神、自我督促、洞察力。2.软件测试给你带来什么样的快乐？测试可以给我带来很多快乐，如果测试出一个项目缺少东西，我会很高兴，因为我对自己的工作有了新的认识，也为公司做了效益；如果测试出一个项目没有问题，我也很高兴，因为同事们都在努力，大家都希望为公司做贡献，这就是一个很强大的团队，这是一件多么另人振奋的事情啊！3.为什么要在一个团队中开展测试工作？因为没有经过测试的软件很难在发布之前知道该软件的质量，就好比ISO质量认证一样，测试同样也需要质量的保证，这个时候就需要在团队中开展软件测试的工作。在测试的过程发现软件中存在的问题，及时让开发人员得知并修改问题，在即将发布时，从测试报告中得出软件的质量情况。软件测试在整个一个团队中占有非常重要的地位，具体来说就是测试是一个发现软件错误的过程，执行软件测试会以最少的人力和时间，系统的找到软件存在的缺陷和错误，建立起开发人员和使用者对软件的信心。4.你在以往的测试工作中都曾经具体从事过哪些工作？其中最擅长哪部分工作？测试从事过web测试，后台测试，客户端软件，进行功能测试，性能测试，编写测试工具，文档的管理等，比较擅长编写测试用例和进行功能测试。5.请介绍一下你的项目从几个部分来说，先项目规模，包括项目代码规模，需求规模、用例规模，工作量，进度，质量和成本，然后是整体的测试流程，然后再是角色与职责，接下来是在项目中自己的特色，比如做得最好的是、遇到最大的困难时（如何解决）、最差的是，最后是心得体会。6.测试过程中，遇到阻塞时，该如何推进？功能基本可以走通但是bug太多因为如果是以此为理由，打回去给开发，理由并不完全站得住。一个是大家对bug多的标准不一致，我们说bug多，开发不一定认可。这个时候我们需要针对bug的情况进行一下分析：bug集中，且可以跟其他模块切开测试发现的bug是集中在整个功能的某一个模块中，该模块与整个功能的其他模块可分割，可以单独测试。如果是整个功能都基本正常，只有其中的一个模块有问题，那么可以先对其他模块进行测试，bug较集中的模块提交给开发重新对代码进行排查，待重新提测后再进行测试，对整体测试时间无影响。bug集中，但是跟其他模块关联性强测试发现的bug是集中在整个功能的某一个模块中，该模块与整个功能的其他模块关系较密切，无法单独测试。对其他模块进行测试，只打回这一个模块给开发，待开发重新代码review后，确认影响范围重新测试。对整体测试时间有影响，但是影响不大，需要在确认测试范围的时候花费一些时间。bug不聚类，多数bug都不是严重问题，关联性不强，bug分散在整个功能的的各个模块，基本是因为整体代码质量不高引起的。但是bug都不是什么严重的问题，集中在UI显示等模块，这个时候测试需要全功能测试，待开发修复完bug后进行修复问题的二轮测试。增加二轮测试，对整体测试时间有影响。bug不聚类，半数bug都是较严重的问题，bug分散在整个功能的的各个模块，基本是因为整体代码质量不高引起的。针对这种情况只能是全部打回去给开发，整体代码review后重新提测。提测时间delay，对整体测试时间有影响。功能实现的与策略不一致有些时候，开发提测，产品也经过验收通过，但是到测试手里一看，实现跟需求明显是有差异的，这个时候应该怎么办？我们能做的，一定是第一时间找产品确认“开发做成这样你知道吗？”，一般会有两种结果。产品认可开发的实现。如果是这种情况，我们那就让产品发需求变更，我们按照变更后的需求对功能进行测试。这种处理方法对整体测试时间基本无影响，只需要增加一个新需求确认的环节。产品对开发的实现不从，一定要改回来。这种情况那就没办法了，打回去重新按照需求实现，然后重新提测吧。提测时间delay，对整体测试时间有影响。出现崩溃等异常完全无法继续测试下去这种情况没什么好讨论的，直接打回去，等开发修复完全后再重新测试。但是前面已经测试过的部分，需要跟开发确认，如果修改后无影响的，可以不必再次从头开始测试。7.你们以前测试的流程是怎样的？测试计划－测试用例设计－测试执行－测试分析报告8.为什么选择测试这行？它是一个新兴的行业，有发展潜力，而且很锻炼人，需要掌握更多的技能，比做开发要更难9.如果时间不够，无法进行充分的测试怎么办？使用风险分析，确定测试的重点。由于很少有机会对一个应用软件进行所有可能的测试（包括所有可能的事件组合、所有的相关性、或者一切可能出错的东西），对大多数软件开发项目来说，利用风险分析是适当的。这需要判断技能、常识、感觉和经验。如果有正当理由，也可采用正式的方法。需要考虑下列因素：对于该项目的用途而言，哪种功能最重要？哪种功能对用户最明显？哪种功能对安全影响最大？哪种功能对用户最有用？对客户来说，该应用软件的哪个部分最重要？在开发过程中，该应用软件的哪个部分可以最先测试？哪一部分代码最复杂，容易导致出现错误？哪一部分的应用程序是在急迫或在惊恐的情况下开发出来的？哪一部分程序与过去项目中引起问题的部分相类似/有关？哪一部分程序与过去项目中需要大量维护的部分相类似/有关？需求和设计的那些部分不清楚或不容易读？开发人员认为在应用软件中哪些部分是高风险的？哪些问题能造成最差的发行？哪些问题最能引起用户抱怨？哪些测试可以容易地覆盖多种功能？哪些测试在覆盖高风险部分的测试时使用时间最少？10.你是否了解以往所工作的企业的软件测试过程？如果了解，请试述在这个过程中都有哪些工作要做？分别由哪些不同的角色来完成这些工作？软件测试部门配合系统分析人员软件需求分析讨论，并根据需求说明书制定《项目测试计划》，编写测试用例，建立测试环境。软件测试人员负责软件开发部门的新产品测试及原有产品的升级测试，负责软件问题解决过程跟踪，负责软件开发文档开发工作的规范化及管理开发部门的产品文档，制作用户手册及操作手册，负责产品的上线测试，监督软件开发过程的执行，提高产品质量。需求人员连同系统分析人员&amp;测试人员开会讨论需求。系统分析人员写出需求分析说明，并连同系统分析人员&amp;测试人员&amp;需求人员开会讨论可行性。系统分析人员写出详细设计说明书，程式人员编码，给出系统流程图。交与测试人员，测试人员给出Bug统计表。11.你所熟悉的软件测试类型都有哪些？请试着分别比较这些不同的测试类型的区别与联系（如功能测试、性能测试……）有功能测试，性能测试，可靠性测试，安全性测试，负载测试，压力测试，安装/卸载测试，启动/停止测试，兼容性测试，互连测试，文档测试，恢复测试，回归测试，可使用性测试，容量测试。功能测试只对软件的功能是否满足用户需求来做测试。性能测试需要和压力和负载测试联合起来。12.你自认为测试的优势在哪里？优势在于我对测试坚定不移的信心和热情，虽然经验还不够，但测试需要的基本技能我有信心在工作中得以发挥。13.你在测试中发现了一个bug，但是开发经理认为这不是一个bug。你应该怎么做？首先，将问题提交到缺陷管理库里面进行备案。然后，要获取判断的依据和标准：根据需求说明书、产品说明、设计文档等，确认实际结果是否与计划有不一致的地方，提供缺陷是否确认的直接依据；如果没有文档依据，可以根据类似软件的一般特性来说明是否存在不一致的地方，来确认是否是缺陷；根据用户的一般使用习惯，来确认是否是缺陷；与设计人员、开发人员和客户代表等相关人员探讨，确认是否是缺陷；合理的论述，向测试经理说明自己的判断的理由，注意客观、严谨，不参杂个人情绪。等待测试经理做出最终决定，如果仍然存在争议，可以通过公司政策所提供的渠道，向上级反映，并由上级做出决定。14.你是如何制定时间进度表的？首先确定三个大的时间段项目开始时间项目结束时间开发转系统测试时间，在根据测试各个阶段的工作量和项目资源制定计划、设计、执行、评估、验收阶段的时间。设计和执行的时间一般较多。15.介绍一下整体项目流程公司将测试分为了五个阶段：计划、设计、执行、验收、评估。在测试计划阶段我们主要工作是编写测试计划对项目做一个整体的规划其中进度的安排、人力物力的分配、总体测试策略的制定和风险的评估比较重要。设计阶段我们主要是编写测试策略和测试用例。在执行阶段，当我们拿到开发转过来的版本以后，首先是安装测试环境，然后执行用例。发现缺陷我们会提交缺陷报告，然后交给开发人员进行修改，之后进行循环测试！至于说具体系统测试会循环多少轮，是根据项目实际情况和版本的质量来决定的。在评估阶段我们主要是编写测试总结报告，其中对测试过程的总结和版本质量的评价要体现在测试总结报告里面最后就是软件的验收，验收阶段我们会和客户一同进行产品的最后检查！16.你是如何制定测试过程中的时间进度表的？确定项目开始、截止和转测试的时间，然后根据我们的经验去合理划分这五个阶段的时间，在设计和执行阶段比重比较大17.测试工作进行到一半时，发现时间不够，你是如何处理的？先看加班、加人能不能解决，如果不行就找重点，提出优先级高的用例执行向上级申请加派测试员和客户协商，推迟产品的发布时间18.怎样保证你所负责的模块通过了测试？首先是了解用户的需求，设计好的测试用例，严格的进行用例的评审，认真的执行测试用例，对自己提交的Bug进行详细的描述。反复测试增强测试的准确性，通过冒烟回归随机测试挖掘缺陷提高测试工作质量，把各个模块整体运行发现未曾出现的错误，完善测试用例。19.软件测试人员和测试组长的职责分工普通测试人员：创作相关的测试计划和测试案例识别可自动测试的区域参与组内的测试计划和测试案例以及测试脚本分析工作手动或自动测试按照需求规格说明查证并验证各项功能发现并报告bug，跟踪其状态初步评估bug对产品其他部分的影响测试组长：确定测试的策略评估bug对用户的影响跟踪关键bug状态管理测试工作和对象的资源参与面试新人交流状态和存在问题，并驱动问题的解决促进组内的交流20.如果你是测试组长你是如何对项目及组员进行管理的？首先要充分了解要测试的项目，参考开发文档同时与开发人员及时沟通，要对产品十分的熟悉。员工方面多与员工沟通，了解员工的擅长的工作，根据员工擅长的工作进行分配，能力强的多分配，这样可以说测试工作快速稳定的进行！最终的测试工作就会一帆风顺！21.什么时候开始搭建测试环境？由谁搭建？如何进行产品的集成？测试开始之前搭建测试环境由测试工程师搭建，产品的集成由开发人员完成22.你所做的项目中采用了哪些测试方法？进行回归测试吗？功能测试界面测试安装测试性能测试进行了回归测试，一般在缺陷修复之后进行验证的过程中进行回归测试23.上级如何检查你的工作？查看项目周报开周例会24.QA是如何检查你的工作的？检查项目过程及文档参与周例会25.在你所做的项目中有需要测试的项目过程吗？有，请介绍有啊，我们在XXX项目中都进行了测试。在测试过程中，我们先根据用户需求进行测试计划，编写测试用例，在开发部完成项目并进行产品集成，交由配置管理员纳入配置库之后，我们从配置库签出安装包，搭建测试环境，开始进行测试，测试过程中我们提交缺陷，开发人员修复缺陷，直到所有缺陷修改完毕，做测试总结。最终完成测试过程。26.怎样保障你所负责的模块通过了测试？仔细分析需求，制定测试计划与策略，详细编写测试用例因实际情况合理修改并执行，进过严格的评审，总结出真实测试报告。首先在设计阶段要保证所设计的用例的覆盖率，发现缺陷的能力；在提交缺陷报告时要对缺陷进行详细确切的描述，方便开发人员进行修复；修复后认真进行回归测试，直到产品符合用户需求。通过反复测试来增强测试的准确性还可以通过冒烟、回归、随机测试来挖掘冒烟发现的缺陷，提高测试工作的质量把各个模块整体运行时来发现未曾出现的错误完善测试用例27.你是如何了解到你说项目中的成员？在项目立项公告中28.是否成立了独立的测试组？测试人员在项目中测试的职责？是。验证需求是否正确实现、发现软件中存在的缺陷、确认软件缺陷被修复。29.测试结果分析如何？如何产生和被记录？在项目测试之后，我们对缺陷进行了统计分析，并生成了测试报告文档。在此次项目中所有的缺陷都已修复并关闭。所有的缺陷都记录在缺陷管理工具中，并导出了缺陷报告30.认为软件测试过程中较常见的困难是什么？如何有效克服这些困难？（根据自己实际测试中遇到的情况来写的）Bug的重现问题：有些Bug只是偶尔出现的，根本就不知道具体需要什么条件才能重现Bug。解决方法：将不能重现的Bug，利用截图的方式记录下来。并说明一系列的操作步骤Bug的更新：旧的Bug修改好之后，很多时候会引发更多Bug的出现。解决方法：对更新的功能模块重点的测试之后，再重新测试和更新的功能密切的模块，会不会产生新的Bug与开发人员的沟通和对业务流程理解的分歧，经常缺少需求文档。解决方法：根据需求说明书和Bug情况，多多和开发人员进行交流31.在实际项目中你是如何做测试计划？在做计划之前，我们要先了解这个项目的大致情况：比如测试的是什么产品？是新程序还是维护升级的？是独立程序还是由多个小程序组成的？产品的质量目标是什么？产品的功能需求和性能指标必须得到所有人的一致认可。为了深入了解项目，测试人员应该及早介入项目，对工作量的大小、时间点的安排作出了解。32.你所熟悉的测试用例设计方法都有哪些？请分别以具体的例子来说明这些方法在测试用例设计工作中的应用等价类划分边界值分析法错误推测法因果图方法有黑盒和白盒两种测试种类，黑盒有等价类划分法，边界分析法，因果图法和错误猜测法。白盒有逻辑覆盖法，循环测试路径选择，基本路径测试。例子：在一次输入多个条件的完整性查询中。利用等价类划分法则和边界分析法则，首先利用等价类划分法，可以一个或多个结果是OK的测试用例，然后确认多个NG的测试用例，然后利用边界值分析法，可以对结果分别是OK和NG的测试用例进行扩展和补充。33.你认为做好测试用例设计工作的关键是什么？明确测试的目标，增强测试计划的实用性坚持“5W”规则，明确内容与过程，'what''why''when''where''how'采用评审和更新机制，保证测试计划满足实际需求分别创建测试计划与测试详细规格、测试用例盒法用例设计的关键同样也是以较少的用例覆盖模块输出和输入接口。不可能做到完全测试，以最少的用例在合理的时间内发现最多的问题34.在你以往的工作中，一条软件缺陷（或者叫Bug）记录都包括哪些内容？如何提交高质量的软件缺陷（Bug）记录？检测时间，系统环境，硬体环境，严重程度，程式版本，确认人，功能模块，问题描述，详细操作步骤，是否会重现。问题描述和详细操作步骤要尽可能的详细。Bug应该尽量用书面语，对与严重程度比较高的缺陷要在相同环境下在测试一遍。35.你在五年内的个人目标和职业目标分别是什么？从现在起的五年之内，我希望能够在一个很好的职位上待几年，而且最好有一次晋升，然后就期待着下一步。不管是向上提升，还是在企业内横向调动，对我个人来说，我希望找到一家企业——一家愿意做相互投入的企业——待上一段时间。36.怎样做出自己的职业选择？在上大学四年级前的那个夏天，我决定集中精力在某一领域谋求发展。尽管我是学商业的，但是我不知道自己最终会从事哪一行业的工作。我花了一定的时间考虑自己的目标，想清楚了自己擅长做的事情以及想从工作中得到的东西，最后我得出了一个坚定的结论，那就是这个行业是最适合我的。37.离职原因每次面试必问的问题大概就是离职原因，建议不要提到上家公司不好或者是领导不好这些比较消极的原因，可以给面试官一些无关痛痒的原因比如想找一个离家近的公司或者因为搬家了上一家公司离家太远不太方便等。不管你离职的真正原因是什么都要回答积极的方面。38.面试官一般会问，您还有什么想问的吗？一般分几种情况：第一种是双方满意，先表示感谢，然后积极主动的提问，比如，确认是否有复试及时间，刚才面试中自己有哪些不足（表现你的上进心）第二种情况是双方感觉一般般，自己感觉很low,基本的套路是，先表示感谢，坦白地说对自己今天表现不是非常满意，还可以表现得更好，还想得到这个机会，询问面试官能否给一些建议（表现出你的学习意愿）第三种情况是面试情况非常糟糕，这种情况下，也要先表示感谢。基本的思路是，分两种情况面试官人不错技术很好，表达你的学习意愿和想进公司的意愿面试官技术不太好，但是人很差，不尊重人，什么也不说，直接走人"}, "md/常规面试题/index.html": {"url": "md/常规面试题/index.html", "title": "常规面试题", "keywords": "", "body": "常规面试题"}, "md/常规面试题/0001.html": {"url": "md/常规面试题/0001.html", "title": "面试题 0001", "keywords": "", "body": "题目你在测试中发现了一个bug，但是开发经理认为这不是一个bug，你应该怎样解决。点我看答案首先，将问题提交到缺陷管理库里面进行备案。然后，要获取判断的依据和标准：根据需求说明书、产品说明、设计文档等，确认实际结果是否与计划有不一致的地方，提供缺陷是否确认的直接依据；如果没有文档依据，可以根据类似软件的一般特性来说明是否存在不一致的地方，来确认是否是缺陷；根据用户的一般使用习惯，来确认是否是缺陷；与设计人员、开发人员和客户代表等相关人员探讨，确认是否是缺陷；合理的论述，向测试经理说明自己的判断的理由，注意客观、严谨，不参杂个人情绪。等待测试经理做出最终决定，如果仍然存在争议，可以通过公司政策所提供的渠道，向上级反映，并有上级做出决定。"}, "md/常规面试题/0002.html": {"url": "md/常规面试题/0002.html", "title": "面试题 0002", "keywords": "", "body": "题目给你一个网站，你如何测试？点我看答案首先，查找需求说明、网站设计等相关文档，分析测试需求。制定测试计划，确定测试范围和测试策略，一般包括以下几个部分：功能性测试界面测试性能测试数据库测试安全性测试兼容性测试设计测试用例：功能性测试可以包括，但不限于以下几个方面：链接测试。链接是否正确跳转，是否存在空页面和无效页面，是否有不正确的出错信息返回等。提交功能的测试。多媒体元素是否可以正确加载和显示。多语言支持是否能够正确显示选择的语言等。界面测试可以包括但不限于一下几个方面：页面是否风格统一，美观页面布局是否合理，重点内容和热点内容是否突出控件是否正常使用对于必须但为安装的空间，是否提供自动下载并安装的功能文字检查性能测试一般从以下两个方面考虑：压力测试负载测试强度测试数据库测试要具体决定是否需要开展。数据库一般需要考虑连结性，对数据的存取操作，数据内容的验证等方面。安全性测试：基本的登录功能的检查是否存在溢出错误，导致系统崩溃或者权限泄露相关开发语言的常见安全性问题检查，例如SQL注入等。如果需要高级的安全性测试，确定获得专业安全公司的帮助，外包测试，或者获取支持兼容性测试，根据需求说明的内容，确定支持的平台组合：浏览器的兼容性操作系统的兼容性软件平台的兼容性数据库的兼容性开展测试，并记录缺陷。合理的安排调整测试进度，提前获取测试所需的资源，建立管理体系（例如，需求变更、风险、配置、测试文档、缺陷报告、人力资源等内容）。定期评审，对测试进行评估和总结，调整测试的内容。"}, "md/常规面试题/0003.html": {"url": "md/常规面试题/0003.html", "title": "面试题 0003", "keywords": "", "body": "题目在搜索引擎中输入汉字就可以解析到对应的域名，请问如何用LoadRunner进行测试。点我看答案建立测试计划，确定测试标准和测试范围设计典型场景的测试用例，覆盖常用业务流程和不常用的业务流程等根据测试用例，开发自动测试脚本和场景：录制测试脚本新建一个脚本（Web/HTML协议）点击录制按钮，在弹出的对话框的URL中输入”about:blank”。在打开的浏览器中进行正常操作流程后，结束录制。调试脚本并保存。可能要注意到字符集的关联。设置测试场景针对性能设置测试场景，主要判断在正常情况下，系统的平均事务响应时间是否达标针对压力负载设置测试场景，主要判断在长时间处于满负荷或者超出系统承载能力的条件下，系统是否会崩溃。执行测试，获取测试结果，分析测试结果"}, "md/常规面试题/0004.html": {"url": "md/常规面试题/0004.html", "title": "面试题 0004", "keywords": "", "body": "题目一台客户端有三百个客户与三百个客户端有三百个客户对服务器施压，有什么区别？点我看答案300个用户在一个客户端上，会占用客户机更多的资源，而影响测试的结果。线程之间可能发生干扰，而产生一些异常。300个用户在一个客户端上，需要更大的带宽。IP地址的问题，可能需要使用IPSpoof来绕过服务器对于单一IP地址最大连接数的限制。所有用户在一个客户端上，不必考虑分布式管理的问题；而用户分布在不同的客户端上，需要考虑使用控制器来整体调配不同客户机上的用户。同时，还需要给予相应的权限配置和防火墙设置。"}, "md/常规面试题/0005.html": {"url": "md/常规面试题/0005.html", "title": "面试题 0005", "keywords": "", "body": "题目软件都有多少种分类？点我看答案根据功能的不同，电脑软件可以粗略地分成四个层次：最贴近电脑硬件的是一些小巧的软件。它们实现一些最基本的功能，通常固化在只读存储器芯片中，因此称为固件。系统软件包括操作系统和编译器软件等。系统软件和硬件一起提供一个平台。它们管理和优化电脑硬件资源的使用。支持软件。包括图形用户界面、软件开发工具、软件评测工具、数据库管理系统、中间件等。应用软件种类最多，包括办公软件、电子商务软件、通信软件、行业软件，游戏软件等等。"}, "md/常规面试题/0006.html": {"url": "md/常规面试题/0006.html", "title": "面试题 0006", "keywords": "", "body": "题目什么是测试用例？什么是测试脚本？两者的关系是什么？点我看答案为实施测试而向被测试系统提供的输入数据、操作或各种环境设置以及期望结果的一个特定的集合。测试脚本是为了进行自动化测试而编写的脚本。测试脚本的编写必须对应相应的测试用例"}, "md/常规面试题/0007.html": {"url": "md/常规面试题/0007.html", "title": "面试题 0007", "keywords": "", "body": "题目简述什么是静态测试、动态测试、黑盒测试、白盒测试、α测试、β测试点我看答案静态测试是不运行程序本身而寻找程序代码中可能存在的错误或评估程序代码的过程。动态测试是实际运行被测程序，输入相应的测试实例，检查运行结果与预期结果的差异，判定执行结果是否符合要求，从而检验程序的正确性、可靠性和有效性，并分析系统运行效率和健壮性等性能。黑盒测试一般用来确认软件功能的正确性和可操作性，目的是检测软件的各个功能是否能得以实现，把被测试的程序当作一个黑盒，不考虑其内部结构，在知道该程序的输入和输出之间的关系或程序功能的情况下，依靠软件规格说明书来确定测试用例和推断测试结果的正确性。白盒测试根据软件内部的逻辑结构分析来进行测试，是基于代码的测试，测试人员通过阅读程序代码或者通过使用开发工具中的单步调试来判断软件的质量，一般白盒测试由程序员在开发过程中来实现。α测试是由一个用户在开发环境下进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的受控测试，Alpha测试不能由程序员或测试员完成。β测试是软件的多个用户在一个或多个用户的实际使用环境下进行的测试。开发者通常不在测试现场，Beta测试不能由程序员或测试员完成。"}, "md/常规面试题/0008.html": {"url": "md/常规面试题/0008.html", "title": "面试题 0008", "keywords": "", "body": "题目软件质量保证体系是什么？国家标准中与质量保证管理相关的几个标准是什么？他们的编号和全称是什么？点我看答案来自Wikipedia对SQA的定义，软件质量保证（SQA）：SoftwareQualityAssurance(SQA)consistsofthesoftwareengineeringprocessesandmethodsusedtoensurequality.SQAencompassestheentiresoftwaredevelopmentprocess,whichmayincludeprocessessuchasreviewingrequirementsdocuments,sourcecodecontrol,codereviews,changemanagement,configurationmanagement,releasemanagementandofcourse,softwaretesting.SQA由一套软件工程过程和方法组成，以保证（软件的）质量。SQA贯穿整个软件开发过程，（它）应包括需求文档评审、代码控制、代码评审、变更管理、配置管理、版本管理和软件测试。国家标准：GB/T8567-2006计算机软件文档编制规范GB/T11457-2006信息技术软件工程术语GB/T16260.1-2006软件工程　产品质量第1部分：质量模型GB/T16260.2-2006软件工程　产品质量第2部分：外部度量GB/T16260.3-2006软件工程　产品质量第3部分：内部度量GB/T16260.4-2006软件工程产品质量第4部分：使用质量的度量GB/Z20156-2006软件工程　软件生成周期过程　用于项目管理的指南GB/T20157-2006信息技术软件维护GB/T20158-2006信息技术　软件生成周期过程　配置管理"}, "md/常规面试题/0009.html": {"url": "md/常规面试题/0009.html", "title": "面试题 0009", "keywords": "", "body": "题目软件产品质量特性是什么？点我看答案功能性：适应性、准确性、互操作性、依从性、安全性。可靠性：成熟性、容错性、以恢复性。可使用性：易理解性、易学习性、易操作性。效率：时间特性、资源特性。可维护性：易分析性、易变更性、稳定性、易测试性。可移植性：适应性、易安装性、遵循性、易替换性。"}, "md/常规面试题/0010.html": {"url": "md/常规面试题/0010.html", "title": "面试题 0010", "keywords": "", "body": "题目软件测试的原则与策略是什么？点我看答案软件测试的原则：教材的说法：软件测试应尽早执行，并贯穿于整个软件生命周期软件测试应追溯需求测试应由第三方来构造穷举测试是不可能的，要遵循Good-enough原则必须确定预期输出（或结果）必须彻底检查每个测试结果充分注意测试中的群集现象缺陷的二八定理严格执行测试计划，排除测试的随意性注意合法合理的输入，也要注意非法的非预期的输入检查程序是否是否做了不该做的测试应从小规模开始，逐步转向大规模反复使用同样的测试会使软件具有抵抗力关注缺陷的修复另一种说法：应当把尽早和不断地测试作为开发者的座右铭。程序员应该避免检查自己的程序，测试工作应该由独立的专业的软件测试机构来完成。设计测试用例时，应该考虑到合法的输入和不合法的输入，以及各种边界条件，特殊情况下要制造极端状态和意外状态，比如网络异常中断、电源断电等情况。一定要注意测试中的错误集中发生现象，这和程序员的编程水平和习惯有很大的关系。对测试错误结果一定要有一个确认的过程。一般有A测试出来的错误，一定要有一个B来确认，严重的错误可以召开评审会进行讨论和分析。制定严格的测试计划，并把测试时间安排得尽量宽松，不要希望在极短的时间内完成一个高水平的测试。回归测试的关联性一定要引起充分的注意，修改一个错误而引起更多错误出现的现象并不少见。妥善保存一切测试过程文档，意义是不言而喻的，测试的重现性往往要靠测试文档。软件测试策略：在一定的软件测试标准、测试规范的指导下，依据测试项目的特定环境约束而规定的软件测试的原则、方式、方法的集合。"}, "md/常规面试题/0011.html": {"url": "md/常规面试题/0011.html", "title": "面试题 0011", "keywords": "", "body": "题目结构化系统测试和功能性系统测试分别采用了哪些方法和技术？点我看答案结构化系统测试技术：用于验证所开发的系统及程序的运行情况。目标是要确保产品设计在结构上合理，功能上正确。为确定实现的配置及其各功能共同作用以完成特定任务提供了一种机制。结构化测试技术由以下几种：压力测试：确定系统以期望的容量执行。压力测试技术用于检查系统面对意外情况下的大数据量时是否可以正常运行。所涉及的方面包括输入事务、内部表、磁盘空间、输出、通信、计算机容量以及人机交互等。当应用系统所能正常处理的工作量并不确定时需要使用压力测试。压力测试意图通过对系统施加超负载事务量来达到破坏系统的目的。弱点在于准备测试的时间与在测试的实际执行过程中所消耗的资源数量都非常之大，通常在应用程序投入使用之前这种技术是无法进行的。执行测试：系统能达到期望的熟练性。举例：事务轮转时间充分；软硬件使用良好。执行测试技术用于检查系统是否达到了预期在产品状态下的成熟度。执行测试可以验证系统的响应时间、轮转时间及设计性能。在开发过程的早期就应该进行执行测试，尽早制定已经完成的系统没有达到性能指标是非常有价值的。在关键时间点进行。关键时间点指的是当前的结果会影响甚至改变系统结构的时间点。恢复测试：系统失效之后可以恢复到可操作状态。举例：引入失败；评估备份数据的充分性。恢复测试技术用于确保系统在经历灾难后可以继续正常运行，它不仅可以验证恢复过程，而且可以验证过程各组件的有效性。当用户认为系统操作的连续性对于其所涉及领域的某些功能至关重要时，需要进行恢复测试。操作测试：系统以正常操作状态执行。举例：确定系统可以依据文档进行运行；JCL（工作控制语言）充分。操作测试技术主要用于检查系统在正常的操作状态下是否可以执行。操作测试可以与其它测试联合执行。任何应用程序在成为产品之前都应进行操作测试。（与过程的）一致性测试：系统的开发与标准和规程相一致。举例：按标准执行；文档完整。一致性测试技术用于验证应用程序的开发是否与信息技术指标、过程及准则相一致。一致性测试最有效的方法是过程审查。系统开发标准和过程的一致性程度依赖于管理层对于所需遵循的特定过程和执行标准的重视程度。安全性测试：根据组织的重要性对系统进行保护。举例：访问拒绝；规程适当。安全性测试技术用于评价保护性程序及安全对策的充分性。安全性缺陷不如其它类型的缺陷那么明显。安全性测试是测试过程中高度专业化的部分。分物理安全性（针对利用物理方法收集信息的手段）和逻辑安全性（针对使用计算机处理和通信能力进行非法活动信息的手段）。当系统保护信息和资产对于组织来说意义重大时，需要进行安全性测试。功能性系统测试用于确保系统需求与定义都得到了满足。该过程通常包含创建用于评价应用程序正确性的测试条件。用于执行功能测试的几种测试技术包括：需求测试：系统按制定方式执行。举例：证明系统需求；与政策、规则相一致。需求测试技术验证系统是否正确执行其功能，并且能保证在相当长的一段时间内保持其正确性。需求测试的执行主要通过执行创建的测试条件以及功能检查单来完成，通过需求得到测试条件，然后以类似于SDLC这种特定的方式表现，生成用于评价实现的应用系统的测试数据。任何应用程序都应该对需求进行测试，此过程应该开始于需求阶段，并一直持续到系统运行和维护阶段。回归测试：验证系统中没有改变的部分仍能正确运行。举例：未变更的部分正常运行；未变更的人工规程正确。回归测试技术对已经测试过的部分进行重新测试，以保证它们在应用程序其它部分发生变更之后仍能正常运行。当变更会对应用程序中没有变更的部分产生高风险的影响时需要进行回归测试。错误处理测试：错误可以得到防止或检测，并被修复。举例：将错误引入测试；错误的再次注入。人工系统与自动系统之间差别的特点之一就是预定义的错误处理特性。错误处理测试技术用于检查应用系统正确处理发生异常的能力。错误处理测试需要一组知识丰富的人员来预见应用系统可能发生的错误。它是测试错误的引入、错误的处理，控制条件以及条件的再次正确输入。在系统整个生命周期中都应该进行错误测试。在开发过程中，应该识别错误带来的问题并且采取相应的措施将错误减少到可以接受的程度。人工支持测试：人机交互有效。举例：具备人工规程；人员接受过培训。人工支持测试技术主要包括人员在准备数据以及使用来源于自动程序数据的过程中执行所有功能。在生命周期的全过程都应该验证人工系统功能的正确性。系统间测试：数据可以正确地在系统间传递。举例：系统间参数变化；系统间文档更新。系统间测试技术用于保证应用程序间相互管理的正确性。系统间测试的一个最好的工具是集成测试工具，它允许在产品环境下进行测试，可以以最小的代价测试系统间的耦合性。在应用系统间的参数发生变更时需要进行系统间的测试。测试的程度和类型依赖于与出错的参数相关联的风险情况。控制测试：将系统风险控制降低到可以接受的级别。举例：文件一致性规程正常；人工控制正确。控制测试技术包括数据确认、文件完整性控制、评审追踪、备份和恢复、文档，以及与系统完整性相关的其它方面。主要用于确保对系统特定功能的检查。可以用于控制测试的一个方法是生成风险矩阵。控制测试是系统测试中的一个完整的部分，占测试时间的很大比例。平行测试：发现原系统与新系统之间的意外差异。举例：原系统与新系统一致；原系统仍然可以工作。平行测试技术用于检查新应用程序的结果是否与原来的应用程序或者上一版本应用程序的处理相一致。它执行冗余处理以保证新版本或者新应用程序执行的正确性；给出同一应用程序不同版本之间一致的和不一致的地方。平行测试可以对整个应用程序进行，也可对应用程序的一部分进行。当不能确定新应用程序处理的正确性，或者当新旧版本的应用程序非常类似时，需要进行平行测试。"}, "md/常规面试题/0012.html": {"url": "md/常规面试题/0012.html", "title": "面试题 0012", "keywords": "", "body": "题目软件测试分为几个阶段各阶段的测试策略和要求是什么？点我看答案软件测试按阶段划分可以分为单元测试、集成测试、系统测试和《验收测试》（不一定有）几个阶段单元测试测试策略：自顶向下的单元测试策略方法：先对最顶层的基本单元进行测试，把所有调用的单元做成桩模块。然后再对第二层的基本单元进行测试，使用上面已测试的单元做驱动模块。依此类推直到测试完所有基本单元。优点：在集成测试前提供早期的集成途径。在执行上和详细设计的顺序一致。不需要开发驱动模块。缺点：随着测试的进行，测试过程越来越复杂，开发和维护成本增加。总结：比孤立单元测试的成本高很多，不是单元测试的一个好的选择。自底向上的单元测试策略方法：先对最底层的基本单元进行测试，模拟调用该单元的单元做驱动模块。然后再对上面一层进行测试，用下面已被测试过的单元做桩模块。依此类推，直到测试完所有单元。优点：在集成测试前提供系统早期的集成途径。不需要开发桩模块。缺点：随着测试的进行，测试过程越来越复杂。总结：比较合理的单元测试策略，但测试周期较长。孤立单元测试策略方法：不考虑每个单元与其它单元之间的关系，为每个单元设计桩模块或驱动模块。每个模块进行独立的单元测试。优点：简单、容易操作，可达到高的结构覆盖率。缺点：不提供一种系统早期的集成途径。总结：最好的单元测试策略。集成测试的测试策略：大爆炸集成优点：可以迅速完成集成测试；并且只要极少数的驱动和桩模块；用例也是最少的；简单；资源利用率高缺点：一次试运行成功的可能性不大，问题定位和修改比较困难，许多接口错误很容易躲过测试。适应于一个维护型项目或被测试系统较小自顶向下集成优点：较早地验证了主要控制和判断点；按深度优先可以首先实现和验证一个完整的软件功能；功能较早证实，带来信心；只需一个驱动，减少驱动器开发的费用；支持故障隔离。缺点：柱的开发量大；底层验证被推迟；底层组件测试不充分。适应于产品控制结构比较清晰和稳定；高层接口变化较小；底层接口未定义或经常可能被修改；产口控制组件具有较大的技术风险，需要尽早被验证；希望尽早能看到产品的系统功能行为。自底向上集成优点：对底层组件行为较早验证；工作最初可以并行集成，比自顶向下效率高；减少了桩的工作量；支持故障隔离。缺点：驱动的开发工作量大；对高层的验证被推迟，设计上的错误不能被及时发现。适应于底层接口比较稳定；高层接口变化比较频繁；底层组件较早被完成。三明治集成优点：集合了自顶向下和自底向上两种策略的优点缺点：中间层测试不充分适应于大部分软件开发项目基干集成优点：具有三明治集成的优点，更适合于大型复杂项目的集成。缺点：必须对系统的结构和相互依存性进行仔细的分析；驱动和桩开发量大；局部采用了大爆炸的策略，有些接口可能测试不充分。嵌入式系统中常用分层集成适应于有明显层次关系的系统基于功能的集成优点：优先验证关键功能的正确性；减少驱动的开发；进度要快。缺点：对接口测试不充分；有较大的冗余测试。基于消息的集成优点：优先验证关键消息的正确性；减少驱动的开发；进度要快。缺点：对接口测试不充分；有较大的冗余测试。基于风险的集成优点：最具有风险的组件最早进地验证，有助于系统的快速稳定。缺点：需要对各组件的风险有一个清晰的分析。基于进度的集成优点：具有较高的并行度；能够有效缩短项目的开发进度。缺点：桩和驱动工作量较大；有些接口测试不充分；有些测试重复和浪费。系统测试的测试策略：数据和数据库完整性测试功能测试用户界面测试性能评测负载测试强度测试容量测试安全性和访问控制测试故障转移和恢复测试配置测试安装测试加密测试可用性测试版本验证测试文档测试"}, "md/常规面试题/0013.html": {"url": "md/常规面试题/0013.html", "title": "面试题 0013", "keywords": "", "body": "题目面向对象的测试用例设计有几种方法？如何实现？点我看答案Berard提出了一些测试用例的设计方法，主要原则包括：每个测试用例应当给予特殊的标识，并且还应当与测试的类有明确的联系。测试目的应当明确。应当为每个测试用例开发一个测试步骤列表。这个列表应包含以下一些内容：列出所要测试对象的专门说明。列出将要作为测试结果运行的消息和操作。列出测试对象可能发生的例外情况。列出外部条件（即为了正确对软件进行测试所必须有的外部环境的变化）。列出为了帮助理解和实现测试所需要的附加信息。主要方法：基于故障的测试基于故障测试也可以用于组装测试，组装测试可以发现消息联系中可能的故障。可能的故障一般为意料之外的结果、错误地使用了操作/消息、不正确引用等。为了确定由操作（功能）引起的可能故障必须检查操作的行为。这种方法除用于操作测试外，还可用于属性测试，用以确定其对于不同类型的对象行为是否赋予了正确的属性值。因为一个对象的属性是由其赋予属性的值定义的。基于脚本的测试基于脚本的测试主要关注用户需要做什么，而不是产品能做什么，即从用户任务（使用用例）中找出用户要做什么及去执行。这种基于脚本的测试有助于在一个单元测试情况下检查多重系统。所以基于脚本测试用例测试比基于故障测试不仅更实际（接近用户），而且更复杂一点。OO类的随机测试如果一个类有多个操作（功能），这些操作（功能）序列有多种排列。而这种不变化的操作序列可随机产生，用这种可随机排列的序列来检查不同类实例的生存史，就叫随机测试。类层次的分割测试这种测试可以减少用完全相同的方式检查类测试用例的数目。这很像传统软件测试中的等价类划分测试。分割测试又可分三种。基于状态的分割。按类操作是否改变类的状态来分割（归类）。基于属性的分割。按类操作所用到的属性来分割（归类）。基于类型的分割。按完成的功能分割（归类）。由行为模型（状态、活动、顺序和合作图）导出的测试状态转换图（STD）可以用来帮助导出类的动态行为的测试序列，以及这些类与之合作的类的动态行为测试序列。"}, "md/常规面试题/0014.html": {"url": "md/常规面试题/0014.html", "title": "面试题 0014", "keywords": "", "body": "题目在软件测试各个阶段通常完成什么工作？各个阶段的结果文件是什么？包括什么内容？点我看答案单元测试阶段。各独立单元模块在与系统地其他部分相隔离的情况下进行测试，单元测试针对每一个程序模块进行正确性校验，检查各个程序模块是否正确地实现了规定的功能。生成单元测试报告，提交缺陷报告。集成测试阶段。集成测试是在单元测试的基础上，测试在将所有的软件单元按照概要设计规格说明的要求组装成模块、子系统或系统的过程中各部分工作是否达到或实现相应技术指标及要求的活动。该阶段生成集成测试报告，提交缺陷报告。系统测试阶段。将通过确认测试的软件，作为整个给予计算机系统的一个元素，与计算机硬件、外设、某些支持软件、数据和人员等其他系统元素结合在一起，在实际运行环境下，对计算机系统进行全面的功能覆盖。该阶段需要提交测试总结和缺陷报告。"}, "md/常规面试题/0015.html": {"url": "md/常规面试题/0015.html", "title": "面试题 0015", "keywords": "", "body": "题目介绍一下整体项目流程点我看答案搭建缺陷管理的环境和测试环境以及配置管理的环境搭建；编写测试计划；设计测试用例；编写测试用例；测试用例的评审；执行测试；缺陷管理；测试报告的输出"}, "md/常规面试题/0016.html": {"url": "md/常规面试题/0016.html", "title": "面试题 0016", "keywords": "", "body": "题目在实际项目中你是如何做测试计划点我看答案对客户提供的或需求分析人员编写的用户需求文档或需求规格说明书进行分析，提炼出测试要点；根据测试要点编写测试用例。由评审组对测试用例进行评审--修改--再次评审--初步定稿执行测试按照测试用例对系统进行功能验证及客户的需求验证将测试过程中产生的Bug录入缺陷管理系统新版本发布后，对本次版本新增加的功能以及开发人员修正的Bug进行回归测试根据项目需要提交测试报告。"}, "md/常规面试题/0017.html": {"url": "md/常规面试题/0017.html", "title": "面试题 0017", "keywords": "", "body": "题目你是如何制定测试过程中的时间进度表的点我看答案根据项目的需求、开发周期、开发人员的开发进度等时间安排来制定一个测试时间进度初稿，并将测试时间进度表交与整个项目团队成员大家一起讨论和分析，最终和所有人达成共识制定出一个大家都可以执行的测试时间进度表。时间表中包括了开发人员提交功能或功能模块的时间，以及为了更好的执行测试，配合测试人员进行功能培训的时间，以及测试执行时间等，都详细的写到Word中，并按照这个时间进度表来执行项目的测试任务。"}, "md/常规面试题/0018.html": {"url": "md/常规面试题/0018.html", "title": "面试题 0018", "keywords": "", "body": "题目测试计划都包括那些项点我看答案测试计划目标测试参考文档测试术语与定义测试内容测试人员的分工测试进度测试流程测试工具测试缺陷管理测试的风险分析"}, "md/常规面试题/0019.html": {"url": "md/常规面试题/0019.html", "title": "面试题 0019", "keywords": "", "body": "题目测试用例如何设计的点我看答案在测试用例设计之前首先要熟悉客户的需求文档或需求规格说明书，以做到对被测系统的熟悉，充分了解产品的详细功能，并在熟悉过程中即使与研发人员和客户人员进行有效的沟通。然后从需求中提炼中各个模块的详细功能点编写出一个测试要点的文档。根据测试要点设计测试用例，测试要点与测试用例是一个一对多的关系，一个测试要点可能会需要几个测试用例的验证，有正常的操作和异常的操作，甚至是几个正常与几个异常的操作，这要根据实际功能的要求来具体分析具体实现。"}, "md/常规面试题/0020.html": {"url": "md/常规面试题/0020.html", "title": "面试题 0020", "keywords": "", "body": "题目测试用例包括那些项点我看答案产品名称、功能模块、用例的编号、编写人、被测功能的简述，测试的预置条件，测试步骤，预期结果，实际结果。"}, "md/常规面试题/0021.html": {"url": "md/常规面试题/0021.html", "title": "面试题 0021", "keywords": "", "body": "题目缺陷处理流程点我看答案讲缺陷的详细信息录入缺陷管理系统，并分配给对应的开发人员如果遇到一些难以再现的缺陷，在开发人员修正过程中配合开发人员进行Bug的再现。开发人员修正Bug后，会在缺陷管理系统中将修正后的Bug状态更改，通常为Fixed状态。新版本发布后，测试人员会讲bug状态已经更改为Fixed的Bug进行回归测试。如果测试通过，则将该Bug关闭，如果仍未通过，则将该Bug从Fixed更改为Reopen状态，继续让开发人员来修正。并等待下一个新版本发布后的二次回归测试。"}, "md/常规面试题/0022.html": {"url": "md/常规面试题/0022.html", "title": "面试题 0022", "keywords": "", "body": "题目缺陷报告包括那些项点我看答案编写人、被测系统的版本号、测试环境、预期结果、实际结果、对于实际结果如有必要附上截图、测试用例数、测试用例通过数，测试用例的通过率、对缺陷的一个分析汇总。"}, "md/常规面试题/0023.html": {"url": "md/常规面试题/0023.html", "title": "面试题 0023", "keywords": "", "body": "题目缺陷报告严重级别的划分点我看答案严重：影响系统整体基本流程运行的错误，由于某一操作造成系统死循环或服务器崩溃的错误较严重：功能实现错误、内部计算错误一般：UI错误，一些易用性的错误或建议"}, "md/常规面试题/0024.html": {"url": "md/常规面试题/0024.html", "title": "面试题 0024", "keywords": "", "body": "题目开发人员修复缺陷后，如何保证不影响其他功能点我看答案Bug的修复以及新功能的添加都有可能对版本造成一些影响，为了避免，在新版本发布以后，首先会对新版本做一个基础的流程测试也叫做冒烟测试，如果测试基本流程都顺利通过没有任何问题，那么测试人员可以继续进行详细的测试，否则就将冒烟测试中出现的问题以及问题有可能出现的原因反馈给开发人员，由开发人员修正后再次发版，进行测试。这是一个迭代的过程。"}, "md/常规面试题/0025.html": {"url": "md/常规面试题/0025.html", "title": "面试题 0025", "keywords": "", "body": "题目发现问题后你是如何判断其是否是BUG，你是如何提交的？点我看答案测试用例是经过评审组严格的评审，完全按照客户的需求规格说明书作为最终依据来评审的，如果测试过程中，测试结果与实际结果不符就很可能是Bug，如果一些比较明显的问题就直接录入缺陷管理系统，如果是一些边界问题不容易确定的，可以通过和开发人员甚至是设计人员等进行沟通最后得出一个结果究竟是否是Bug，如果是Bug就录入，如果是一个需要增加的新功能等，可以录入缺陷管理系统，类型为新需求。"}, "md/常规面试题/0026.html": {"url": "md/常规面试题/0026.html", "title": "面试题 0026", "keywords": "", "body": "题目修复一个BUG而导致其他的BUG出现，该如何处理点我看答案帮助开发人员分析问题锁定原因然后进行新Bug的修正。"}, "md/常规面试题/0027.html": {"url": "md/常规面试题/0027.html", "title": "面试题 0027", "keywords": "", "body": "题目测试总结报告包括那些项点我看答案测试用例的通过数，测试用例的未通过数，以及测试用例的通过率，未通过的功能都集中在哪几个功能模块，根据测试经验以及测试结果进行一个缺陷的分析和建议。"}, "md/常规面试题/0028.html": {"url": "md/常规面试题/0028.html", "title": "面试题 0028", "keywords": "", "body": "题目测试工作进行到一半时候，发现时间不够，你如何处理点我看答案与客户沟通本次发布的版本什么是最重要的，什么是其次，我会安排一个优先级来对整体测试功能进行一个筛选。我会和测试组全体人员一起加班"}, "md/常规面试题/0029.html": {"url": "md/常规面试题/0029.html", "title": "面试题 0029", "keywords": "", "body": "题目开发与测试的关系点我看答案开发和测试是一个整体，也可以说测试驱动着开发，开发配合着测试，相辅相成的，在一个完整的项目组中缺一不可。"}, "md/常规面试题/0030.html": {"url": "md/常规面试题/0030.html", "title": "面试题 0030", "keywords": "", "body": "题目如果你是测试组长你如何对项目及组员进行管理点我看答案首先要从需求开始，充分了解被测系统的功能以及业务需求，并在遇到问题的时候及时有效的与开发人员以及其他项目相关人员进行沟通，做到最被测系统的十分熟悉。并了解整个测试组的成员他们的测试技能以及擅长的工作，做到测试任务的合理分配，得以让测试工作快速，稳定高效的进行！"}, "md/常规面试题/0031.html": {"url": "md/常规面试题/0031.html", "title": "面试题 0031", "keywords": "", "body": "题目如果你提交的BUG开发人员说这不是缺陷你该怎么办点我看答案若遇到开发人员说提交BUG不是缺陷则跟项目组的需求人员，设计人员以及该功能的开发人员共同讨论做确认。"}, "md/常规面试题/0032.html": {"url": "md/常规面试题/0032.html", "title": "面试题 0032", "keywords": "", "body": "题目为什么要在一个团队中开展软件测试工作？点我看答案因为没有经过测试的软件很难在发布之前知道该软件的质量，就好比ISO质量认证一样，测试同样也需要质量的保证，这个时候就需要在团队中开展软件测试的工作。在测试的过程发现软件中存在的问题，及时让开发人员得知并修改问题，在即将发布时，从测试报告中得出软件的质量情况。"}, "md/常规面试题/0033.html": {"url": "md/常规面试题/0033.html", "title": "面试题 0033", "keywords": "", "body": "题目你在以往的测试工作中都曾经具体从事过哪些工作？其中最擅长哪部分工作？点我看答案我曾经做过web测试，后台测试，客户端软件，其中包括功能测试，性能测试，用户体验测试。最擅长的是功能测试。"}, "md/常规面试题/0034.html": {"url": "md/常规面试题/0034.html", "title": "面试题 0034", "keywords": "", "body": "题目你所熟悉的软件测试类型都有哪些？请试着分别比较这些不同的测试类型的区别与联系（如功能测试、性能测试……）点我看答案测试类型有：功能测试，性能测试，界面测试。功能测试在测试工作中占的比例最大，功能测试也叫黑盒测试。是把测试对象看作一个黑盒子。利用黑盒测试法进行动态测试时，需要测试软件产品的功能，不需测试软件产品的内部结构和处理过程。采用黑盒技术设计测试用例的方法有：等价类划分、边界值分析、错误推测、因果图和综合策略。性能测试是通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试。负载测试和压力测试都属于性能测试，两者可以结合进行。通过负载测试，确定在各种工作负载下系统的性能，目标是测试当负载逐渐增加时，系统各项性能指标的变化情况。压力测试是通过确定一个系统的瓶颈或者不能接收的性能点，来获得系统能提供的最大服务级别的测试。界面测试，界面是软件与用户交互的最直接的层，界面的好坏决定用户对软件的第一印象。而且设计良好的界面能够引导用户自己完成相应的操作，起到向导的作用。同时界面如同人的面孔，具有吸引用户的直接优势。设计合理的界面能给用户带来轻松愉悦的感受和成功的感觉，相反由于界面设计的失败，让用户有挫败感，再实用强大的功能都可能在用户的畏惧与放弃中付诸东流。区别在于，功能测试关注产品的所有功能上，要考虑到每个细节功能，每个可能存在的功能问题。性能测试主要关注于产品整体的多用户并发下的稳定性和健壮性。界面测试更关注于用户体验上，用户使用该产品的时候是否易用，是否易懂，是否规范（快捷键之类的），是否美观（能否吸引用户的注意力），是否安全（尽量在前台避免用户无意输入无效的数据，当然考虑到体验性，不能太粗鲁的弹出警告）？做某个性能测试的时候，首先它可能是个功能点，首先要保证它的功能是没问题的，然后再考虑该功能点的性能测试"}, "md/常规面试题/0035.html": {"url": "md/常规面试题/0035.html", "title": "面试题 0035", "keywords": "", "body": "题目你认为做好测试用例设计工作的关键是什么？点我看答案白盒测试用例设计的关键是以较少的用例覆盖尽可能多的内部程序逻辑结果黑盒法用例设计的关键同样也是以较少的用例覆盖模块输出和输入接口。不可能做到完全测试，以最少的用例在合理的时间内发现最多的问题"}, "md/常规面试题/0036.html": {"url": "md/常规面试题/0036.html", "title": "面试题 0036", "keywords": "", "body": "题目请试着比较一下黑盒测试、白盒测试、单元测试、集成测试、系统测试、验收测试的区别与联系。点我看答案黑盒测试：已知产品的功能设计规格，可以进行测试证明每个实现了的功能是否符合要求。白盒测试：已知产品的内部工作过程，可以通过测试证明每种内部操作是否符合设计规格要求，所有内部成分是否以经过检查。软件的黑盒测试意味着测试要在软件的接口处进行。这种方法是把测试对象看做一个黑盒子，测试人员完全不考虑程序内部的逻辑结构和内部特性，只依据程序的需求规格说明书，检查程序的功能是否符合它的功能说明。因此黑盒测试又叫功能测试或数据驱动测试。黑盒测试主要是为了发现以下几类错误：是否有不正确或遗漏的功能？在接口上，输入是否能正确的接受？能否输出正确的结果？是否有数据结构错误或外部信息（例如数据文件）访问错误？性能上是否能够满足要求？是否有初始化或终止性错误？软件的白盒测试是对软件的过程性细节做细致的检查。这种方法是把测试对象看做一个打开的盒子，它允许测试人员利用程序内部的逻辑结构及有关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。通过在不同点检查程序状态，确定实际状态是否与预期的状态一致。因此白盒测试又称为结构测试或逻辑驱动测试。白盒测试主要是想对程序模块进行如下检查：对程序模块的所有独立的执行路径至少测试一遍。对所有的逻辑判定，取真与取假的两种情况都能至少测一遍。在循环的边界和运行的界限内执行循环体。测试内部数据结构的有效性，等等。单元测试（模块测试）是开发者编写的一小段代码，用于检验被测代码的一个很小的、很明确的功能是否正确。通常而言，一个单元测试是用于判断某个特定条件（或者场景）下某个特定函数的行为。单元测试是由程序员自己来完成，最终受益的也是程序员自己。可以这么说，程序员有责任编写功能代码，同时也就有责任为自己的代码编写单元测试。执行单元测试，就是为了证明这段代码的行为和我们期望的一致。集成测试（也叫组装测试，联合测试）是单元测试的逻辑扩展。它的最简单的形式是：两个已经测试过的单元组合成一个组件，并且测试它们之间的接口。从这一层意义上讲，组件是指多个单元的集成聚合。在现实方案中，许多单元组合成组件，而这些组件又聚合成程序的更大部分。方法是测试片段的组合，并最终扩展进程，将你的模块与其他组的模块一起测试。最后，将构成进程的所有模块一起测试。系统测试是将经过测试的子系统装配成一个完整系统来测试。它是检验系统是否确实能提供系统方案说明书中指定功能的有效方法。（常见的联调测试）系统测试的目的是对最终软件系统进行全面的测试，确保最终软件系统满足产品需求并且遵循系统设计。验收测试是部署软件之前的最后一个测试操作。验收测试的目的是确保软件准备就绪，并且可以让最终用户将其用于执行软件的既定功能和任务。验收测试是向未来的用户表明系统能够像预定要求那样工作。经集成测试后，已经按照设计把所有的模块组装成一个完整的软件系统，接口错误也已经基本排除了，接着就应该进一步验证软件的有效性，这就是验收测试的任务，即软件的功能和性能如同用户所合理期待的那样。"}, "md/常规面试题/0037.html": {"url": "md/常规面试题/0037.html", "title": "面试题 0037", "keywords": "", "body": "题目测试计划工作的目的是什么？测试计划工作的内容都包括什么？其中哪些是最重要的？点我看答案软件测试计划是指导测试过程的纲领性文件，包含了产品概述、测试策略、测试方法、测试区域、测试配置、测试周期、测试资源、测试交流、风险分析等内容。借助软件测试计划，参与测试的项目成员，尤其是测试管理人员，可以明确测试任务和测试方法，保持测试实施过程的顺畅沟通，跟踪和控制测试进度，应对测试过程中的各种变更。测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。所以其中最重要的是测试测试策略和测试方法（最好是能先评审）"}, "md/常规面试题/0038.html": {"url": "md/常规面试题/0038.html", "title": "面试题 0038", "keywords": "", "body": "题目你认为做好测试计划工作的关键是什么？点我看答案明确测试的目标，增强测试计划的实用性编写软件测试计划得重要目的就是使测试过程能够发现更多的软件缺陷，因此软件测试计划的价值取决于它对帮助管理测试项目，并且找出软件潜在的缺陷。因此，软件测试计划中的测试范围必须高度覆盖功能需求，测试方法必须切实可行，测试工具并且具有较高的实用性，便于使用，生成的测试结果直观、准确坚持5W规则，明确内容与过程5W规则指的是What（做什么）、Why（为什么做）、When（何时做）、Where（在哪里）、How（如何做）。利用5W规则创建软件测试计划，可以帮助测试团队理解测试的目的（Why），明确测试的范围和内容（What），确定测试的开始和结束日期（When），指出测试的方法和工具（How），给出测试文档和软件的存放位置（Where）。采用评审和更新机制，保证测试计划满足实际需求测试计划写作完成后，如果没有经过评审，直接发送给测试团队，测试计划内容的可能不准确或遗漏测试内容，或者软件需求变更引起测试范围的增减，而测试计划的内容没有及时更新，误导测试执行人员。分别创建测试计划与测试详细规格、测试用例应把详细的测试技术指标包含到独立创建的测试详细规格文档，把用于指导测试小组执行测试过程的测试用例放到独立创建的测试用例文档或测试用例管理数据库中。测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。"}, "md/常规面试题/0039.html": {"url": "md/常规面试题/0039.html", "title": "面试题 0039", "keywords": "", "body": "题目你所熟悉的测试用例设计方法都有哪些？请分别以具体的例子来说明这些方法在测试用例设计工作中的应用。点我看答案等价类划分划分等价类：等价类是指某个输入域的子集合。在该子集合中，各个输入数据对于揭露程序中的错误都是等效的。并合理地假定：测试某等价类的代表值就等于对这一类其它值的测试。因此，可以把全部输入数据合理划分为若干等价类，在每一个等价类中取一个数据作为测试的输入条件，就可以用少量代表性的测试数据。取得较好的测试结果。等价类划分可有两种不同的情况：有效等价类和无效等价类。边界值分析法边界值分析方法是对等价类划分方法的补充。测试工作经验告诉我，大量的错误是发生在输入或输出范围的边界上，而不是发生在输入输出范围的内部。因此针对各种边界情况设计测试用例，可以查出更多的错误。使用边界值分析方法设计测试用例，首先应确定边界情况。通常输入和输出等价类的边界，就是应着重测试的边界情况。应当选取正好等于，刚刚大于或刚刚小于边界的值作为测试数据，而不是选取等价类中的典型值或任意值作为测试数据。错误推测法基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性的设计测试用例的方法。错误推测方法的基本思想：列举出程序中所有可能有的错误和容易发生错误的特殊情况，根据他们选择测试用例。例如，在单元测试时曾列出的许多在模块中常见的错误。以前产品测试中曾经发现的错误等，这些就是经验的总结。还有，输入数据和输出数据为0的情况。输入表格为空格或输入表格只有一行。这些都是容易发生错误的情况。可选择这些情况下的例子作为测试用例。因果图方法前面介绍的等价类划分方法和边界值分析方法，都是着重考虑输入条件，但未考虑输入条件之间的联系，相互组合等。考虑输入条件之间的相互组合，可能会产生一些新的情况。但要检查输入条件的组合不是一件容易的事情，即使把所有输入条件划分成等价类，他们之间的组合情况也相当多。因此必须考虑采用一种适合于描述对于多种条件的组合，相应产生多个动作的形式来考虑设计测试用例。这就需要利用因果图（逻辑模型）.因果图方法最终生成的就是判定表。它适合于检查程序输入条件的各种组合情况。"}, "md/常规面试题/0040.html": {"url": "md/常规面试题/0040.html", "title": "面试题 0040", "keywords": "", "body": "题目详细的描述一次测试用例设计的完整的过程。点我看答案就说最近的这次网站功能的测试吧首先：得到相关文档（需求文档和设计文档），理解需求和设计设计思想后，想好测试策略（测试计划简单点就OK了），考虑到测试环境，测试用例，测试时间等问题。第二步：设计测试用例，测试策略是：把网站部分的功能点测试完，然后在进行系统测试（另外个模块呢有另一个测试人员负责，可以进行联调测试），网站模块的测试基本是功能测试和界面测试（用户并发的可能性很小，所以不考虑）：这次的网站的输入数据呢是使用数据库中的某张表记录，如果表中某一数据记录中新加进来的（还没有被处理的，有个标志位），网站启动后会立刻去刷那张表，得到多条数据，然后在进行处理。处理过程中，会经历3个步骤，网站才算完成了它的任务。有3个步骤呢，就可以分别对这3个步骤进行测试用例的设计，尽量覆盖到各种输入情况（包括数据库中的数据，用户的输入等），得出了差不多50个用例。界面测试，也就是用户看的到的地方，包括发送的邮件和用户填写资料的页面展示。第三步：搭建测试环境（为什么这个时候考虑测试环境呢？因为我对网站环境已经很熟了，只有有机器能空于下来做该功能测试就可以做了），因为网站本身的环境搭建和其他的系统有点不同，它需要的测试环境比较麻烦，需要web服务器（Apache,tomcat），不过这次需求呢，网站部分只用到了tomcat，所以只要有tomcat即可第四步：执行测试"}, "md/常规面试题/0041.html": {"url": "md/常规面试题/0041.html", "title": "面试题 0041", "keywords": "", "body": "题目什么是桩模块？什么是驱动模块？点我看答案桩模块：被测模块调用模块驱动模块调用被测模块"}, "md/常规面试题/0042.html": {"url": "md/常规面试题/0042.html", "title": "面试题 0042", "keywords": "", "body": "题目你以前工作时的测试流程是什么？点我看答案公司对测试流程没有规定如何做，但每个测试人员都有自己的一套测试流程。我说下我2年来不断改正（自己总结，吸取同行的方法）后的流程吧。需求评审（有开发人员，产品经理，测试人员，项目经理）－&gt;需求确定（出一份确定的需求文档）－&gt;开发设计文档（开发人员在开始写代码前就能输出设计文档）－&gt;想好测试策略，写出测试用例－&gt;发给开发人员和测试经理看看（非正式的评审用例）－&gt;接到测试版本－&gt;执行测试用例（中间可能会补充用例）－&gt;提交bug（有些bug需要开发人员的确定（严重级别的，或突然发现的在测试用例范围之外的，难以重现的），有些可以直接录制进TD）－&gt;开发人员修改（可以在测试过程中快速的修改）－&gt;回归测试（可能又会发现新问题，再按流程开始跑）。"}, "md/常规面试题/0043.html": {"url": "md/常规面试题/0043.html", "title": "面试题 0043", "keywords": "", "body": "题目当开发人员说不是BUG时，你如何应付？点我看答案开发人员说不是bug，有2种情况，一是需求没有确定，所以我可以这么做，这个时候可以找来产品经理进行确认，需不需要改动，3方商量确定好后再看要不要改。二是这种情况不可能发生，所以不需要修改，这个时候，我可以先尽可能的说出是BUG的依据是什么？如果被用户发现或出了问题，会有什么不良结果？程序员可能会给你很多理由，你可以对他的解释进行反驳。如果还是不行，那我可以给这个问题提出来，跟开发经理和测试经理进行确认，如果要修改就改，如果不要修改就不改。其实有些真的不是bug，我也只是建议的方式写进TD中，如果开发人员不修改也没有大问题。如果确定是bug的话，一定要坚持自己的立场，让问题得到最后的确认。"}, "md/常规面试题/0044.html": {"url": "md/常规面试题/0044.html", "title": "面试题 0044", "keywords": "", "body": "题目什么是兼容性测试？兼容性测试侧重哪些方面？点我看答案兼容测试主要是检查软件在不同的硬件平台、软件平台上是否可以正常的运行，即是通常说的软件的可移植性。兼容的类型，如果细分的话，有平台的兼容，网络兼容，数据库兼容，以及数据格式的兼容。兼容测试的重点是，对兼容环境的分析。通常，是在运行软件的环境不是很确定的情况下，才需要做兼容。根据软件运行的需要，或者根据需求文档，一般都能够得出用户会在什么环境下使用该软件，把这些环境整理成表单，就得出做兼容测试的兼容环境了。"}, "md/常规面试题/0045.html": {"url": "md/常规面试题/0045.html", "title": "面试题 0045", "keywords": "", "body": "题目测试的策略有哪些？点我看答案黑盒/白盒，静态/动态，手工/自动，冒烟测试，回归测试，公测（Beta测试的策略）"}, "md/常规面试题/0046.html": {"url": "md/常规面试题/0046.html", "title": "面试题 0046", "keywords": "", "body": "题目正交表测试用例设计方法的特点是什么？点我看答案用最少的实验覆盖最多的操作，测试用例设计很少，效率高，但是很复杂；对于基本的验证功能，以及二次集成引起的缺陷，一般都能找出来；但是更深的缺陷，更复杂的缺陷，还是无能为力的；具体的环境下，正交表一般都很难做的。大多数，只在系统测试的时候使用此方法。"}, "md/常规面试题/0047.html": {"url": "md/常规面试题/0047.html", "title": "面试题 0047", "keywords": "", "body": "题目描述测试用例设计的完整过程？点我看答案需求分析+需求变更的维护工作；根据需求得出测试需求；设计测试方案，评审测试方案；方案评审通过后，设计测试用例，再对测试用例进行评审；"}, "md/常规面试题/0048.html": {"url": "md/常规面试题/0048.html", "title": "面试题 0048", "keywords": "", "body": "题目单元测试的策略有哪些？点我看答案逻辑覆盖、循环覆盖、同行评审、桌前检查、代码走查、代码评审、景泰数据流分析"}, "md/常规面试题/0049.html": {"url": "md/常规面试题/0049.html", "title": "面试题 0049", "keywords": "", "body": "题目Beta测试与Alpha测试有什么区别？点我看答案Betatesting(β测试）,测试是软件的多个用户在一个或多个用户的实际使用环境下进行的测试。开发者通常不在测试现场Alphatesting(α测试）,是由一个用户在开发环境下进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的受控测试"}, "md/常规面试题/0050.html": {"url": "md/常规面试题/0050.html", "title": "面试题 0050", "keywords": "", "body": "题目软件的评审一般由哪些人参加？其目的是什么？点我看答案在正式的会议上将软件项目的成果（包括各阶段的文档、产生的代码等）提交给用户、客户或有关部门人员对软件产品进行评审和批准。其目的是找出可能影响软件产品质量、开发过程、维护工作的适用性和环境方面的设计缺陷，并采取补救措施，以及找出在性能、安全性和经济方面的可能的改进。人员：用户、客户或有关部门开发人员，测试人员，需求分析师都可以，就看处于评审那个阶段"}, "md/常规面试题/0051.html": {"url": "md/常规面试题/0051.html", "title": "面试题 0051", "keywords": "", "body": "题目测试活动中，如果发现需求文档不完善或者不准确，怎么处理？点我看答案测试需求分析发现需求文档不完善或者不准确，应该立即和相关人员进行协调交流。"}, "md/常规面试题/0052.html": {"url": "md/常规面试题/0052.html", "title": "面试题 0052", "keywords": "", "body": "题目阶段评审与项目评审有什么区别？点我看答案阶段评审对项目各阶段评审：对阶段成果和工作项目评审对项目总体评审：对工作和产品"}, "md/常规面试题/0053.html": {"url": "md/常规面试题/0053.html", "title": "面试题 0053", "keywords": "", "body": "题目阐述工作版本的定义？点我看答案构造号：BUILD"}, "md/常规面试题/0054.html": {"url": "md/常规面试题/0054.html", "title": "面试题 0054", "keywords": "", "body": "题目什么是扇入？什么是扇出？点我看答案扇入：被调次数扇出：调其它模块数目"}, "md/常规面试题/0055.html": {"url": "md/常规面试题/0055.html", "title": "面试题 0055", "keywords": "", "body": "题目你认为做好测试计划工作的关键是什么？点我看答案软件测试计划就是在软件测试工作正式实施之前明确测试的对象，并且通过对资源、时间、风险、测试范围和预算等方面的综合分析和规划，保证有效的实施软件测试；做好测试计划工作的关键：目的，管理，规范明确测试的目标，增强测试计划的实用性编写软件测试计划得重要目的就是使测试过程能够发现更多的软件缺陷，因此软件测试计划的价值取决于它对帮助管理测试项目，并且找出软件潜在的缺陷。因此，软件测试计划中的测试范围必须高度覆盖功能需求，测试方法必须切实可行，测试工具并且具有较高的实用性，便于使用，生成的测试结果直观、准确坚持5W规则，明确内容与过程5W规则指的是What（做什么）、Why（为什么做）、When（何时做）、Where（在哪里）、How（如何做）。利用5W规则创建软件测试计划，可以帮助测试团队理解测试的目的（Why），明确测试的范围和内容（What），确定测试的开始和结束日期（When），指出测试的方法和工具（How），给出测试文档和软件的存放位置（Where）。采用评审和更新机制，保证测试计划满足实际需求测试计划写作完成后，如果没有经过评审，直接发送给测试团队，测试计划内容的可能不准确或遗漏测试内容，或者软件需求变更引起测试范围的增减，而测试计划的内容没有及时更新，误导测试执行人员。分别创建测试计划与测试详细规格、测试用例应把详细的测试技术指标包含到独立创建的测试详细规格文档，把用于指导测试小组执行测试过程的测试用例放到独立创建的测试用例文档或测试用例管理数据库中。测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。"}, "md/常规面试题/0056.html": {"url": "md/常规面试题/0056.html", "title": "面试题 0056", "keywords": "", "body": "题目你认为做好测试用例工作的关键是什么？点我看答案需求和设计文档的理解程度，对系统的熟悉程度"}, "md/常规面试题/0057.html": {"url": "md/常规面试题/0057.html", "title": "面试题 0057", "keywords": "", "body": "题目简述一下缺陷的生命周期？点我看答案提交-&gt;确认-&gt;分配-&gt;修复-&gt;验证-&gt;关闭"}, "md/常规面试题/0058.html": {"url": "md/常规面试题/0058.html", "title": "面试题 0058", "keywords": "", "body": "题目软件的安全性应从哪几个方面去测试？点我看答案用户认证机制：如数据证书、智能卡、双重认证、安全电子交易协议加密机制安全防护策略：如安全日志、入侵检测、隔离防护、漏洞扫描数据备份与恢复手段：存储设备、存储优化、存储保护、存储管理防病毒系统"}, "md/常规面试题/0059.html": {"url": "md/常规面试题/0059.html", "title": "面试题 0059", "keywords": "", "body": "题目软件配置管理工作开展的情况和认识？点我看答案软件配置管理贯穿于软件开发、测试活动的始终，覆盖了开发、测试活动的各个环节，它的重要作用之一就是要全面的管理保存各个配置项，监控各配置项的状态，并向项目经理及相关的人员报告，从而实现对软件过程的控制。软件测试配置管理包括4个最基本的活动：配置项标识配置项控制配置项状态报告配置审计软件配置管理通常借助工具来辅助，主要有MSSourceSafe、RationalClearCase等"}, "md/常规面试题/0060.html": {"url": "md/常规面试题/0060.html", "title": "面试题 0060", "keywords": "", "body": "题目你觉得软件测试通过的标准应该是什么样的？点我看答案缺陷密度值达到客户的要求"}, "md/常规面试题/0061.html": {"url": "md/常规面试题/0061.html", "title": "面试题 0061", "keywords": "", "body": "题目引入测试管理的含义？点我看答案风险分析，进度控制、角色分配、质量控制"}, "md/常规面试题/0062.html": {"url": "md/常规面试题/0062.html", "title": "面试题 0062", "keywords": "", "body": "题目一套完整的测试应该由哪些阶段组成？点我看答案测试计划、测试设计与开发、测试实施、测试评审与测试结论"}, "md/常规面试题/0063.html": {"url": "md/常规面试题/0063.html", "title": "面试题 0063", "keywords": "", "body": "题目单元测试的主要内容？点我看答案模块接口测试、局部数据结构测试、路径测试、错误处理测试、边界测试"}, "md/常规面试题/0064.html": {"url": "md/常规面试题/0064.html", "title": "面试题 0064", "keywords": "", "body": "题目集成测试也叫组装测试或者联合测试，请简述集成测试的主要内容？点我看答案在把各个模块连接起来的时候，穿越模块接口的数据是否会丢失；一个模块的功能是否会对另一个模块的功能产生不利的影响；各个子功能组合起来，能否达到预期要求的父功能；全局数据结构是否有问题；单个模块的误差累积起来，是否会放大，从而达到不能接受的程度。"}, "md/常规面试题/0065.html": {"url": "md/常规面试题/0065.html", "title": "面试题 0065", "keywords": "", "body": "题目简述集成测试与系统测试关系？点我看答案集成测试的主要依据概要设计说明书，系统测试的主要依据是需求设计说明书；集成测试是系统模块的测试，系统测试是对整个系统的测试，包括相关的软硬件平台、网络以及相关外设的测试。"}, "md/常规面试题/0066.html": {"url": "md/常规面试题/0066.html", "title": "面试题 0066", "keywords": "", "body": "题目软件测试的文档测试应当贯穿于软件生命周期的全过程，其中用户文档是文档测试的重点。那么软件系统的用户文档包括哪些？点我看答案用户手册安装和设置指导联机帮助指南、向导样例、示例和模板授权/注册登记表最终用户许可协议"}, "md/常规面试题/0067.html": {"url": "md/常规面试题/0067.html", "title": "面试题 0067", "keywords": "", "body": "题目软件系统中除用户文档之外，文档测试还应该关注哪些文档？点我看答案开发文档软件需求说明书数据库设计说明书概要设计说明书详细设计说明书可行性研究报告管理文档项目开发计划测试计划测试报告开发进度月报开发总结报告"}, "md/常规面试题/0068.html": {"url": "md/常规面试题/0068.html", "title": "面试题 0068", "keywords": "", "body": "题目简述软件系统中用户文档的测试要点？点我看答案读者群。文档面向的读者定位要明确。对于初级用户、中级用户以及高级用户应该有不同的定位术语。文档中用到的术语要适用与定位的读者群，用法一致，标准定义与业界规范相吻合。正确性。测试中需检查所有信息是否真实正确，查找由于过期产品说明书和销售人员夸大事实而导致的错误。检查所有的目录、索引和章节引用是否已更新，尝试链接是否准确，产品支持电话、地址和邮政编码是否正确。完整性。对照软件界面检查是否有重要的分支没有描述到，甚至是否有整个大模块没有描述到。一致性。按照文档描述的操作执行后，检查软件返回的结果是否与文档描述的相同。易用性。对关键步骤以粗体或背景色给用户以提示，合理的页面布局、适量的图表都可以给用户更高的易用性。需要注意的是文档要有助于用户排除错误。不但描述正确操作，也要描述错误处理办法。文档对于用户看到的错误信息应当有更详细的文档解释。图表与界面截图。检查所有图表与界面截图是否与发行版本相同。样例与示例。像用户一样载入和使用样例。如果是一段程序，就输入数据并执行它。以每一个模块制作文件，确认它们的正确性。语言。不出现错别字，不要出现有二义性的说法。特别要注意的是屏幕截图或绘制图形中的文字。印刷与包装。检查印刷质量；手册厚度与开本是否合适；包装盒的大小是否合适；有没有零碎易丢失的小部件等等。"}, "md/常规面试题/0069.html": {"url": "md/常规面试题/0069.html", "title": "面试题 0069", "keywords": "", "body": "题目单元测试主要内容是什么？点我看答案单元测试大多数由开发人员来完成，测试人员技术背景较好或者开发系统软件时可能会安排测试人员进行单元测试，大多数进行的单元测试都是开发人员调试程序或者开发组系统联合调试的过程。单元测试一般包括五个方面的测试：模块接口测试：模块接口测试是单元测试的基础。只有在数据能正确流入、流出模块的前提下，其他测试才有意义。模块接口测试也是集成测试的重点，这里进行的测试主要是为后面打好基础。测试接口正确与否应该考虑下列因素：输入的实际参数与形式参数的个数是否相同；输入的实际参数与形式参数的属性是否匹配；输入的实际参数与形式参数的量纲是否一致；调用其他模块时所给实际参数的个数是否与被调模块的形参个数相同；调用其他模块时所给实际参数的属性是否与被调模块的形参属性匹配；调用其他模块时所给实际参数的量纲是否与被调模块的形参量纲一致；调用预定义函数时所用参数的个数、属性和次序是否正确；是否存在与当前入口点无关的参数引用；是否修改了只读型参数；对全程变量的定义各模块是否一致；是否把某些约束作为参数传递。如果模块功能包括外部输入输出，还应该考虑下列因素：文件属性是否正确；OPEN/CLOSE语句是否正确；格式说明与输入输出语句是否匹配；缓冲区大小与记录长度是否匹配；文件使用前是否已经打开；是否处理了文件尾；是否处理了输入/输出错误；输出信息中是否有文字性错误。局部数据结构测试；边界条件测试；模块中所有独立执行通路测试；局部数据结构测试：检查局部数据结构是为了保证临时存储在模块内的数据在程序执行过程中完整、正确，局部功能是整个功能运行的基础。重点是一些函数是否正确执行，内部是否运行正确。局部数据结构往往是错误的根源，应仔细设计测试用例，力求发现下面几类错误：不合适或不相容的类型说明；变量无初值；变量初始化或省缺值有错；不正确的变量名（拼错或不正确地截断）；出现上溢、下溢和地址异常。边界条件测试：边界条件测试是单元测试中最重要的一项任务。众所周知，软件经常在边界上失效，采用边界值分析技术，针对边界值及其左、右设计测试用例，很有可能发现新的错误。边界条件测试是一项基础测试，也是后面系统测试中的功能测试的重点，边界测试执行的较好，可以大大提高程序健壮性。模块中所有独立路径测试：在模块中应对每一条独立执行路径进行测试，单元测试的基本任务是保证模块中每条语句至少执行一次。测试目的主要是为了发现因错误计算、不正确的比较和不适当的控制流造成的错误。具体做法就是程序员逐条调试语句。常见的错误包括：误解或用错了算符优先级；混合类型运算；变量初值错；精度不够；表达式符号错。比较判断与控制流常常紧密相关，测试时注意下列错误：不同数据类型的对象之间进行比较；错误地使用逻辑运算符或优先级；因计算机表示的局限性，期望理论上相等而实际上不相等的两个量相等；比较运算或变量出错；循环终止条件或不可能出现；迭代发散时不能退出；错误地修改了循环变量。模块的各条错误处理通路测试：程序在遇到异常情况时不应该退出，好的程序应能预见各种出错条件，并预设各种出错处理通路。如果用户不按照正常操作，程序就退出或者停止工作，实际上也是一种缺陷，因此单元测试要测试各种错误处理路径。一般这种测试着重检查下列问题：输出的出错信息难以理解；记录的错误与实际遇到的错误不相符；在程序自定义的出错处理段运行之前，系统已介入；异常处理不当；错误陈述中未能提供足够的定位出错信息。"}, "md/常规面试题/0070.html": {"url": "md/常规面试题/0070.html", "title": "面试题 0070", "keywords": "", "body": "题目如何理解强度测试？点我看答案强度测试是为了确定系统在最差工作环境的工作能力，也可能是用于验证在标准工作压力下的各种资源的最下限指标。它和压力测试的目标是不同的，压力测试是在标准工作环境下，不断增加系统负荷，最终测试出该系统能力达到的最大负荷（稳定和峰值）,而强度测试则是在非标准工作环境下，甚至不断人为降低系统工作环境所需要的资源，如网络带宽，系统内存，数据锁等等，以测试系统在资源不足的情况下的工作状态，通过强度测试，可以确定本系统正常工作的最差环境。强度测试和压力测试的测试指标相近，大多都是与时间相关的指标，如并发量（吞吐量）,延迟（最大、最小、平均）以及顺序指标等强度测试需要对系统的结构熟悉，针对系统的特征设计强度测试的方法"}, "md/常规面试题/0071.html": {"url": "md/常规面试题/0071.html", "title": "面试题 0071", "keywords": "", "body": "题目文档测试主要包含什么内容？点我看答案在国内软件开发管理中，文档管理几乎是最弱的一项，因而在测试工作中特别容易忽略文档测试也就不足为奇了。要想给用户提供完整的产品，文档测试是必不可少的。文档测试一般注重下面几个方面：文档的完整性：主要是测试文档内容的全面性与完整性，从总体上把握文档的质量。例如用户手册应该包括软件的所有功能模块。描述与软件实际情况的一致性：主要测试软件文档与软件实际的一致程度。例如用户手册基本完整后，我们还要注意用户手册与实际功能描述是否一致。因为文档往往跟不上软件版本的更新速度。易理解性：主要是检查文档对关键、重要的操作有无图文说明，文字、图表是否易于理解。对于关键、重要的操作仅仅只有文字说明肯定是不够的，应该附有图表使说明更为直观和明了。文档中提供操作的实例：这项检查内容主要针对用户手册。对主要功能和关键操作提供的应用实例是否丰富，提供的实例描述是否详细。只有简单的图文说明，而无实例的用户手册看起来就像是软件界面的简单拷贝，对于用户来说，实际上没有什么帮助。印刷与包装质量：主要是检查软件文档的商品化程度。有些用户手册是简单打印、装订而成，过于粗糙，不易于用户保存。优秀的文档例如用户手册和技术白皮书，应提供商品化包装，并且印刷精美。"}, "md/常规面试题/0072.html": {"url": "md/常规面试题/0072.html", "title": "面试题 0072", "keywords": "", "body": "题目功能测试用例需要详细到什么程度才是合格的？点我看答案这个问题也是测试工程师经常问的问题。有人主张测试用例详细到每个步骤执行什么都要写出来，目的是即使一个不了解系统的新手都可以按照测试用例来执行工作。主张这类写法的人还可以举出例子：欧美、日本等软件外包文档都是这样做的。另外一种观点就是主张写的粗些，类似于编写测试大纲。主张这种观点的人是因为软件开发需求管理不规范，变动十分频繁，因而不能按照欧美的高标准来编写测试用例。这样的测试用例容易维护，可以让测试执行人员有更大的发挥空间。实际上，软件测试用例的详细程度首先要以覆盖到测试点为基本要求。举个例子：用户登陆系统的测试用例可以不写出具体的执行数据，但是至少要写出五种以上情况（），如果只用一句话覆盖了这个功能是不合格的测试用例。覆盖功能点不是指列出功能点，而是要写出功能点的各个方面（如果组合情况较多时可以采用等价划分）。另一个影响测试用例的就是组织的开发能力和测试对象特点。如果开发力量比较落后，编写较详细的测试用例是不现实的，因为根本没有那么大的资源投入，当然这种情况很随着团队的发展而逐渐有所改善。测试对象特点重点是指测试对象在进度、成本等方面的要求，如果进度较紧张的情况下，是根本没有时间写出高质量的测试用例的，甚至有些时候测试工作只是一种辅助工作，因而不编写测试用例。因此，测试用例的编写要根据测试对象特点、团队的执行能力等各个方面综合起来决定编写策略。最后要注意的是测试人员一定不能抱怨，力争在不断提高测试用例编写水平的同时，不断地提高自身能力。"}, "md/常规面试题/0073.html": {"url": "md/常规面试题/0073.html", "title": "面试题 0073", "keywords": "", "body": "题目配置和兼容性测试的区别是什么？点我看答案配置测试的目的是保证软件在其相关的硬件上能够正常运行，而兼容性测试主要是测试软件能否与不同的软件正确协作。配置测试的核心内容就是使用各种硬件来测试软件的运行情况，一般包括：软件在不同的主机上的运行情况，例如Dell和Apple；软件在不同的组件上的运行情况，例如开发的拨号程序要测试在不同厂商生产的Modem上的运行情况；不同的外设；不同的接口；不同的可选项，例如不同的内存大小；兼容性测试的核心内容：测试软件是否能在不同的操作系统平台上兼容；测试软件是否能在同一操作系统平台的不同版本上兼容；软件本身能否向前或者向后兼容；测试软件能否与其它相关的软件兼容；数据兼容性测试，主要是指数据能否共享；配置和兼容性测试通称对开发系统类软件比较重要，例如驱动程序、操作系统、数据库管理系统等。具体进行时仍然按照测试用例来执行。"}, "md/常规面试题/0074.html": {"url": "md/常规面试题/0074.html", "title": "面试题 0074", "keywords": "", "body": "题目没有产品说明书和需求文档地情况下能够进行黑盒测试吗？点我看答案这个问题是国内测试工程师经常遇到的问题，根源就是国内软件开发文档管理不规范，对变更的管理方法就更不合理了。实际上没有任何文档的时候，测试人员是能够进行黑盒测试的，这种测试方式我们可以称之为探索测试，具体做法就是测试工程师根据自己的专业技能、领域知识等不断的深入了解测试对象、理解软件功能，进而发现缺陷。在这种做法基本上把软件当成了产品说明书，测试过程中要和开发人员不断的进行交流。尤其在作项目的时候，进度压力比较大，可以作为加急测试方案。最大的风险是不知道有些特性是否被遗漏。"}, "md/常规面试题/0075.html": {"url": "md/常规面试题/0075.html", "title": "面试题 0075", "keywords": "", "body": "题目测试中的杀虫剂怪事是指什么？点我看答案杀虫剂怪事一词由BorisBeizer在其编著的《软件测试技术》第二版中提出。用于描述测试人员对同一测试对象进行的测试次数越多，发现的缺陷就会越来越少的现象。就像老用一种农药，害虫就会有免疫力，农药发挥不了效力。这种现象的根本原因就是测试人员对测试软件过于熟悉，形成思维定势。为了克服这种现象，测试人员需要不断编写新的测试程序或者测试用例，对程序的不同部分进行测试，以发现更多的缺陷。也可以引用新人来测试软件，刚刚进来的新手往往能发现一些意想不到的问题。"}, "md/常规面试题/0076.html": {"url": "md/常规面试题/0076.html", "title": "面试题 0076", "keywords": "", "body": "题目为什么尽量不要让时间有富裕的员工去做一些测试？点我看答案表面上看这体现了管理的效率和灵活性，但实际上也体现了管理者对测试的轻视。测试和测试的人有很大关系。测试工作人员应该是勤奋并富有耐心，善于学习、思考和发现问题，细心有条理，总结问题，如果具备这样的优点，做其它工作同样也会很出色，因此这里还有一个要求，就是要喜欢测试这项工作。如果他是专职的，那么肯定更有经验和信心。国内的小伙子好象都喜欢做程序员，两者工作性质不同，待遇不同，地位不同，对自我实现的价值的认识也不同，这是行业的一个需要改善的问题。如果只是为了完成任务而完成任务，或者发现了几个问题就觉得满意了，这在任何其它工作中都是不行的。"}, "md/常规面试题/0077.html": {"url": "md/常规面试题/0077.html", "title": "面试题 0077", "keywords": "", "body": "题目完全测试程序是可能的吗？点我看答案软件测试初学者可能认为拿到软件后需要进行完全测试，找到全部的软件缺陷，使软件零缺陷发布。实际上完全测试是不可能的。主要有以下一个原因：完全测试比较耗时，时间上不允许；完全测试通常意味着较多资源投入，这在现实中往往是行不通的；输入量太大，不能一一进行测试；输出结果太多，只能分类进行验证；软件实现途径太多；软件产品说明书没有客观标准，从不同的角度看，软件缺陷的标准不同；因此测试的程度要根据实际情况确定。"}, "md/常规面试题/0078.html": {"url": "md/常规面试题/0078.html", "title": "面试题 0078", "keywords": "", "body": "题目软件测试的风险主要体现在哪里？点我看答案我们没有对软件进行完全测试，实际就是选择了风险，因为缺陷极有可能存在没有进行测试的部分。举个例子，程序员为了方便，在调试程序时会弹出一些提示信息框，而这些提示只在某种条件下会弹出，碰巧程序发布前这些代码中的一些没有被注释掉。在测试时测试工程师又没有对其进行测试。如果客户碰到它，这将是代价昂贵的缺陷，因为交付后才被客户发现。因此，我们要尽可能的选择最合适的测试量，把风险降低到最小。"}, "md/常规面试题/0079.html": {"url": "md/常规面试题/0079.html", "title": "面试题 0079", "keywords": "", "body": "题目发现的缺陷越多，说明软件缺陷越多吗？点我看答案这是一个比较常见的现象。测试工程师在没有找到缺陷前会绞尽脑汁的思考，但是找到一个后，会接二连三的发现很多缺陷，颇有个人成就感。其中的原因主要如下：代码复用、拷贝代码导致程序员容易犯相同的错误。类的继承导致所有的子类会包含基类的错误，反复拷贝同一代码意味可能也复制了缺陷。程序员比较劳累是可以导致某些连续编写的功能缺陷较多。程序员加班是一种司空见惯的现象，因此体力不只时容易编写一些缺陷较多的程序。而这些连续潜伏缺陷恰恰时测试工程师大显身手的地方。缺陷一个连着一个不是一个客观规律，只是一个常见的现象。如果软件编写的比较好，这种现象就不常见了。测试人员只要严肃认真的测试程序就可以了。"}, "md/常规面试题/0080.html": {"url": "md/常规面试题/0080.html", "title": "面试题 0080", "keywords": "", "body": "题目所有的软件缺陷都能修复吗？所有的软件缺陷都要修复吗？点我看答案从技术上讲，所有的软件缺陷都是能够修复的，但是没有必要修复所有的软件缺陷。测试人员要做的是能够正确判断什么时候不能追求软件的完美。对于整个项目团队，要做的是对每一个软件缺陷进行取舍，根据风险决定那些缺陷要修复。发生这种现象的主要原因如下：没有足够的时间资源。在任何一个项目中，通常情况下开发人员和测试人员都是不够用的，而且在项目中没有预算足够的回归测试时间，再加上修改缺陷可能引入新的缺陷，因此在交付期限的强大压力下，必须放弃某些缺陷的修改。有些缺陷只是特殊情况下出现，这种缺陷处于商业利益考虑，可以在以后升级中进行修复。不是缺陷的缺陷。我们经常会碰到某些功能方面的问题被当成缺陷来处理，这类问题可以以后有时间时考虑再处理。最后要说的是，缺陷是否修改要由软件测试人员、项目经理、程序员共同讨论来决定是否修复，不同角色的人员从不同的角度来思考，以做出正确的决定。"}, "md/常规面试题/0081.html": {"url": "md/常规面试题/0081.html", "title": "面试题 0081", "keywords": "", "body": "题目软件测试人员就是QA吗？点我看答案软件测试人员的职责是尽可能早的找出软件缺陷，确保得以修复。而质量保证人员（QA）主要职责是创建或者制定标准和方法，提高促进软件开发能力和减少软件缺陷。测试人员的主要工作是测试，质量保证人员日常工作重要内容是检查与评审，测试工作也是测试保证人员的工作对象。软件测试和质量是相辅相成的关系，都是为了提高软件质量而工作。"}, "md/常规面试题/0082.html": {"url": "md/常规面试题/0082.html", "title": "面试题 0082", "keywords": "", "body": "题目如何减少测试人员跳槽带来的损失？点我看答案在IT行业里跳槽已经是一种司空见惯的现象，而且跳槽无论给公司还是给个人都会带来一定的损失。测试队伍也无疑会面临跳槽的威胁，作为测试经理管理者，只有从日常工作中开始做起，最能最大限度的减少损失。建议我们从以下两个方面做起：加强部门内员工之间的互相学习，互相学习是建立学习型组织的基本要求，是知识互相转移的过程。在此基础上，可以把个人拥有的技术以知识的形式沉积下来，也就完成了隐性知识到显性知识的转化。通常情况下，企业能为员工提供足够大的发展空间时，如果不是待遇特别低，员工都不会主动离开企业。因此我们要想留住员工，管理者就应该把员工的个人成长和企业的发展联系起来，为员工设定合理发展规划并付诸实现。不过这项要求做起来比较，要有比较好的企业文化为依托。"}, "md/常规面试题/0083.html": {"url": "md/常规面试题/0083.html", "title": "面试题 0083", "keywords": "", "body": "题目写出bug报告当中一些必备的内容。点我看答案硬件平台和操作系统测试应用的硬件平台（Platform），通常选择PC。测试应用的操作系统平台（OS）。版本Bug报告优先级Bug状态Bug的编号发现人提交人指定处理人概述从属关系详细描述严重程度所属模块附件提交日期"}, "md/常规面试题/0084.html": {"url": "md/常规面试题/0084.html", "title": "面试题 0084", "keywords": "", "body": "题目画出软件测试的V模型图。点我看答案"}, "md/常规面试题/0085.html": {"url": "md/常规面试题/0085.html", "title": "面试题 0084", "keywords": "", "body": "题目Windows操作系统中PATH环境变量的作用是什么？点我看答案PATH是Windows操作系统环境变量，PATH作用是用户在命令行窗口执行一个命令，则在PATH变量设置的目录下依次寻找该命令或对应的执行文件，若找到，则执行，若没有找到，则命令行窗口返回无效命令。"}, "md/常规面试题/0086.html": {"url": "md/常规面试题/0086.html", "title": "面试题 0084", "keywords": "", "body": "题目简述一下c/s模式或者b/s模式？点我看答案C/S模式：客户端/服务器模式。工作原理：Client向Server提交一个请求；Server则使用一些方法处理这个请求，并将效果返回给Client。B/S结构，即Browser/Server（浏览器/服务器）结构，是随着Internet技术的兴起，对C/S结构的一种变化或者改进的结构。在这种结构下，用户界面完全通过WWW浏览器实现，一部分事务逻辑在前端实现，但是主要事务逻辑在服务器端实现，形成所谓3-tier结构。B/S结构，主要是利用了不断成熟的WWW浏览器技术，结合浏览器的多种Script语言(VBScript、JavaScript…)和ActiveX技术，用通用浏览器就实现了原来需要复杂专用软件才能实现的强大功能，并节约了开发成本，是一种全新的软件系统构造技术。"}, "md/常规面试题/0087.html": {"url": "md/常规面试题/0087.html", "title": "面试题 0084", "keywords": "", "body": "题目持续集成是什么？点我看答案持续集成指的是，频繁地（一天多次）将代码集成到主干。持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。"}, "md/常规面试题/0088.html": {"url": "md/常规面试题/0088.html", "title": "面试题 0084", "keywords": "", "body": "题目持续交付是什么？点我看答案持续交付（Continuousdelivery）指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。"}, "md/常规面试题/0089.html": {"url": "md/常规面试题/0089.html", "title": "面试题 0084", "keywords": "", "body": "题目持续部署是什么？点我看答案持续部署（continuousdeployment）是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。持续部署的前提是能自动化完成测试、构建、部署等步骤。"}, "md/常规面试题/0090.html": {"url": "md/常规面试题/0090.html", "title": "面试题 0084", "keywords": "", "body": "题目交付测试是什么点我看答案交付过程中的重要一环就是交付测试，交付测试的目标是保证用户对所交付的系统的满意。交付测试主要的参与者应该是目标客户。客户参与越多越好。交付测试的内容一般包括安装测试、可用性测试、alpha测试、beta测试等。"}, "md/常规面试题/0091.html": {"url": "md/常规面试题/0091.html", "title": "面试题 0084", "keywords": "", "body": "题目用例评审怎么去评审点我看答案测试用例本身的描述是否清晰，语言准确；是否存在二义性；测试用例内容是否完整，是否清晰的包含输入和预期输出的结果；测试步骤是否清晰；测试用例中使用的测试数据是否恰当，准确；测试用例是否具有指导性，是否能灵活的指导软件测试工程师通过测试用例发现更多的缺陷，而不是限制他们的思维；是否考虑到测试用例执行的效率。对于不断重复执行的步骤，是否保证了验证点相同；或者测试用例的设计是否存在冗余性等。这些都可能导致测试用例执行效率低下；画出软件需求跟踪矩阵，验证测试用例是否完全覆盖了需求，验证测试用例的覆盖性；测试用例是否完全遵守了软件需求的规定。这一点其实有一些难做到。考虑到时间/成本的关系，应该视具体情况而定。"}, "md/常规面试题/0092.html": {"url": "md/常规面试题/0092.html", "title": "面试题 0084", "keywords": "", "body": "题目如何有效的对测试用例进行评审点我看答案评审之前，需要将即将评审的测试用例以及测试需求、测试分析的结果（测试点分析）等文档提前发送给相关的人员；最好能够让他们有时间提前阅读；随时的问题沟通与反馈机制。评审之前做一些问题的沟通与反馈，以便于在测试用例评审会议上能够节省出来宝贵的时间；评审会议的主持者，需要事前做好关于测试用例的疑问，问题点等记录，以便于在评审会上引导提问和解答；评审期间做好详细的记录，需要对有关的疑问和问题及时进行澄清；评审会议的主持者需要能够把控会议的进度，让参加评审的测试人员能够集中精力在测试用例上，而不要思维太发散而跑题。评审会议结束之后，及时提交审核评审记录；并且与参加会议的人员分享评审记录。"}, "md/常规面试题/0093.html": {"url": "md/常规面试题/0093.html", "title": "面试题 0084", "keywords": "", "body": "题目如何保证测试用例覆盖全面点我看答案测试用例覆盖度一般是从以下几方面衡量的：测试需求的覆盖：保证所有需求都已经设计用例测试特性的覆盖：保证所有不同类型已覆盖，如：功能测试，性能测试等平台与层次的覆盖：保证所有平台有用例覆盖，不同层次都有设计用例，如业务层、接口层等一般通过用例评审来完善用例，也可通过代码覆盖度工具（Java平台比较多，如JaCoCo）来检测用例的覆盖是否完整"}, "md/常规面试题/0094.html": {"url": "md/常规面试题/0094.html", "title": "面试题 0084", "keywords": "", "body": "题目支付测试的现金是怎么模拟的（包括第三方接口，微信，支付宝）点我看答案采用真实支付环境测试，记录好相关订单与金额记录，提交财务对账。如第三方支付有提供仿真测试环境可由开发修改支付网关配置为沙箱地址。微信支付仿真测试环境支付宝沙箱"}, "md/常规面试题/0095.html": {"url": "md/常规面试题/0095.html", "title": "面试题 0095", "keywords": "", "body": "题目软件测试与软件质量保证的区别点我看答案软件测试只是质量保证工作中的一个环节，软件质量保证与软件测试是软件质量工程的两个不同层面的工作；质量保证通过预防、检查与改进来保证软件质量，采用全面质量管理和过程改进的原理来开展质量保证工作，主要关注软件质量的检查与测试，主要着眼于软件开发活动的过程、步骤和产物。软件测试通过执行软件来，对过程中的产物（开发文档和程序）进行走查，发现问题，报告质量"}, "md/常规面试题/0096.html": {"url": "md/常规面试题/0096.html", "title": "面试题 0096", "keywords": "", "body": "题目请描述如何划分缺陷与错误严重性和优先级别？点我看答案给软件缺陷与错误划分严重性和优先级的通用原则：表示软件缺陷所造成饿危害和恶劣程度。优先级表示修复缺陷的重要程度和次序。严重性：严重：系统崩溃、数据丢失、数据毁坏较严重：操作性错误、结果错误、遗漏功能一般：小问题、错别字、UI布局、罕见故障建议：不影响使用的瑕疵或更好的实现。优先级最高优先级：立即修复，停止进一步测试。次高优先级：在产品发布之前必须修复。中等优先级：如果时间允许应该修复。最低优先级：可能会修复，但是也可能发布。"}, "md/常规面试题/0097.html": {"url": "md/常规面试题/0097.html", "title": "面试题 0097", "keywords": "", "body": "题目BUG信息应该包含那些内容。点我看答案测试软件名称、测试版本号、测试人名称、测试事件、测试软件和硬件配置环境、发现软件错误的类型、错误的严重程度、详细步骤、必要的附图、测试注释。"}, "md/常规面试题/0098.html": {"url": "md/常规面试题/0098.html", "title": "面试题 0098", "keywords": "", "body": "题目BUG信息应该包含那些内容。点我看答案测试软件名称、测试版本号、测试人名称、测试事件、测试软件和硬件配置环境、发现软件错误的类型、错误的严重程度、详细步骤、必要的附图、测试注释。"}, "md/常规面试题/0099.html": {"url": "md/常规面试题/0099.html", "title": "面试题 0099", "keywords": "", "body": "题目W和H模型的区别点我看答案W模型强调的是测试伴随整个软件开发周期，而且测试的对象不仅是程序，需求也需要进行测试，测试与开发是同步进行的。H模型是将测试活动玩却的独立出来，形成了完全独立的流程，可以实现迭代而W模型不支持迭代这是两者最大的区别。"}, "md/常规面试题/0100.html": {"url": "md/常规面试题/0100.html", "title": "面试题 0100", "keywords": "", "body": "题目功能测试用例需要详细到什么程度才是合格的?点我看答案测试软件名称、测试版本号、测试人名称、测试事件、测试软件和硬件配置环境、发现软件错误的类型、错误的严重程度、详细步骤、必要的附图、测试注释。"}, "md/常规面试题/0101.html": {"url": "md/常规面试题/0101.html", "title": "面试题 0101", "keywords": "", "body": "题目怎么处理无法再现的缺陷？点我看答案首先，应当对这样的缺陷进行详细的记录，并尽快提交给开发人员。其次，对于寻找难以再现的缺陷要合理地安排时间，对一时难以再现的缺陷可以暂时搁置，以保证项目的正常进度。最后，在测试过程中对未再现缺陷予以关注。"}, "md/自动化面试题/index.html": {"url": "md/自动化面试题/index.html", "title": "自动化面试题", "keywords": "", "body": "自动化面试题"}, "md/自动化面试题/1001.html": {"url": "md/自动化面试题/1001.html", "title": "面试题 0001", "keywords": "", "body": "题目什么是自动化？点我看答案自动化是可以减少人类劳动的任何行动。"}, "md/自动化面试题/1002.html": {"url": "md/自动化面试题/1002.html", "title": "面试题 0002", "keywords": "", "body": "题目什么是自动化测试？点我看答案自动化测试或测试自动化是自动化手动过程以测试被测应用程序/系统的过程。自动化测试涉及使用单独的测试工具，该工具允许你创建可重复执行且不需要任何手动干预的测试脚本。使用特殊软件工具或脚本执行测试任务（如输入数据，执行测试步骤和比较结果等）的过程称为自动化测试。"}, "md/自动化面试题/1003.html": {"url": "md/自动化面试题/1003.html", "title": "面试题 0003", "keywords": "", "body": "题目自动化测试什么时候有用？点我看答案自动化测试在以下场景中很有用：回归测试：如果出现错误修复或新模块实现，我们必须确保已经实现或未更改的功能不受影响。在这种情况下，我们最终会多次运行回归测试用例。例如：在每次更改请求或错误修复之后，在每次迭代之后进行增量开发方法等。非功能测试：测试应用程序的非功能方面。例如：负载测试或性能测试等，人类很难跟踪和分析。复杂的计算检查或测试容易出现人为错误的情况。重复执行相同的测试：有时我们必须为不同的数据集或在每个构建版本之后或在多个硬件，软件或两者的组合上运行相同的测试用例集。在上述场景中自动化测试用例有助于实现测试速度并最大限度地减少人为错误。"}, "md/自动化面试题/1004.html": {"url": "md/自动化面试题/1004.html", "title": "面试题 0004", "keywords": "", "body": "题目如何识别适合自动化的测试用例？点我看答案确定适合自动化的测试用例是实现自动化的最重要步骤。自动化测试用例应该是一系列确定的操作，机器不擅长模糊判断。"}, "md/自动化面试题/1005.html": {"url": "md/自动化面试题/1005.html", "title": "面试题 0005", "keywords": "", "body": "题目你能实现100%的自动化吗？点我看答案100%的自动化很难实现，因为会有很多边缘测试用例和一些很少执行的情况。自动执行这些未执行的情况，这些情况通常不会为自动化测试套件增加价值。"}, "md/自动化面试题/1006.html": {"url": "md/自动化面试题/1006.html", "title": "面试题 0006", "keywords": "", "body": "题目目前我的项目中没有任何自动化，但现在我想实现自动化，具体步骤是什么？点我看答案首先，确定要自动化的测试/测试用例类型。确定工具设计框架创建实用程序文件和环境文件。开始编写脚本确定并处理报告。分配时间来增强和维护脚本。为项目获得自动化测试所需的步骤包括：分析自动化测试需求制定自动化测试计划设计自动化测试用例搭建自动化测试框架编写自动化测试脚本运行自动化测试脚本分析自动化测试结果维护自动化测试脚本"}, "md/自动化面试题/1007.html": {"url": "md/自动化面试题/1007.html", "title": "面试题 0007", "keywords": "", "body": "题目一旦确定了工具，你的下一步将是什么？点我看答案一旦我们完成工具，我们的下一步就是设计框架。"}, "md/自动化面试题/1008.html": {"url": "md/自动化面试题/1008.html", "title": "面试题 0008", "keywords": "", "body": "题目什么是框架？点我看答案框架是整个自动化套件的一组结构。它也是一个指导方针，如果遵循该指导方针可以产生易于维护和增强的结构。框架是对支柱自动化测试的各种指导方针，编码标准，概念，流程，实践，项目层次结构，模块化，报告机制，测试数据注入等的建设性融合。这些准则包括：编码标准处理测试数据维护和处理元素（QTP中的对象存储库）处理环境文件和属性文件报告数据处理日志"}, "md/自动化面试题/1009.html": {"url": "md/自动化面试题/1009.html", "title": "面试题 0009", "keywords": "", "body": "题目良好框架的属性是什么？点我看答案模块化框架应适应变化。测试人员应该能够根据环境或登录信息更改来修改脚本。可重用常用的方法或实用程序应该写在一个可以被所有脚本访问的公共文件中。一致应按照所有可接受的编码实践，以一致的格式编写套件。独立脚本应该以彼此独立的方式编写。如果一个测试失败，它不应该阻止剩余的测试用例（除非它是一个登录页面）日志在框架中实现日志记录功能是很好的。这将有助于我们的脚本运行更长时间（比如夜间模式），如果脚本在任何时间点失败，让日志文件帮助我们检测位置以及错误类型。报告将报告功能自动嵌入到框架中。脚本编写完成后，我们可以通过电子邮件发送结果和报告。集成自动化框架应该易于与其他应用程序集成，如持续集成或在部署构建后立即触发自动脚本。"}, "md/自动化面试题/1010.html": {"url": "md/自动化面试题/1010.html", "title": "面试题 0010", "keywords": "", "body": "题目在哪里维护登录名，密码等信息点我看答案此信息应始终保存在单独的文件中。"}, "md/自动化面试题/1011.html": {"url": "md/自动化面试题/1011.html", "title": "面试题 0011", "keywords": "", "body": "题目为什么要将这种信息保存在单独的文件中而不是直接保存在代码中点我看答案登录和密码是经常使用的字段类型，它们根据环境和授权进行更改。如果我们将它硬编码到我们的代码中，我们必须在每个有引用的文件中更改它。如果文件超过100个，则更改所有100个文件变得非常困难，这反过来会导致错误。因此，这种信息保存在单独的文件中，以便更新变得容易。"}, "md/自动化面试题/1012.html": {"url": "md/自动化面试题/1012.html", "title": "面试题 0012", "keywords": "", "body": "题目说说在自动化测试是你认为好的编码实践点我看答案一些好的编码实践包括：添加适当的注释确定可重用的方法并将其写入单独的文件中遵循特定语言的编码约定将测试数据保存在单独的文件中定期运行脚本"}, "md/自动化面试题/1013.html": {"url": "md/自动化面试题/1013.html", "title": "面试题 0013", "keywords": "", "body": "题目你认为哪些类型的测试都不应该自动化？点我看答案很少执行的测试探索性测试可用性测试手动更为快速执行的测试"}, "md/自动化面试题/1014.html": {"url": "md/自动化面试题/1014.html", "title": "面试题 0014", "keywords": "", "body": "题目你认为测试只能在UI级别进行吗？点我看答案今天，当我们转向敏捷模式时，测试不仅限于UI层。对敏捷项目而言，早期反馈是必须的。如果我们只关注UI层，我们实际上在等待UI开发并可用于测试。相反，我们甚至可以在UI实际开发之前进行测试。我们可以直接测试API或进行单元测试。通过这种方式，我们可以更早地提供反馈，甚至在开发UI之前进行测试，给予更多时间给开发人员修复错误。"}, "md/自动化面试题/1015.html": {"url": "md/自动化面试题/1015.html", "title": "面试题 0015", "keywords": "", "body": "题目你如何选择最适合你的自动化工具点我看答案选择自动化工具取决于各种因素，例如：了解我们需要测试的应用程序的类型：web、API、APP等费用与成本和预算学习难度工具的局限性"}, "md/自动化面试题/1016.html": {"url": "md/自动化面试题/1016.html", "title": "面试题 0016", "keywords": "", "body": "题目你认为测试人员做自动化测试有什么阻碍？有没有办法克服它？点我看答案测试人员的主要障碍是在他们想要自动化时学习编程/编码。由于测试人员不编码，因此适应编码对测试人员来说有点挑战。我们可以克服它：在自动化测试时与开发人员协作。考虑到自动化测试是整个团队的责任，而不仅仅是测试人员的责任。给予专门的时间并专注于自动化测试。获得适当的管理支持。参与适当的培训"}, "md/自动化面试题/1017.html": {"url": "md/自动化面试题/1017.html", "title": "面试题 0017", "keywords": "", "body": "题目什么是自动化测试框架？点我看答案一般来说，框架是一套指导方针。用于创建测试将自动化的执行环境的一组准则，假设，概念和编码实践称为自动化测试框架。自动化测试框架负责创建测试工具，其具有与被测应用程序连接的机制，从文件获取输入，执行测试用例并生成用于测试执行的报告。自动化测试框架应独立于应用程序，并且应易于使用，修改或扩展。"}, "md/自动化面试题/1018.html": {"url": "md/自动化面试题/1018.html", "title": "面试题 0018", "keywords": "", "body": "题目自动化框架有哪些优势点我看答案代码的可重用性最大覆盖范围低成本维护最小的人工干预自动化生成报告"}, "md/自动化面试题/1019.html": {"url": "md/自动化面试题/1019.html", "title": "面试题 0019", "keywords": "", "body": "题目自动化测试框架构成点我看答案采用Python为编程语言，基于Unittest为单元测试框架，进行测试的组织于运行；结合Selnenium进行WEBUI测试；数据驱动采用DDT模块；HTML报告使用HTMLReport模块；整个框架采用分层结构：Business：测试业务抽象流程Common：项目相关的抽象通用代码：与测试业务无关Config：配置文件Page_Object：页面描述：PageObject思想Tase_Case：测试用例：完整的测试流程Test_Data：测试数据Test_Suite：组织测试套件run.py：统一运行入口"}, "md/自动化面试题/1020.html": {"url": "md/自动化面试题/1020.html", "title": "面试题 0020", "keywords": "", "body": "题目了解过自动化测试工具点我看答案SeleniumSelenium是Web应用程序自动化测试的测试框架。它支持多种浏览器并且与操作系统无关。Selenium还支持各种编程语言，如java，c＃，PHP，Ruby和Perl等。Selenium是一个开源的库集，可用于开发用于测试基于Web的应用程序的其他测试框架或测试脚本。UFT统一功能测试是功能测试的许可工具。它提供了广泛的功能，如API，Web服务等，还支持多种平台，如桌面，Web和移动。UFT脚本是用VisualBasic脚本语言编写的。AppiumAppium是一种开源移动应用程序测试工具。它用于自动化跨平台，本机，混合和基于Web的移动应用程序的测试。Appium可以自动化任何语言的任何移动应用程序，并且可以从测试代码中完全访问API和DB。Appium基于客户端-服务器架构，并从Selenium发展而来。CucumberCucumber是一种开源行为驱动的开发工具。它用于基于Web的应用程序自动化测试，并支持ruby，java，scala，groovy等语言。Cucumber读取以纯文本编写的可执行规范，并测试那些规范的测试应用程序。为了让黄瓜能够理解纯文本中的场景，我们必须遵循一些基本的语法规则，这些规则称为Gherkin。TestCompleteTestComplete是一个许可的自动化UI测试工具，用于跨桌面，Web，移动等不同平台测试应用程序。它提供了在一个浏览器上记录测试用例并在多个浏览器上运行它的灵活性，从而支持跨浏览器测试。TestComplete具有内置的对象识别算法，该算法唯一地标识对象并将其存储在存储库中。"}, "md/自动化面试题/1021.html": {"url": "md/自动化面试题/1021.html", "title": "面试题 0021", "keywords": "", "body": "题目你了解哪些不同类型的测试框架技术点我看答案了解四种类型的自动化测试框架技术。模块化测试框架该框架基于抽象概念。在此框架中，测试人员单独为测试中的每个模块创建脚本，然后按层次顺序组合这些脚本以创建大型测试用例。它在模块之间创建了一个抽象层，因此一个模块的测试脚本中的任何修改都不会影响任何其他模块。优点：更轻松的维护和测试用例的可扩展性。使用已编写脚本的模块创建测试用例更容易，更快捷。缺点：测试用例中嵌入了数据。因此，使用不同的数据执行相同的测试脚本是脚本级别的重大变化。数据驱动测试框架：在数据驱动的测试框架中，输入数据和对应于输入数据的预期输出数据存储在文件或数据库中，并且自动脚本为多组数据运行相同的测试步骤集。使用此框架，我们可以运行多个测试用例，其中只有输入数据不同，执行步骤相同。好处：减少需要执行的测试脚本的数量。我们使用不同的数据多次执行相同的脚本。减少自动化测试的编码。更灵活地维护和修复错误或增强功能。即使在自动化测试系统准备就绪之前，也可以创建测试数据。缺点：对于多组数据，只能将具有相同执行步骤集的类似测试用例组合在一起。不同的执行步骤集需要不同的测试用例。关键字驱动的测试框架：它是一个独立于应用程序的测试框架，它使用数据表和不言自明的关键字。关键字说明了对要测试的应用程序执行的操作，数据表提供了输入和预期的输出数据。基于关键字的测试是数据驱动测试的增量。好处：较少的编码和相同的脚本可用于多组数据。使用现有的操作关键字创建测试用例不需要自动化专业知识。可以在多个测试用例中使用相同的关键字。缺点：这个框架更复杂，因为它需要处理关键字操作以及数据输入。测试用例变得更长且更复杂，从而影响测试用例的可维护性。混合测试框架：该框架是所有上述测试框架（模块化，数据驱动和关键字驱动）的组合。在此框架中，测试用例是通过在模块化测试框架中组合它们从模块化脚本开发的。每个测试用例都使用一个驱动程序脚本，该脚本使用数据驱动框架中的数据文件和基于关键字的操作文件。好处：模块化，易于维护。较少的编码可以处理更多的测试用例。可以使用多组数据执行一个测试用例。缺点：复杂的阅读，维护和增强。"}, "md/自动化面试题/1022.html": {"url": "md/自动化面试题/1022.html", "title": "面试题 0022", "keywords": "", "body": "题目你在什么情况下更喜欢手工测试而不是自动化测试点我看答案如果符合以下条件，我们更喜欢手工测试该项目是短期的，与手工测试相比，编写脚本既费时又费钱。需要灵活性。自动化测试用例只可以按照特定的配置方式进行编程和运行。需要进行可用性测试。应用程序/模块是新开发的，没有以前的测试用例。需要进行临时或探索性测试。"}, "md/自动化面试题/1023.html": {"url": "md/自动化面试题/1023.html", "title": "面试题 0023", "keywords": "", "body": "题目敏捷方法论中的自动化测试是否有用点我看答案自动化测试对回归，冒烟测试很有用。传统瀑布模型中的所有这些类型的测试都发生在循环结束时，有时如果应用程序没有很大变动，我们甚至可能不需要进行回归测试。然而，在敏捷方法中，每次迭代都需要在添加新功能时执行回归测试用例。此外，由于当前sprint模块的功能测试用例需要添加到下一个sprint的回归套件中，因此回归套件本身在每个sprint之后都会保持增长。因此，敏捷方法中的自动化测试非常有用，有助于在sprint的较短时间内实现最大的测试覆盖率。"}, "md/自动化面试题/1024.html": {"url": "md/自动化面试题/1024.html", "title": "面试题 0024", "keywords": "", "body": "题目列出自动化测试的一些优点和缺点点我看答案好处：人力资源减少脚本具有可重用性在更短的时间内完成更多测试覆盖可靠性增强并行执行测试用例更快速完成任务缺点：开发和维护时间更长工具成本需要具备一定技能的人环境设置测试脚本调试是一个问题"}, "md/自动化面试题/1025.html": {"url": "md/自动化面试题/1025.html", "title": "面试题 0025", "keywords": "", "body": "题目列出手工测试的一些优点和缺点点我看答案好处：无需环境设置不需要编程知识建议用于动态变化的要求允许应用人类观察能力检测更多错误短期项目的成本较低灵活缺点：难以执行复杂的计算无可重用性时间长高风险的人为错误需要更多的人力资源"}, "md/自动化面试题/1026.html": {"url": "md/自动化面试题/1026.html", "title": "面试题 0026", "keywords": "", "body": "题目我们可以在没有框架的情况下进行自动化测试吗？如果是，那么为什么我们需要一个框架？点我看答案是的，即使不使用框架，我们也可以执行自动化测试。我们可以理解我们用于自动化的工具，并编程工具支持的编程语言中的步骤。框架是指导原则，而不是强制性规则，因此我们可以不使用框架，但如果我们创建框架并遵循框架，则增强和维护将很容易实现。如果我们在没有框架的情况下自动化测试用例，那么测试用例的编程脚本就不会有任何一致性。需要一个框架来提供一组指导方针，每个人都必须遵循这些指导方针，以保持测试脚本的可读性，可重用性和一致性。框架还为报告和日志记录功能提供了一个共同点。"}, "md/自动化面试题/1027.html": {"url": "md/自动化面试题/1027.html", "title": "面试题 0027", "keywords": "", "body": "题目你将如何自动化应用程序的基本登录功能测试用例点我看答案假设自动化工具和框架已经取代了测试环境。测试基本的登录功能：了解项目需求：登录功能将包含用户名文本框，密码文本框和登录按钮确定测试场景：对于登录功能，可能的测试场景是：空白的用户名和密码用户名和密码无效有效的用户名和无效的密码有效的用户名和密码使用与每个方案对应的数据准备数据输入文件确定用户名字段，密码字段和登录按钮定位方式对于每个测试场景，从数据文件中获取数据并进入相应的字段。输入数据后，程序单击登录按钮。在断言的帮助下，在测试脚本中验证负面场景的错误消息和正面场景的成功消息。运行测试套件并生成报告。"}, "md/自动化面试题/1028.html": {"url": "md/自动化面试题/1028.html", "title": "面试题 0028", "keywords": "", "body": "题目自动化测试是黑盒测试还是白盒测试？点我看答案自动化测试主要是黑盒测试，因为我们只是编写手工测试器为测试中的应用程序执行的步骤，而不需要知道应用程序的低级设计或代码。有时，自动化测试脚本需要访问被测应用程序中使用的数据库详细信息或更多编码细节，因此可以是一种白盒测试。因此，根据执行自动化的场景，自动测试可以是黑色或白盒类型的测试。"}, "md/自动化面试题/1029.html": {"url": "md/自动化面试题/1029.html", "title": "面试题 0029", "keywords": "", "body": "题目你每天编写多少个自动化测试用例点我看答案数量取决于测试用例的复杂程度。当复杂性有限时，我能够每天自动化5到6个测试用例。有时，我能够针对复杂场景自动化一个测试用例。我还将我的测试用例分解为不同的组件，例如，在非常复杂的情况下进行输入，进行计算，验证输出等，并且需要2天或更长时间。"}, "md/自动化面试题/1030.html": {"url": "md/自动化面试题/1030.html", "title": "面试题 0030", "keywords": "", "body": "题目哪些因素决定了自动化测试的有效性点我看答案运行脚本相比手动执行测试用例节省了时间发现缺陷数测试覆盖率或代码覆盖率维护时间与开发时间测试脚本的稳定性测试脚本可重用性被测软件的质量"}, "md/自动化面试题/1031.html": {"url": "md/自动化面试题/1031.html", "title": "面试题 0031", "keywords": "", "body": "题目哪些测试用例可以自动化？点我看答案冒烟测试用例烟雾测试也称为构建验证测试。每次发布新构建时都会运行冒烟测试用例，以检查构建的运行状况以接受执行测试。回归测试用例回归测试是一种测试，用于确保在添加新模块或修复错误之后，先前开发的模块按预期运行。回归测试用例在增量软件方法中非常关键，在每个增量阶段都添加了新功能。在这种情况下，在每个增量阶段执行回归测试。复杂计算测试用例涉及一些复杂计算以验证应用程序字段的测试用例属于此类别。复杂的计算结果更容易出现人为错误，因此在自动化时会产生准确的结果。数据驱动的测试用例具有相同步骤集并且随着数据的变化多次运行的测试用例被称为数据驱动的测试用例。这类测试用例的自动测试快速且经济高效。非功能测试用例负载测试和性能测试等测试用例需要具有多个用户和多个硬件或软件组合的模拟环境。对于每个组合或用户数，不可能手动设置多个环境。自动化工具可以轻松创建此环境，以轻松执行非功能性测试。"}, "md/自动化面试题/1032.html": {"url": "md/自动化面试题/1032.html", "title": "面试题 0032", "keywords": "", "body": "题目自动化测试生命周期包含哪些阶段点我看答案分析自动化测试需求制定自动化测试计划设计自动化测试用例搭建自动化测试框架编写自动化测试脚本运行自动化测试脚本分析自动化测试结果维护自动化测试脚本"}, "md/自动化面试题/1033.html": {"url": "md/自动化面试题/1033.html", "title": "面试题 0033", "keywords": "", "body": "题目什么是自动测试脚本点我看答案自动化测试脚本是一种用编程语言编写的简短程序，用于对被测应用程序执行一组指令，以验证应用程序是否符合要求。运行此程序时，测试结果通过或不通过，取决于应用程序是否符合预期。"}, "md/自动化面试题/1034.html": {"url": "md/自动化面试题/1034.html", "title": "面试题 0034", "keywords": "", "body": "题目为什么选择Selenium作为测试工具点我看答案是一个免费和开源的测试工具拥有庞大的用户群与帮助社区具有跨浏览器兼容性（Firefox，Chrome，InternetExplorer，Safari等）具有出色的平台兼容性（Windows，MacOS，Linux等）支持多种编程语言（Java，C＃，Ruby，Python，Pearl等）支持分布式测试社区持续更新与维护"}, "md/自动化面试题/1035.html": {"url": "md/自动化面试题/1035.html", "title": "面试题 0035", "keywords": "", "body": "题目什么是Selenium点我看答案Selenium是最受欢迎的自动化测试套件之一。Selenium旨在支持和鼓励基于Web的应用程序和各种浏览器和平台的功能方面的自动化测试。由于它存在于开源社区，它已成为测试专业人​​员中最受欢迎的工具之一。"}, "md/自动化面试题/1036.html": {"url": "md/自动化面试题/1036.html", "title": "面试题 0036", "keywords": "", "body": "题目Selenium有哪些组件点我看答案Selenium不仅仅是一个工具或实用程序，而是一个包含多个测试工具的软件包。这些工具中的每一个都旨在满足不同的测试和测试环境要求。Selenium集成开发环境（IDE）SeleniumIDE是一种记录和回放工具。它作为浏览器插件分发。SeleniumRemoteControl（RC）SeleniumRC是一个允许用户使用所需编程语言创建测试脚本的服务器。它还允许在大量浏览器中执行测试脚本。SeleniumWebDriverWebDriver是一个完全不同的工具，与SeleniumRC相比具有各种优势。WebDriver直接与Web浏览器通信，并使用其本机兼容性进行自动化。SeleniumGridSeleniumGrid用于在多个平台和环境中同时分发测试执行。"}, "md/自动化面试题/1037.html": {"url": "md/自动化面试题/1037.html", "title": "面试题 0037", "keywords": "", "body": "题目Selenium可以支持哪些测试类型点我看答案功能测试回归测试冒烟测试"}, "md/自动化面试题/1038.html": {"url": "md/自动化面试题/1038.html", "title": "面试题 0038", "keywords": "", "body": "题目Selenium的局限性是什么点我看答案Selenium支持仅测试基于Web的应用程序无法使用Selenium测试移动应用程序验证码无法使用Selenium进行测试测试报告需要第三方工具生成需要用户拥有一定的编程语言知识"}, "md/自动化面试题/1039.html": {"url": "md/自动化面试题/1039.html", "title": "面试题 0039", "keywords": "", "body": "题目WebDriver可以测试移动应用程序吗点我看答案WebDriver无法测试移动应用程序。WebDriver是一个基于Web的测试工具，因此可以测试基于移动浏览器上的应用程序。"}, "md/自动化面试题/1040.html": {"url": "md/自动化面试题/1040.html", "title": "面试题 0040", "keywords": "", "body": "题目Selenium中有哪些不同类型的定位器点我看答案定位器可以被称为在网页中唯一地标识web元素的地址。因此，为了准确而精确地识别网络元素，在Selenium中有不同类型的定位器：idnamexpathlinktextpartiallinktextclassnametagnamecssselector"}, "md/自动化面试题/1041.html": {"url": "md/自动化面试题/1041.html", "title": "面试题 0041", "keywords": "", "body": "题目什么是XPath点我看答案XPath用于根据XML路径定位Web元素。XML代表可扩展标记语言，用于存储，组织和传输任意数据。它将数据存储在与HTML标记非常相似的键值对中。两者都是标记语言，XPath可用于定位HTML元素。使用XPath定位元素背后的基础是遍历整个页面的各种元素之间的遍历，从而使用户能够找到具有另一个元素引用的元素。"}, "md/自动化面试题/1042.html": {"url": "md/自动化面试题/1042.html", "title": "面试题 0042", "keywords": "", "body": "题目Xpath中/和//之间有什么区别点我看答案/单斜杠用于创建具有绝对路径的Xpath，即将创建xpath以从文档根节点/起始节点开始选择。//双斜杠用于创建具有相对路径的Xpath，即将创建xpath以从文档中的任何位置开始选择。"}, "md/自动化面试题/1043.html": {"url": "md/自动化面试题/1043.html", "title": "面试题 0043", "keywords": "", "body": "题目什么时候应该使用SeleniumGrid点我看答案SeleniumGrid可用于在多个平台和浏览器上同时执行相同或不同的测试脚本，以实现分布式测试执行，在不同环境下进行测试并显著节省执行时间。"}, "md/自动化面试题/1044.html": {"url": "md/自动化面试题/1044.html", "title": "面试题 0044", "keywords": "", "body": "题目WebDriver中有哪些不同类型的等待点我看答案WebDriver中有两种类型的等待：隐式等待（智能等待）隐式等待用于在整个测试脚本中的每个连续测试步骤/命令之间提供默认等待时间（例如30秒）。因此，后续测试步骤仅在执行先前测试步骤/命令之后经过30秒时执行。显式等待显式等待用于暂停执行，直到满足特定条件或经过最大时间为止。与隐式等待不同，显式等待仅适用于特定实例。例如：等待元素出现在页面中"}, "md/自动化面试题/1045.html": {"url": "md/自动化面试题/1045.html", "title": "面试题 0045", "keywords": "", "body": "题目如何使用Selenium键入文本内容点我看答案可以使用sendKeys在文本框中输入字符串。"}, "md/自动化面试题/1046.html": {"url": "md/自动化面试题/1046.html", "title": "面试题 0046", "keywords": "", "body": "题目我们什么时候使用findElement和findElements点我看答案findElementfindElement用于查找当前网页中与指定定位符值匹配的第一个元素。请注意，只会获取第一个匹配元素。findElementsfindElements用于查找当前网页中与指定定位符值匹配的所有元素。请注意，将获取所有匹配元素并将其存储在WebElements列表中。"}, "md/自动化面试题/1047.html": {"url": "md/自动化面试题/1047.html", "title": "面试题 0047", "keywords": "", "body": "题目driver.close和driver.quit命令有什么区别点我看答案closeWebDriver的close方法关闭用户当前正在处理的Web浏览器窗口，或者我们也可以说WebDriver当前访问的窗口。该命令既不需要任何参数也不返回任何值。quit与close方法不同，quit方法关闭程序打开的所有窗口。与close方法相同，该命令既不需要任何参数也不返回任何值。"}, "md/自动化面试题/1048.html": {"url": "md/自动化面试题/1048.html", "title": "面试题 0048", "keywords": "", "body": "题目Selenium能否基于Windows弹出窗口点我看答案Selenium是一种自动化测试工具，仅支持Web应用程序测试。因此，无法使用Selenium处理基于Windows的弹窗。"}, "md/自动化面试题/1049.html": {"url": "md/自动化面试题/1049.html", "title": "面试题 0049", "keywords": "", "body": "题目我们如何处理基于Windows的弹出窗口点我看答案Selenium是一种自动化测试工具，仅支持Web应用程序测试，这意味着它不支持基于Windows的应用程序的测试。然而，单靠Selenium无法解决问题，但随着一些第三方干预，这个问题可以克服。有第三方工具可用于处理基于Windows的弹出窗口：AutoIT"}, "md/自动化面试题/1050.html": {"url": "md/自动化面试题/1050.html", "title": "面试题 0050", "keywords": "", "body": "题目如何使用WebDriver将鼠标悬停在Web元素上点我看答案WebDriver提供了更高级的复杂操作，鼠标悬浮，可以采用WebDriver.ActionChains对象中的move_to_element方法实现"}, "md/自动化面试题/1051.html": {"url": "md/自动化面试题/1051.html", "title": "面试题 0051", "keywords": "", "body": "题目什么是Unittest点我看答案Unittest是Python自带的一个单元测试框架，我们可以使用unittest为任何项目创建全面的测试套件。我们可以基于Unittest开发自己的测试框架"}, "md/自动化面试题/1052.html": {"url": "md/自动化面试题/1052.html", "title": "面试题 0052", "keywords": "", "body": "题目验证码可以自动化吗点我看答案不，验证码、拖动验证码无法自动化。验证码作为一种人机识别手段，其终极目的，就是区分正常人和机器的操作。验证码的作用在于区分人和机器，防止被暴力破解，提高破解密码的难度。如果验证码可以自动化那本身就是一个BUG"}, "md/自动化面试题/1053.html": {"url": "md/自动化面试题/1053.html", "title": "面试题 0053", "keywords": "", "body": "题目在决定使用软件测试工具和自动化时，要考虑哪些缺点或者注意事项？点我看答案因为软件在产品开发过程中会变化，测试工具也要随着变化。测试员可能会陷入陷阱，花费太多时间去设计测试工具和自动化，而忽略实际测试。容易过分依赖自动化。自己动手测试是无可替代的。"}, "md/自动化面试题/1054.html": {"url": "md/自动化面试题/1054.html", "title": "面试题 0054", "keywords": "", "body": "题目工具和自动化之间有何差别？点我看答案测试工具有助于测试，简化手工完成测试任务。自动化也是一种工具，但是它的执行不需要人工干预"}, "md/自动化面试题/1055.html": {"url": "md/自动化面试题/1055.html", "title": "面试题 0055", "keywords": "", "body": "题目最简单但很有效的测试自动化类型是什么？点我看答案记录和回放测试用例，只需要手工执行测试一次，这是非常有效的。它把测试员从单调的重复性操作中解放出来，给测试员更多的时间用来寻找难以发现的软件缺陷。"}, "md/自动化面试题/1056.html": {"url": "md/自动化面试题/1056.html", "title": "面试题 0056", "keywords": "", "body": "题目webdriver可以用来做接口测试吗？点我看答案有难度，不推荐因为webdriver是通过界面进行测试，效率比较低、稳定性差接口测试因该通过直接调用编程接口进行测试，效率高，稳定"}, "md/自动化面试题/1057.html": {"url": "md/自动化面试题/1057.html", "title": "面试题 0057", "keywords": "", "body": "题目你觉得自动化测试最大的缺陷是什么？点我看答案不稳定可靠性不易维护成本与收益"}, "md/自动化面试题/1058.html": {"url": "md/自动化面试题/1058.html", "title": "面试题 0058", "keywords": "", "body": "题目自动化测试用例从哪里来？点我看答案手工用例中抽取可以参考自动化用例的执行策略"}, "md/自动化面试题/1059.html": {"url": "md/自动化面试题/1059.html", "title": "面试题 0059", "keywords": "", "body": "题目什么是断言？点我看答案断言的英文是assertion，断言检查的英文是assertionchecking。断言是指定一个程序必须已经存在的状态的一个逻辑表达式，或者一组程序变量在程序执行期间的某个点上必须满足的条件。简单的说，对比期望值与实际值"}, "md/自动化面试题/1060.html": {"url": "md/自动化面试题/1060.html", "title": "面试题 0060", "keywords": "", "body": "题目启动浏览器的时候用到的是哪个webdriver协议？点我看答案http"}, "md/自动化面试题/1061.html": {"url": "md/自动化面试题/1061.html", "title": "面试题 0061", "keywords": "", "body": "题目webdriverclient的原理是什么？点我看答案webdriver是按照server–client的经典设计模式设计的。server端就是remoteserver，可以是任意的浏览器。当我们的脚本启动浏览器后，该浏览器就是remoteserver，它的职责就是等待client发送请求并做出响应；client端简单说来就是我们的测试代码，我们测试代码中的一些行为，比如打开浏览器，转跳到特定的url等操作是以http请求的方式发送给被测试浏览器，也就是remoteserver；remoteserver接受请求，并执行相应操作，并在response中返回执行状态、返回值等信息；"}, "md/自动化面试题/1062.html": {"url": "md/自动化面试题/1062.html", "title": "面试题 0062", "keywords": "", "body": "题目点击链接以后，Selenium是否会自动等待该页面加载完毕？点我看答案会的"}, "md/自动化面试题/1063.html": {"url": "md/自动化面试题/1063.html", "title": "面试题 0063", "keywords": "", "body": "题目如何去定位属性动态变化的元素？点我看答案xpath通过同级、父级、子级进行定位"}, "md/自动化面试题/1064.html": {"url": "md/自动化面试题/1064.html", "title": "面试题 0064", "keywords": "", "body": "题目id,name,class,xpath,cssselector这些属性，你最偏爱哪一种，为什么？点我看答案xpath几乎所有的元素都可以定位到，简单明了"}, "md/自动化面试题/1065.html": {"url": "md/自动化面试题/1065.html", "title": "面试题 0065", "keywords": "", "body": "题目自动化测试的时候是不是需要连接数据库做数据校验？点我看答案UI自动化不需要接口测试会需要"}, "md/自动化面试题/1066.html": {"url": "md/自动化面试题/1066.html", "title": "面试题 0066", "keywords": "", "body": "题目Selenium用例在运行过程中经常会出现不稳定的情况，也就是说这次可以通过，下次就没办法通过了，如何去提升用例的稳定性？点我看答案time.sleep(10)driver.implicitly_wait(30)"}, "md/自动化面试题/1067.html": {"url": "md/自动化面试题/1067.html", "title": "面试题 0067", "keywords": "", "body": "题目如何提高Selenium脚本的执行速度？点我看答案优化代码进行分布式并行测试，增加硬件投入"}, "md/自动化面试题/1068.html": {"url": "md/自动化面试题/1068.html", "title": "面试题 0068", "keywords": "", "body": "题目说出使用软件测试工具和自动化的一些好处。点我看答案它们可以加快执行测试用例的时间；能够提高软件测试员的效率，从而留出更多的时间进行测试计划和测试用例开发。它们精确且不会懈怠。"}, "md/自动化面试题/1069.html": {"url": "md/自动化面试题/1069.html", "title": "面试题 0069", "keywords": "", "body": "题目你们自动化脚本运行结束后会邮件自动发送测试报告么点我看答案可以运行结束后自动发送邮件到指定邮箱，但是我们不会这么做。测试技术后需要检查测试报告，分析测试失败原因后，才能发送邮件。如果由于页面元素的因素改变，而脚本未及时修改导致测试失败，应及时修正脚本，而不是直接将测试报告发出，为开发人员增加额外负担。"}, "md/自动化面试题/1070.html": {"url": "md/自动化面试题/1070.html", "title": "面试题 0070", "keywords": "", "body": "题目你们自动化脚本怎么运行的点我看答案我们采用CI持续集成运行代码，CI服务器为Linux服务器部署Jenkins，运行浏览器的机器为Windows，因此应用了SeleniumGRID服务器。在指定机器上开启SeleniumHUB，运行浏览器机器上开启SeleniumNODE并注册到HUB中。配置Jenkins任务，设置日程表来定时运行：CI服务器会自动从源代码管理服务器SVN中拉取最新测试源代码，并运行。运行结束后，Jenkins会收集测试运行后的报告并归档，通过Jenkins即可查看测试报告，并分析。如果出现测试异常，将尝试手动复现问题，并记录BUG，如果为脚本问题，将修正脚本。整理报告后发送邮件通知团队。"}, "md/自动化面试题/1071.html": {"url": "md/自动化面试题/1071.html", "title": "面试题 0071", "keywords": "", "body": "题目selenium如何获取当前页面标题点我看答案driver.title"}, "md/性能测试/index.html": {"url": "md/性能测试/index.html", "title": "性能测试面试题", "keywords": "", "body": "性能测试面试题"}, "md/性能测试/0001.html": {"url": "md/性能测试/0001.html", "title": "面试题 0001", "keywords": "", "body": "题目LoadRunner分哪三部分？点我看答案用户动作设计；场景设计；测试数据分析；"}, "md/性能测试/0002.html": {"url": "md/性能测试/0002.html", "title": "面试题 0002", "keywords": "", "body": "题目LoadRunner进行测试的流程？点我看答案创建虚拟用户脚本创建运行场景运行测试脚本监视场景分析测试的结果以上，最好是结合一个案例，根据以上流程来介绍。"}, "md/性能测试/0003.html": {"url": "md/性能测试/0003.html", "title": "面试题 0003", "keywords": "", "body": "题目什么是并发？在lordrunner中，如何进行并发的测试？集合点失败了会怎么样？点我看答案在同一时间点，支持多个不同的操作。LoadRunner中提供IP伪装，集合点，配合虚拟用户的设计，以及在多台电脑上设置，可以比较好的模拟真实的并发。集合点，即是多个用户在某个时刻，某个特定的环境下同时进行虚拟用户的操作的。集合点失败，则集合点的才操作就会取消，测试就不能进行。"}, "md/性能测试/0004.html": {"url": "md/性能测试/0004.html", "title": "面试题 0004", "keywords": "", "body": "题目请尽可能的详细描述你以往的性能测试工作的完整过程。点我看答案曾经做过网站方面的性能测试，虽然做的时间并不久（2个月吧），当时呢，是有位网站性能测试经验非常丰富的前辈带着我一起做。性能测试类型包括负载测试，强度测试，容量测试等负载测试：负载测试是一种性能测试指数据在超负荷环境中运行，程序是否能够承担。强度测试：强度测试是一种性能测试，他在系统资源特别低的情况下软件系统运行情况容量测试：确定系统可处理同时在线的最大用户数在网站流量逐渐加大的情况下，开始考虑做性能测试了，首先要写好性能测试计划，根据运营数据得出流量最大的页面（如果是第一次的话，一般是首页，下载页，个人帐户页流量最大，而且以某种百分比），Web服务器指标指标：AvgRps:平均每秒钟响应次数＝总请求时间/秒数；SuccessfulRounds：成功的请求；FailedRounds：失败的请求；SuccessfulHits：成功的点击次数；FailedHits：失败的点击次数；HitsPerSecond：每秒点击次数；SuccessfulHitsPerSecond：每秒成功的点击次数；FailedHitsPerSecond：每秒失败的点击次数；AttemptedConnections：尝试链接数；"}, "md/性能测试/0005.html": {"url": "md/性能测试/0005.html", "title": "面试题 0005", "keywords": "", "body": "题目如何理解压力、负载、性能测试？点我看答案性能测试是一个较大的范围，实际上性能测试本身包含了性能、强度、压力、负载等多方面的测试内容。压力测试是对服务器的稳定性以及负载能力等方面的测试，是一种很平常的测试。增大访问系统的用户数量、或者几个用户进行大数据量操作都是压力测试。而负载测试是压力相对较大的测试，主要是测试系统在一种或者集中极限条件下的相应能力，是性能测试的重要部分。100个用户对系统进行连续半个小时的访问可以看作压力测试，那么连续访问8个小时就可以认为负载测试，1000个用户连续访问系统1个小时也可以看作是负载测试。实际上压力测试和负载测试没有明显的区分。测试人员应该站在关注整体性能的高度上来对系统进行测试。"}, "md/性能测试/0006.html": {"url": "md/性能测试/0006.html", "title": "面试题 0006", "keywords": "", "body": "题目什么是系统瓶颈？点我看答案瓶颈主要是指整个软硬件构成的软件系统某一方面或者几个方面能力不能满足用户的特定业务要求，特定是指瓶颈会在某些条件下会出现，因为毕竟大多数系统在投入前。严格的从技术角度讲，所有的系统都会有瓶颈，因为大多数系统的资源配置不是协调的，例如CPU使用率刚好达到100％时，内存也正好耗尽的系统不是很多见。因此我们讨论系统瓶颈要从应用的角度讨论：关键是看系统能否满足用户需求。在用户极限使用系统的情况下，系统的响应仍然正常，我们可以认为改系统没有瓶颈或者瓶颈不会影响用户工作。因此我们测试系统瓶颈主要是实现下面两个目的：发现表面的瓶颈。主要是模拟用户的操作，找出用户极限使用系统时的瓶颈，然后解决瓶颈，这是性能测试的基本目标。发现潜在的瓶颈并解决，保证系统的长期稳定性。主要是考虑用户在将来扩展系统或者业务发生变化时，系统能够适应变化。满足用户目前需求的系统不是最好的，我们设计系统的目标是在保证系统整个软件生命周期能够不断适应用户的变化，或者通过简单扩展系统就可以适应新的变化。"}, "md/性能测试/0007.html": {"url": "md/性能测试/0007.html", "title": "面试题 0007", "keywords": "", "body": "题目简述负载测试与压力测试的区别。点我看答案压力测试（StressTesting）压力测试的主要任务就是获取系统正确运行的极限，检查系统在瞬间峰值负荷下正确执行的能力。例如，对服务器做压力测试时就可以增加并发操作的用户数量；或者不停地向服务器发送请求；或一次性向服务器发送特别大的数据等。看看服务器保持正常运行所能达到的最大状态。人们通常使用测试工具来完成压力测试，如模拟上万个用户从终端同时登录，这是压力测试中常常使用的方法。负载测试（VolumeTesting）用于检查系统在使用大量数据的时候正确工作的能力，即检验系统的能力最高能达到什么程度。例如，对于信息检索系统，让它使用频率达到最大；对于多个终端的分时系统，让它所有的终端都开动。在使整个系统的全部资源达到满负荷的情形下，测试系统的承受能力。"}, "md/性能测试/0008.html": {"url": "md/性能测试/0008.html", "title": "面试题 0008", "keywords": "", "body": "题目性能测试的流程？点我看答案测试需求分析测试计划制定与评审测试用例设计与开发，编写测试脚本测试执行与监控，开发场景分析测试结果编写性能测试报告·测试经验总结"}, "md/接口测试/index.html": {"url": "md/接口测试/index.html", "title": "接口测试面试题", "keywords": "", "body": "接口测试面试题"}, "md/接口测试/0001.html": {"url": "md/接口测试/0001.html", "title": "面试题 0001", "keywords": "", "body": "题目描述TCP/IP协议的层次结构，以及每一层中重要协议。点我看答案可以回答五层结构TCP/IP协议应用层/ApplicationHTTP、SMTP、FTP传输层/TransportTCP、UDP网络层/NetworkIP链路层/LinkARP、RARP"}, "md/接口测试/0002.html": {"url": "md/接口测试/0002.html", "title": "面试题 0002", "keywords": "", "body": "题目简述子网掩码的用途点我看答案子网掩码主要用来判断两个IP地址是否处在同一个局域网当中；子网掩码是由连续的2进制1组成的。子网掩码和IP地址进行按位与运算后，结果一致，表示处于一个局域网当中，如果不一致，表示不再一个局域网当中，需要寻找路由。"}, "md/接口测试/0003.html": {"url": "md/接口测试/0003.html", "title": "面试题 0003", "keywords": "", "body": "题目DNS是什么，它是如何工作的？点我看答案域名解析服务。用于将域名解析为IP，或反和将IP解析为域名。客户机可指定DNS服务器来解析，或用本机hosts文件进行解析。Windows下配置DNS服务器在《搭建Windows测试环境》中有。"}, "md/接口测试/0004.html": {"url": "md/接口测试/0004.html", "title": "面试题 0004", "keywords": "", "body": "题目TCP/UDP有哪些区别？点我看答案TCP-有连接，所以握手过程会消耗资源，过程为可靠连接，不会丢失数据，适合大数据量交换UDP-非可靠连接，会丢包，没有校验，速度快，无须握手过程TCPUDP是否连接面向连接面向非连接传输可靠性可靠的不可靠的应用场合传输大量数据少量数据速度慢快"}, "md/接口测试/0005.html": {"url": "md/接口测试/0005.html", "title": "面试题 0005", "keywords": "", "body": "题目ISO模型？HUB、tch、Router是ISO的第几层设备？点我看答案从底向上：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层HUB：1层（物理层）；Switch：2层（数据链路层）；Router：3层（网络层）"}, "md/接口测试/0006.html": {"url": "md/接口测试/0006.html", "title": "面试题 0006", "keywords": "", "body": "题目Fiddler如何篡改数据点我看答案设置断点修改Request，使用此方式伪造或篡改数据。"}, "md/接口测试/0007.html": {"url": "md/接口测试/0007.html", "title": "面试题 0007", "keywords": "", "body": "题目GET请求和POST请求的区别点我看答案GET使用URL或Cookie传参，而POST将数据放在BODY中。GET的URL会有长度上的限制，而POST的数据则可以非常大。不同浏览器要求不同，如IE6要求最大256POST比GET安全。get请求能够被缓存，请求会保存在浏览器的浏览（历史）记录中，请求的数据会显示在地址栏中，不安全，请求的url能够保存为浏览器书签（收藏夹）post请求不能被缓存，请求不会保存在浏览器浏览记录中；请求的数据不会显示的地址栏中，相对安全；请求的url无法保存为浏览器书签一般get请求用来获取数据，post请求用来发送数据。get请求数据只支持ASCII类型，post请求数据类型没有限制，支持二进制数据。"}, "md/接口测试/0008.html": {"url": "md/接口测试/0008.html", "title": "面试题 0008", "keywords": "", "body": "题目http响应状态码有哪些分类？点我看答案1XX信息，服务器收到请求，需要请求者继续执行操作。2XX成功，操作被成功接收并处理。3XX重定向，需要进一步的操作以完成请求。4XX客户端错误，请求包含语法错误或无法完成请求。5XX服务器错误，服务器在处理请求的过程中发生了错误。"}, "md/接口测试/0009.html": {"url": "md/接口测试/0009.html", "title": "面试题 0009", "keywords": "", "body": "题目接口测试的流程点我看答案熟悉业务和需求分析接口文档编写接口测试计划编写、评审接口测试用例提测后开始测试提交测试报告"}, "md/接口测试/0010.html": {"url": "md/接口测试/0010.html", "title": "面试题 0010", "keywords": "", "body": "题目API测试有哪些优势？点我看答案更快及更高的测试覆盖率。API测试有助于我们降低测试成本。通过API测试，我们可以在GUI测试之前找到小错误。在GUI测试期间，这些小错误将变得更大。因此，在API测试中发现这些错误将对公司具有成本效益。API测试与语言无关。API测试在测试核心功能方面非常有用。我们可以在没有用户界面的情况下测试API。在GUI测试中，我们需要等到应用程序可用于测试核心功能。API测试有助于我们降低风险。"}, "md/接口测试/0011.html": {"url": "md/接口测试/0011.html", "title": "面试题 0011", "keywords": "", "body": "题目列举一些最常用的HTTP方法？点我看答案GET：从服务器检索数据POST：将数据添加到服务器中的现有文件或资源PUT：它允许您替换服务器中的现有文件或资源DELETE：它允许您从服务器中删除数据PATCH：用于对资源进行部分修改选项：用于描述目标资源的通信选项HEAD：它要求响应与GET请求相同，但没有响应正文"}, "md/接口测试/0012.html": {"url": "md/接口测试/0012.html", "title": "面试题 0012", "keywords": "", "body": "题目进行接口测试前需要了解接口的哪些内容？点我看答案接口的功能描述是什么？接口的请求地址是什么？接口请求的方法是什么？（GET、POST）接口有上传数据吗？上传的数据是什么？接口返回的状态码是多少？（HTTP状态码、响应内容内的代码）接口返回报文体的格式和编码是什么？（XML、JSON、UTF-8）接口返回的内容体是什么？前置条件是什么？后置条件是什么？"}, "md/接口测试/0013.html": {"url": "md/接口测试/0013.html", "title": "面试题 0013", "keywords": "", "body": "题目简述cookie和session的区别点我看答案session在服务器端，cookie在客户端（浏览器）session的运行依赖sessionid，而sessionid是存在cookie中的，也就是说，如果浏览器禁用了cookie，同时session也会失效，存储Session时，键与Cookie中的sessionid相同，值是开发人员设置的键值对信息，进行了base64编码，过期时间由开发人员设置cookie安全性比session差"}, "md/接口测试/0014.html": {"url": "md/接口测试/0014.html", "title": "面试题 0014", "keywords": "", "body": "题目给你一个接口该怎么去测点我看答案梳理接口文档设计接口测试用例使用工具调用接口验证调用返回数据"}, "md/接口测试/0015.html": {"url": "md/接口测试/0015.html", "title": "面试题 0015", "keywords": "", "body": "题目接口测试有哪些挑战点我看答案参数选择参数组合接口调用顺序输入输出验证"}, "md/Linux/index.html": {"url": "md/Linux/index.html", "title": "Linux 面试题", "keywords": "", "body": "Linux面试题"}, "md/Linux/0001.html": {"url": "md/Linux/0001.html", "title": "面试题 0001", "keywords": "", "body": "题目在Linux系统中，一个文件的访问权限是755，其含义是什么？点我看答案755表示该文件所有者对该文件具有读、写、执行权限，该文件所有者所在组用户及其他用户对该文件具有读和执行权限。"}, "md/Linux/0002.html": {"url": "md/Linux/0002.html", "title": "面试题 0002", "keywords": "", "body": "题目Linux中，一般怎么隐藏文件？点我看答案文件名以一个.开头"}, "md/Linux/0003.html": {"url": "md/Linux/0003.html", "title": "面试题 0003", "keywords": "", "body": "题目两台linux操作系统互传文件点我看答案scp命令通过XFtp工具"}, "md/Linux/0004.html": {"url": "md/Linux/0004.html", "title": "面试题 0004", "keywords": "", "body": "题目查看目录或文件的大小点我看答案du-h"}, "md/Linux/0005.html": {"url": "md/Linux/0005.html", "title": "面试题 0005", "keywords": "", "body": "题目如何修改一个文件夹以及其子文件为所有用户都可读可写可执行。点我看答案chmod-R777/etc/snmp.conf"}, "md/Linux/0006.html": {"url": "md/Linux/0006.html", "title": "面试题 0006", "keywords": "", "body": "题目绝对路径用什么符号表示点我看答案/"}, "md/Linux/0007.html": {"url": "md/Linux/0007.html", "title": "面试题 0007", "keywords": "", "body": "题目当前目录用什么符号表示点我看答案."}, "md/Linux/0008.html": {"url": "md/Linux/0008.html", "title": "面试题 0008", "keywords": "", "body": "题目切换目录用什么命令点我看答案cd"}, "md/Linux/0009.html": {"url": "md/Linux/0009.html", "title": "面试题 0009", "keywords": "", "body": "题目怎么查看当前路径点我看答案pwd"}, "md/Linux/0010.html": {"url": "md/Linux/0010.html", "title": "面试题 0010", "keywords": "", "body": "题目查看进程点我看答案ps"}, "md/Linux/0011.html": {"url": "md/Linux/0011.html", "title": "面试题 0011", "keywords": "", "body": "题目目录创建用什么命令点我看答案mkdir"}, "md/Linux/0012.html": {"url": "md/Linux/0012.html", "title": "面试题 0012", "keywords": "", "body": "题目复制文件用什么命令点我看答案cp"}, "md/Linux/0013.html": {"url": "md/Linux/0013.html", "title": "面试题 0013", "keywords": "", "body": "题目创建文件用什么命令点我看答案touch"}, "md/Linux/0014.html": {"url": "md/Linux/0014.html", "title": "面试题 0014", "keywords": "", "body": "题目修改权限用什么命令点我看答案chmod"}, "md/Linux/0015.html": {"url": "md/Linux/0015.html", "title": "面试题 0015", "keywords": "", "body": "题目查看文件内容可以用哪些命令点我看答案vicatmorelesstailhead"}, "md/Linux/0016.html": {"url": "md/Linux/0016.html", "title": "面试题 0016", "keywords": "", "body": "题目移动文件用什么命令点我看答案mv"}, "md/Linux/0017.html": {"url": "md/Linux/0017.html", "title": "面试题 0017", "keywords": "", "body": "题目删除空文件夹用什么命令点我看答案rmdir"}, "md/Linux/0018.html": {"url": "md/Linux/0018.html", "title": "面试题 0018", "keywords": "", "body": "题目连同目录与目录下的文件一块删除用什么命令点我看答案rm-r"}, "md/Linux/0019.html": {"url": "md/Linux/0019.html", "title": "面试题 0019", "keywords": "", "body": "题目对一个文件内容统计行号、单词数、字节数，用什么命令点我看答案wc"}, "md/Linux/0020.html": {"url": "md/Linux/0020.html", "title": "面试题 0020", "keywords": "", "body": "题目哪个命令专门查看后台任务点我看答案jobs"}, "md/Linux/0021.html": {"url": "md/Linux/0021.html", "title": "面试题 0021", "keywords": "", "body": "题目终止进程用什么命令，带什么参数？点我看答案kill-9"}, "md/Linux/0022.html": {"url": "md/Linux/0022.html", "title": "面试题 0022", "keywords": "", "body": "题目查看当前在线用户用什么命令？点我看答案w"}, "md/Linux/0023.html": {"url": "md/Linux/0023.html", "title": "面试题 0023", "keywords": "", "body": "题目查看使用过的命令列表用什么命令点我看答案history"}, "md/Linux/0024.html": {"url": "md/Linux/0024.html", "title": "面试题 0024", "keywords": "", "body": "题目查看磁盘使用空间用什么命令点我看答案df-h"}, "md/Linux/0025.html": {"url": "md/Linux/0025.html", "title": "面试题 0025", "keywords": "", "body": "题目查看IP地址及接口信息用什么命令点我看答案ipaddr"}, "md/Linux/0026.html": {"url": "md/Linux/0026.html", "title": "面试题 0026", "keywords": "", "body": "题目通过什么命令查找执行命令点我看答案which"}, "md/Linux/0027.html": {"url": "md/Linux/0027.html", "title": "面试题 0027", "keywords": "", "body": "题目什么是硬链接和软链接点我看答案硬链接创建的是一个和原文件相同的inode，但两个文件指向的是同一个数据块，即在磁盘上只存在一份数据，这一点和文件复制不同。软链接类似于快捷方式，给出的是指向源文件的路径，相当于一个文件指针。"}, "md/数据库/index.html": {"url": "md/数据库/index.html", "title": "数据库面试题", "keywords": "", "body": "数据库面试题"}, "md/数据库/0001.html": {"url": "md/数据库/0001.html", "title": "面试题 0001", "keywords": "", "body": "题目存储过程是什么？点我看答案存储过程（StoredProcedure）是一组为了完成特定功能的SQL语句集，经编译后存储在数据库。用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是SQL语句和可选控制流语句的预编译集合，以一个名称存储并作为一个单元处理。存储过程存储在数据库内，可由应用程序通过一个调用执行，而且允许用户声明变量、有条件执行以及其它强大的编程功能。存储过程在创建时即在服务器上进行编译，所以执行起来比单个SQL语句快。"}, "md/数据库/0002.html": {"url": "md/数据库/0002.html", "title": "面试题 0002", "keywords": "", "body": "题目存储过程的优点？点我看答案存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般SQL语句每执行一次就编译一次，所以使用存储过程可提高数据库执行速度。当对数据库进行复杂操作时（如对多个表进行Update,Insert,Query,Delete时），可将此复杂操作用存储过程封装起来与数据库提供的事务处理结合一起使用。存储过程可以重复使用，可减少数据库开发人员的工作量安全性高，可设定只有某此用户才具有对指定存储过程的使用权"}, "md/数据库/0003.html": {"url": "md/数据库/0003.html", "title": "面试题 0003", "keywords": "", "body": "题目存储过程的缺点？点我看答案如果更改范围大到需要对输入存储过程的参数进行更改，或者要更改由其返回的数据，则需要更新程序集中的代码以添加参数、更新GetValue()调用，等等，比较繁琐。可移植性差由于存储过程将应用程序绑定到具体的数据库，因此使用存储过程封装业务逻辑将限制应用程序的可移植性。代码可读性差，相当难维护"}, "md/数据库/0004.html": {"url": "md/数据库/0004.html", "title": "面试题 0004", "keywords": "", "body": "题目什么是主键，有什么作用？点我看答案主键是表中的唯一标示键。作用：保证实体的完整性，加快数据库的操作速度，增加新的表记录时，数据库会自动检索新记录的主键值，不允许该值与其他表中记录的主键重复，数据库会按主键值的顺序显示记录，如果没有设定主键，则按输入的顺序显示记录。"}, "md/数据库/0005.html": {"url": "md/数据库/0005.html", "title": "面试题 0005", "keywords": "", "body": "题目什么是外键，有什么作用？点我看答案外键是主键的从属，表示了两个表之间的联系。作用：使用外键可以建立数据之间的关联，还可以避免冗余。"}, "md/数据库/0006.html": {"url": "md/数据库/0006.html", "title": "面试题 0006", "keywords": "", "body": "题目索引有什么优缺点？点我看答案索引通过创建唯一性的索引，可以保证表中数据的唯一性加速数据的检索速度加快表与表之间的连接在使用分组与排序数据检索时，可以显著检索分组与排序的时间在查询的过程中使用优化隐藏器，提供系统性能。缺点创建索引需要时间，且随着数据量的增加而增加索引需要占用物理空间当对表中数据进行修改时，索引也要动态维护，降低了数据的维护速度"}, "md/数据库/0007.html": {"url": "md/数据库/0007.html", "title": "面试题 0007", "keywords": "", "body": "题目你了解几种约束？点我看答案主键为了保证实体完整性，具体是为了保证表中的实体或行的唯一性，控制表中的行不重复不允许空值不允许重复一个表中只允许最多一个主键唯一为了保证实体完整性，具体是为了保证表中某个列下的行数据不重复有的数据库允许空值不允许重复检查约束通常为了空值列的行数据必须符合要求，比如范围要求，例如性别只能输入男或女，年龄只能输入0-100非空表示数据不能为空，必须输入数据外键通常是为了与其它表建立关联一个表中设置了主键，这个表称为主表，外键所在的表（表称为外表、相关表）中外键列的行数据可以有重复，对应的外键值来源于主表中主键列下的数据默认值当表中有大量重复数据时，或者是有些数据难以人为输入的时候，比如时间（尤其精确度要求很高）时，就可以默认值"}, "md/数据库/0008.html": {"url": "md/数据库/0008.html", "title": "面试题 0008", "keywords": "", "body": "题目什么是SQL？点我看答案结构化查询语言（StructuredQueryLanguage）简称SQL，是一个数据库查询语言。作用：用于存取数据、查询、更新喝管理关系型数据库系统。"}, "md/数据库/0009.html": {"url": "md/数据库/0009.html", "title": "面试题 0009", "keywords": "", "body": "题目MYSQL、Oracle、SqlService的区别点我看答案所属公司：MYSQL是由瑞典MYSQLAB公司开发，目前属于Oracle旗下产品；Oracle是由美国ORACLE公司（甲骨文）开发的一组核心软件产品；SqlServer是由Microsoft、Sybase和Ashton-Tate三家公司共同开发的，目前主属Microsoft；sql语句的灵活性：MYSQL对sql语句更灵活，比如：limit功能，insert可以一次插入多行数据，select某些管理数据可以不加from；oracle对sql语句的感觉更加稳重传统一些；SqlServer对sql语句那绝了，两个成语概括：脚踏实地，步步为营；保存数据的持久性：MYSQL是在数据库更新或者重启，则会丢失数据；Oracle把提交的sql操作线写入了在线联机日志文件中，保持到了磁盘上，可以随时恢复；SqlServer从2014之后，也拥有了完全持久和延迟持久特性；提交方式：MYSQL默认是自动提交（变量autocommit为ON）；oracle默认不自动提交，需要用户手动提交（commit）；SqlServer默认是自动提交，用户可手动停止（KILL）；对事务的支持：MYSQL在innodb存储引擎的行级锁的情况下才可支持事务；Oracle则完全支持事务；SqlServer在非自动提交时才可支持事务；对并发性的支持：MYSQL以表级锁（行级锁依赖于表索引）为主，如果一个session的加锁时间过长，会让其他session无法更新此表中的数据，即“悲观并发控制”；Oracle使用行级锁，对资源锁定的粒度要小很多，并且不依赖索引，对并发性的支持要好很多，即“乐观并发控制”；SqlServer在表、表的分页、索引键以及单独的数据行上支配共享锁、排它锁、以及更新锁，简单地说：读取时用共享锁，修改时用排它锁，更新锁则是共享锁和排他锁的一种混合；逻辑备份：MYSQL逻辑备份时要锁定数据，才能保证备份的数据是一致的，会影响正常业务；Oracle逻辑备份时不锁定数据，且备份的数据是一致；SqlServer逻辑备份时要锁定数据，才能保证备份的数据是一致的，会影响正常业务；复制备份：MYSQL复制服务器配置简单，但主库出问题时，丛库有可能丢失一定的数据；Oracle既有推或拉式的传统数据复制，也有dataguard的双机或多机容灾机制，还有成熟的热备工具rman，主库出现问题时，可以自动切换备库到主库，但配置管理较复杂；SqlServer的仅复制备份是独立于常规SQLServer备份序列的SQLServer备份。通常，进行备份会更改数据库并影响其后备份的还原方式。只用于：在不影响数据库总体备份和还原过程的情况下，为特殊目的而进行的备份。性能诊断：MYSQL的诊断调优方法较少，主要有慢查询日志；Oracle有各种成熟的性能诊断调优工具，能实现很多自动分析、诊断功能。比如awr、addm、sqltrace、tkproof等；SqlServer性能检测工具有sqlserverprofiler，性能调优工具有数据库引擎优化顾问，简单好用还炫酷；权限与安全：MYSQL的用户与主机有关，更容易被仿冒主机及ip，有可乘之机，没什么意义；Oracle的用户和root用户权限彼此分离，权限与安全概念比较传统，中规中矩；SqlServer本机可用windows验证登录，远程则用SqlServer验证登录（即sa登录）；相关服务：MYSQL是轻量型数据库，并且免费开源，没有服务恢复数据；Oracle是重量型数据库，收费，Oracle公司对Oracle数据库有任何服务；SqlServer是重量型数据库，收费（与Java有合作），也有支持供应商；总结：MYSQL优点：体积小、速度快、总体拥有成本低，开放源码，适合中小型网站。Oracle优点：使用方便、功能强大，可靠性好、安全性好、可移植性好、适应高吞吐量，适用于各类大、中、小、微机环境。SqlServer优点：图形化用户界面，丰富的编程接口工具，与WindowsNT完全集成，支持分布式的分区视图，适用于Win的Web技术的开发。"}, "md/数据库/0010.html": {"url": "md/数据库/0010.html", "title": "面试题 0010", "keywords": "", "body": "题目数据库三大范式是什么点我看答案第一范式：每个列都不可以再拆分第二范式：在第一范式的基础上，非主键列完全依赖于主键，而不能是依赖于主键的一部分第三范式：在第二范式的基础上，非主键列只依赖于主键，不依赖于其他非主键在设计数据库结构的时候，要尽量遵守三范式，如果不遵守，必须有足够的理由。比如性能。事实上我们经常为了性能而妥协数据库的设计。"}, "md/数据库/0011.html": {"url": "md/数据库/0011.html", "title": "面试题 0011", "keywords": "", "body": "题目数据库经常使用的函数点我看答案count：返回行数sum：求和max：最大值min：最小值avg：平均值"}, "md/数据库/0012.html": {"url": "md/数据库/0012.html", "title": "面试题 0012", "keywords": "", "body": "题目什么是索引点我看答案索引是一种特殊的文件，它们包含着对数据表里所有记录的引用指针。索引是一种数据结构。数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用B树及其变种B+树。更通俗的说，索引就相当于目录。为了方便查找树中的内容，通过对内容建立索引形成目录。索引是一个文件，它需要占用物理空间。"}, "md/数据库/0013.html": {"url": "md/数据库/0013.html", "title": "面试题 0013", "keywords": "", "body": "题目简述有哪些索引和作用点我看答案索引的作用：通过索引可以大大的提高数据库的检索速度，改善数据库性能。唯一索引：不允许有两行具有相同的值主键索引：为了保持数据库表与表之间的关系聚集索引：表中行的物理顺序与键值的逻辑（索引）顺序相同非聚集索引：聚集索引和非聚集索引的根本区别是表记录的排列顺序和与索引的排列顺序是否一致复合索引：在创建索引时，并不是只能对一列进行创建索引，可以与主键一样，将多个组合为索引全文索引：全文索引为在字符串数据中进行了复杂的词搜索提供有效支持"}, "md/数据库/0014.html": {"url": "md/数据库/0014.html", "title": "面试题 0014", "keywords": "", "body": "题目索引使用场景点我看答案当数据多且字段值有相同的值的时候用普通索引当字段多且字段值没有重复的时候用唯一索引当有多个字段名都经常被查询的话用复合索引普通索引不支持空值，唯一索引支持空值但是，若这张表增删改多且查询较少的话，就不要创建索引了，因为增删改会让索引刷新。不会出现在where条件中的字段不该建立索引"}, "md/数据库/0015.html": {"url": "md/数据库/0015.html", "title": "面试题 0015", "keywords": "", "body": "题目使用索引查询一定能提高查询的性能吗？点我看答案通常，通过索引查询数据比全表扫描快。但是也需要注意它的代价：索引需要空间来存储，也需要定期维护，每当有记录在表中增删改，索引本身也会被修改，这意味着需要付出额外的磁盘I/O。因为索引需要额外的存储空间和处理，那些不必要的索引反而会使查询反应时间变慢。索引范围查询适用于两种情况：基于一个范围的检索，一般查询返回结果小于表中记录数的30%基于非唯一性索引的检索"}, "md/数据库/0016.html": {"url": "md/数据库/0016.html", "title": "面试题 0016", "keywords": "", "body": "题目什么是数据库事务点我看答案事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一个一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。"}, "md/数据库/0017.html": {"url": "md/数据库/0017.html", "title": "面试题 0017", "keywords": "", "body": "题目事务四大特性点我看答案关系型数据库需要遵循ACID原则：原子性：事务是最小的执行单元，不允许分割，事务的原子性确保动作要么全部完成，要么完全不起作用。一致性：执行事务前后，数据保持一致，多个事务对同一数据读取的结果是相同的。隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的。持久性：一个事务被提交之后，它对数据库中的数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。"}, "md/数据库/0018.html": {"url": "md/数据库/0018.html", "title": "面试题 0018", "keywords": "", "body": "题目什么是视图，为什么要使用它？点我看答案所谓视图，本质上是一种虚拟表，在物理上是不存在的，其内容与真实的表相似，包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值形式存在。行和列数据来自定义视图查询所引用基本表，并且在具体引用视图时动态生成。视图使开发者只关心感兴趣的某些特定数据和所负责的特定任务，只能看到视图中所定义的数据，而不是视图所引用表中的数据，从而提高数据库中数据的安全性。"}, "md/数据库/0019.html": {"url": "md/数据库/0019.html", "title": "面试题 0019", "keywords": "", "body": "题目视图有什么特点点我看答案视图的列可以来自不同的表，是表的抽象和在逻辑意义上建立的新关系视图是由基本表（实表）产生的表（虚表）组成视图的建立和删除不影响基本表对视图的内容的更新直接影响基本表当视图来自多个基本表时，不允许添加和删除数据"}, "md/数据库/0020.html": {"url": "md/数据库/0020.html", "title": "面试题 0020", "keywords": "", "body": "题目什么时候用到视图点我看答案视图根本用途：简化SQL查询，提高开发效率。以下为常见场景：重用SQL语句。简化复杂的SQL操作。在编写查询后，可以方便的重用它而不必知道它的基本查询细节。使用表的组成部分，而不是整个表。保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。"}, "md/数据库/0021.html": {"url": "md/数据库/0021.html", "title": "面试题 0021", "keywords": "", "body": "题目视图的优点点我看答案查询简单化：视图能简化用户的操作。数据安全性：视图使用户能以多种角度看待同一数据，能够对机密数据提供安全保护。逻辑数据独立性：视图对重构数据库提供了一定程度的逻辑独立性。"}, "md/数据库/0022.html": {"url": "md/数据库/0022.html", "title": "面试题 0022", "keywords": "", "body": "题目视图的缺点点我看答案性能：数据库必须把视图的查询转化成对基本表的查询，如果这个视图是由复杂的多表查询所定义，那么，即使是视图的一个简单查询，数据库也把它变成一个复杂的结合体，需要花费一定的时间。修改限制：当用户视图修改视图的某些行为时，数据库必须把它转化为对基本表的某些行的修改，事实上，当从视图中插入或删除时，情况也是这样。对于简单视图来说，这是很方便的，但是对于比较复杂的视图，可能是不可修改的。"}, "md/数据库/0023.html": {"url": "md/数据库/0023.html", "title": "面试题 0023", "keywords": "", "body": "题目什么是游标点我看答案游标是系统为用户开设的一个数据缓冲区，存放SQL语句的执行结果，每个游标区都有一个名字。用户可以通过游标逐一获取记录并赋值给主变量，交由主语言进一步处理。"}, "md/数据库/0024.html": {"url": "md/数据库/0024.html", "title": "面试题 0024", "keywords": "", "body": "题目什么是触发器点我看答案触发器是用户定义在关系表上的一类由事件驱动的特殊的存储过程。触发器是指一段代码，当出发某个事件时，自动执行这些代码。"}, "md/数据库/0025.html": {"url": "md/数据库/0025.html", "title": "面试题 0025", "keywords": "", "body": "题目SQL六种关联查询点我看答案CROSSJOIN：交叉连接INNERJOIN：内连接LEFTJOIN：左外连接RIGHTJOIN：又外连接UNIONJOIN：联合连接FULLJOIN：全连接MYSQL不支持全连接"}, "md/数据库/0026.html": {"url": "md/数据库/0026.html", "title": "面试题 0026", "keywords": "", "body": "题目什么是子查询点我看答案条件：一条SQL语句的查询结果做为另一条查询语句的条件或查询结果嵌套：多条SQL语句嵌套使用，内部的SQL查询语句称为子查询"}, "md/数据库/0027.html": {"url": "md/数据库/0027.html", "title": "面试题 0027", "keywords": "", "body": "题目drop、delete与truncate的区别点我看答案drop删除数据库对象，无法回滚delete删除表数据，可回滚truncate清空全表数据，无法回滚不再需要一张表的时候用drop，删除表数据部分行用delete，清空表中全部数据用truncate。"}, "md/数据库/0028.html": {"url": "md/数据库/0028.html", "title": "面试题 0028", "keywords": "", "body": "题目union与unionall区别点我看答案如果使用unionall，不会合并重复的记录行效率union高于unionall"}, "md/数据库/0029.html": {"url": "md/数据库/0029.html", "title": "面试题 0029", "keywords": "", "body": "题目怎么优化sql查询点我看答案对查询进行优化，应尽量避免全表扫描，首先应考虑where及orderby涉及的列上建立索引用索引可以提高查询速度select子句中避免使用*号尽量避免在where子句中对字段进行isnull判断，会导致引擎放弃索引而进行全表扫描，使用isnotnullwhere子句中使用or来连接条件，也会导致引擎放弃使用索引而进行全表扫描in和notin也要慎用，会导致全表扫描"}, "md/数据库/0030.html": {"url": "md/数据库/0030.html", "title": "面试题 0030", "keywords": "", "body": "题目大表数据查询，怎么优化点我看答案优化shema、sql语句、索引添加缓存：memcached、redis主从复制，读写分离垂直拆分，根据模块的耦合度，将一个大的系统分为多个小的系统，也就是分布式系统水平拆分，针对数据量大的表，这一步最麻烦，最能考验技术水平，要选择一个合理的shardingkey，为了又号的查询效率，表结构也要改动，做一定的冗余，应用也要改，SQL中尽量带shardingkey，将数据定位到限定的表上去查，而不是扫描全部表。"}, "md/数据库/0031.html": {"url": "md/数据库/0031.html", "title": "面试题 0031", "keywords": "", "body": "题目LIKE声明中的%和_是什么意思点我看答案%对应于0个或多个任意字符。_对应一个任意字符"}, "md/笔试题/index.html": {"url": "md/笔试题/index.html", "title": "笔试题", "keywords": "", "body": "笔试题"}, "md/笔试题/0001.html": {"url": "md/笔试题/0001.html", "title": "笔试题 0001", "keywords": "", "body": "笔试题0001招商银行自动化笔试题1.单项选择题测试过程中为什么要制定执行策略？A、提高沟通效率B、提高执行效率C、提高案例设计效率D、减少不必要的案例关于冒烟测试与回归测试，下面描述错误的是？A、冒烟测试验证通过后，才能正式执行；B、冒烟测试案例一般选择主流程案例，目的是为了通过最基本的测试；C、回归测试主要是在新的版本验证之前版本的BUG已修复且未引发新的BUG；D、回归测试案例与冒烟测试案例一样，一般选择主流程案例。在软件测试阶段，测试步骤按次序可以划分为以下几步：A、单元测试、集成测试、系统测试、验收测试B、验收测试、单元测试、系统测试、集成测试C、单元测试、集成测试、验收测试、系统测试D、系统测试、单元测试、集成测试、验收测试狭义的性能测试是指什么？A、发现处理大容量数据时的程序异常B、发现大规模负责、高强度不间断持续的数据处理中的异常C、确认程序可以挣扎处理其对存储的需求D、评估程序的响应时间和吞吐率在输入条件规定了输入值的集合或规定了“必须如何”的情况下，可确立A、一个有效等价类和一个无效等价类B、一个有效等价类和多个无效等价类C、多个无效等价类和多个无效等价类关于性能测试，以下哪个描述是错误的？A、如业务需求中未对系统性能有要求，就不需要考虑性能测试。B、性能测试是通过工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试。C、负载测试和压力测试都属于性能测试，两者可以结合进行。下列哪项表达不正确A、软件测试是有风险的行为B、完全测试是不可能的C、测试无法显示潜在的软件缺陷D、找到的缺陷越多软件缺陷越少一下属于测试执行前的准备工作的是：A、测试出口检查B、冒烟测试C、测试缺陷记录D、回归测试集成测试，也叫组装测试或者（）测试A、系统B、联合C、部署D、验收实现网页自动化，主要用到什么模块A、SeleniumB、PywinautoC、PykeyboardD、Unittest2.多项选择题出现无法重现的缺陷，你会A、不能重现，应该没啥问题，不管了B、记录缺陷，描述发现过程C、找开发定位，提供步骤和数据D、最终无法解决，邮件知会相关业务开发并评估风险关于错误推测法，以下哪些描述是正确的？A、错误推测法是基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性的设计测试用例的方法。B、错误推测法是指设计的案例是反向的。C、错误推测法一般作为测试过程中的补充测试。软件测试的原则，以下正确的是：A、测试用例的编写仅需根据有效和预期的输入情况，无需根据无效和未预料到的输入情况进行案例编写。B、测试用例中一个必须的部分是对与其输出或结果的定义。C、程序某部分存在更多错误的可能性，与该部分已发现错误的数量成正比。D、检查程序是否“未做其应当做的”仅是测试的一半，测试的另一半是检查程序是否“做了其不应该做的”。常见的案例设计方法有哪些？A、等价类划分B、边界值分析法C、错误推测法D、因果图法E、正交实验法以下哪些属于软件缺陷？A、软件未实现产品说明书要求的功能B、软件出现了产品说明书指明不应该出现的错误C、软件实现了产品说明书未提到的功能D、软件未实现产品说明书虽未明确提及但应该实现的目标以下关于自动化测试的表述，正确的有：A、自动化测试能够提高测试效率B、一个业务产品的不同模块，只需使用一种自动化测试框架C、有了自动化测试框架，也还需要手工测试网站的兼容性测试，通常会考虑哪些方面A、使用多种wev浏览器测试网页，如IE、googleB、使用浏览器的不同版本，如IE9、IE11C、使用不同的操作系统，如Windows、LinuxD、使用不同的测试人员交叉测试以下关于正交实验法的说法，正确的是A、可控制测试用例的数量B、测试用例具有一定的覆盖率C、并没有覆盖所有的组合，需要根据经验补充D、不需要考虑条件之间的关联性，有无关联关系均可使用下列测试案例的基本要素中，哪三个要素信息是最核心的。A、测试前置条件B、测试步骤C、案例编号D、案例预期结果下面那些是软件测试的任务：A、发现程序的错误B、提供错误诊断信息C、缺陷修复D、预防软件错误3.解答题给定一个数组和目标数target，找出数组中a，b，c满足a+b+c=target的所有组合。例如：arr=&lt;-3,-1,-2,1,2,3&gt;，target=0。输出为&lt;(-3,1,2),(-2,-1,3)&gt;仔细阅读下面的需求及设计出的测试用例。要尽可能全面地测试该需求，需要哪些测试用例？需求：常用的长度单位有千米、米、分泌、厘米、毫米、纳米等，其转换关系如下：1千米=1000米、1米=10分米、1米=100厘米、1米=1000毫米、1米=\\(1*10^9\\)纳米。现在开发实现了一个长度转换的工具，一个文本框、两个下拉列表框（选择转换前的长度单位、转换后的单位）、换算按钮，需要测试该工具的正确性。详细步骤：在文本亏输入转换前的距离，如100.56下拉选择转换前的单位，如千米下拉选择转换后的单位，如米点击换算按钮，弹出换算后的结果，如100.56千米，换算后结果是100560米仔细阅读下面的需求及设计出的测试用例。要尽可能全面地测试该需求，需要哪些测试用例？请补充完整。需求：某银行需要对没有证件的客户注册时走审批流程。步骤一、输入客户中文名称，要求必输，长度在100个汉字内，不能含特殊字符。输入客户英文名称，要求非必输，长度在200个英文字符内。下拉框选择国别，要求必选。选择无证注册类型：有“FBI”，“SPV”，“OTH”，要求必选。输入备注，要求非必输，长度在2000个字符内。当选择无证注册类型为“OTH”时，点击“确定”，上述信息传入到审批平台。步骤二、审批平台一级审批人登入系统检查信息审批通过进入二级审批流程，否则终止。审批平台二级审批人登入系统检查信息审批通过。步骤三、二级审批完成后，系统注册成功，审批界面展示客户号。4.答案点我看答案单项选择题BDACAADBBA多项选择题BCDACBCDABCDEABCDACABCBCDABDABD解答题三数相加合为目标数，题目案中，提示了两个输出可以确定，三数和不能重复arr=[-3,-1,-2,1,2,3]target=0L=[]foriinrange(len(arr)-2):forjinrange(i+1,len(arr)-1):forkinrange(j+1,len(arr)):ifarr[i]+arr[j]+arr[k]==0:L.append((arr[i],arr[j],arr[k]))print(L)"}, "md/笔试题/0002.html": {"url": "md/笔试题/0002.html", "title": "笔试题 0002", "keywords": "", "body": "笔试题0002请手写出以下sql语句user表uidnameage在user表中插入一条数据，具体数据自己编造。insertintouservalues(1,&#x27;李四&#x27;,20);在user表中更新问题1这条数据的age字段updateusersetage=50whereuid=1;在user表中以uid为条件查询出问题1这条数据的age字段selectagefromuserwhereuid=1;在user表中以uid为条件删除问题1这条数据deletefromuserwhereuid=1;如何在sql语句中将unix时间戳转换成格式化时间（年-月-日时：分：秒）SELECTTO_CHAR(时间戳/(60*60*24)+TO_DATE(&#x27;1970-01-0108:00:00&#x27;,&#x27;YYYY-MM-DDHH24:MI:SS&#x27;),&#x27;YYYY-MM-DDHH24:MI:SS&#x27;)FROMdual;HTTP协议Get、Post有什么区别？get与post本质上没有区别，程序员在向服务器索取资源时用get，发送资源给服务器用post。get参数通过url传递，post放在requestbody中。get比post更不安全，因为参数直接暴露在url中，所以不能用来传递敏感信息。get请求只能进行url编码，而post支持多种编码方式HTTP协议组成部分？请求：状态行、请求头、消息主体；响应：状态行、响应头、响应正文常用状态码有哪些以及含义（1，2，3，4）1XX信息，服务器收到请求，需要请求者继续执行操作。2XX成功，操作被成功接收并处理。3XX重定向，需要进一步的操作以完成请求。4XX客户端错误，请求包含语法错误或无法完成请求。5XX服务器错误，服务器在处理请求的过程中发生了错误。写出你常用的Linux命令，用什么查看log？tail查看日志；vi编辑文件；history查看历史记录；pwd当前工作目录；cd跳转目录；ls当前目录下有什么请写出以下示例的功能测试用例示例：我想要回家，让你给我买一张票，然后设计测试用例确定需求（回家回哪，需要什么票，买什么时候的票）开始测试功能测试（我去买票（买火车票，飞机票），买到票（什么时候），回来给你）可靠性测试（我去买票过程中被撞死了，票买不到怎么办，延期了，买那个点的票没了怎么办让我帮他买票的人的身份，比如是否有特殊优待，如军人，1米2以下儿童等，身份证丢了，或者票丢了，责任划分）可维护性测试（票是否可保存完好）兼容性（还不同人的去买，我中间招人去买，我坐车走路）算法测试（我通过不同的渠道买票花费的时间）竞品测试（别的人怎么买的票）安全性测试（身份信息保密）性能测试（一个身份证买多张票，同时多张身份证买多张票）如何看待自动化和手动测试？怎样的一个比例才是健康的？自动化测试与手工测试相辅相成，自动化可以加快执行测试用例的时间；能够提高软件测试员的效率，从而留出更多的时间进行测试计划和测试用例开发。自动化测试用例占总量的20%～30%"}, "md/简历/index.html": {"url": "md/简历/index.html", "title": "简历", "keywords": "", "body": "简历简历在应聘中的重要作用是不言而喻的。HR（人力资源）通过筛选简历来寻找合适的应聘者。如何在众多的简历中被一眼选中，至少不被淘汰，是很值得探讨的。有的人很优秀，但是简历写得不上档次，仍旧很有可能被淘汰掉。有的人很会推销自己，即使不是牛人，仍旧会得到面试机会。1.简历要点那么HR究竟想看什么呢？求职意向、薪资要求、教育背景、工作年限及工作经验等无疑是重中之重。因此，我们就要把这些重点写在前面。除了个人简况（如姓名、出生年月日等）也写在前面之外，诸如论文发表、获奖情况、培训经历等都要放在这些重点的后面，不可喧宾夺主。简介需要开门见山，例如想找什么工作、想要多少钱，一目了然。这帮助HR节省了时间，获得HR初步的好感。简历不讲究文采，不能写成文言文，一定要清晰、客观、无歧义。简历的格式有一定之规，不要在格式上突出个性，基本没有意义，关键是有实力、有内容。正是由于简历的重要性，简历才会被反复修改，通常能达到30遍以上。这儿主要介绍简历中的注意事项。2.注意事项求职意向和薪资要求应当放在最前面有些应聘者，尤其是学生，不知道自己适合做什么工作，因此不写求职意向。这些应聘者期盼HR为你选择。可是实际上这可能吗？HR是没有义务帮你选一份工作的。他们也不可能比你更了解你自己。所以求职意向一定要写得具体。如果是刚毕业的学生，对薪水没有什么要求，薪资要求一栏中可以写面议。工作年限也要放在醒目位置有几年工作经验是HR衡量应聘者水平的重要标准之一，因此要放在紧跟求职意向和薪资要求的地方。教育背景放在工作经验之前这样安排是由于时间顺序，多数人都是先上学再工作，所以HR思考的习惯是要先看学校再看工作经验。教育背景按逆序排，即最新的教育经历放在最前面。在整份简历中，涉及时间的部分都是逆序排列。这样做是因为更近的经历反映你最高的水平，也更接近你目前真实的情况。教育背景中几乎没有必要写中学阶段在教育背景中只需列出读大学之后的教育经历即可。中学阶段没有学专业，列上中学意义不大。在整份简历中，如无特别必要（获奥林匹克奖还是可以炫耀一下的），没有必要提及中学阶段。学生时代的项目经验可以写成工作经验如果是刚毕业的学生，则可以在工作经验一栏中填入学生时代的项目经验。如果已工作过，学生时代的项目经验可以不写。工作经验要有层次条理每一份工作经验都应按照单位名称、项目名称、职务、工作内容及工作业绩的顺序来组织。工作内容和工作业绩如果不好分开，也可以写在一起。如果没有什么工作业绩，则可以把工作业绩省略。同时应尽量列出具体的数据，避免模糊的描述。例子好的描述：业绩全部门第1名，平均每月提交有效Bugs120个。不好的描述：工作异常出色被大家称道。先写最重要的工作内容和最好的工作业绩。莫写自我评价对自己的认识很难是客观的，再妄图用自己对自己的主观评价来影响HR的判断，这本身就是不合逻辑的。HR不喜欢这种非客观的东西。HR判断你的水平是通过你简历中的各种经历来判断的。这种自我评价是学生时代填各种档案表格遗留下来的习惯，在写应聘简历时可以抛弃了。只有摆事实、用数据，才更有说服力。所有不相关所应聘工作的内容一概不要写有很多人好大喜功，把一大堆东西罗列上简历，也不管和所应聘的工作相关与否。这些应聘者以为HR会对自己的多种能力很感兴趣。实际上，HR根本不会考查你其他领域是否优秀，他们要找的只是适合于这份工作的人。写一堆杂七杂八的事，除了让HR感觉不着边际、啰嗦、遮蔽重点之外，没有什么好处。当然，如果你要应聘高管，多种能力可能会使HR感兴趣。对于一个普通员工来说，关键是能否胜任本职工作。例子例如，在大学时是校篮球队的，也是学院记者团特约撰稿人，但在简历中根本就不会提及这些，因为这些和软件测试工程师的本职工作没有关系。简历内容可超过一页纸咨询了西门子、微软等资深HR，她们一致认为简历内容不可超过一页A4纸这种说法是错误的。只要是与工作相关内容，超出一页无妨。工作经验丰富、项目经验丰富、专业方面获奖丰富，这都是给应聘者加分的事情，怎能拘泥不写？当然，语句宜精练。时间不能有空白在有的简历中，毕业后有一段时间是空白的，HR不免会有丰富的联想。因此，即使这段时间你是赋闲在家学习，也应当写清楚。相片可以不要由于软件工程师对相貌要求不高，所以简历中可以不放相片。当然，放相片也没有坏处。相片可以放在简历左上角或右上角的位置。千万注意别黑白照！！！从强到弱排列专业技能在专业技能部分，应先写精通的专业技能，再写熟练、熟悉等。因为前面几行比较醒目。薪水增幅通常最高为30%猎头常常说，在IT行业，跳槽后工资增幅最高通常为原先的30%。除非你非常优秀。因此在写期望薪水时，自己心里要有杆秤。不要编造说一个谎，就要十个谎言来圆谎。说谎的成本太大。"}, "md/简历/简历格式.html": {"url": "md/简历/简历格式.html", "title": "格式", "keywords": "", "body": "简历格式简历文件名：姓名+学历（简历中的学历）+软件测试工程师个人信息之类采用表格形式排版字体中文字体：黑体英文字体：Calibri字号：标题三号副标题四号加粗，段前空行正文五号行间距1.5列表编号列表编号缩进：0.5厘米文本缩进：0厘米编号后：空格页边距1.75厘米2.25厘米3.17厘米2厘米"}, "md/简历/专业技能.html": {"url": "md/简历/专业技能.html", "title": "专业技能", "keywords": "", "body": "专业技能专业技能要求简介，一条只做一件事情1.理论精通测试理论，能够熟练根据测试需求与测试方法设计测试用例精通测试理论和方法，熟练编写测试计划、设计测试用例，输出测试报告等相关文档精通黑盒测试设计方法，了解白盒测试设计方法，熟悉软件测试流程，书写各类测试文档精通软件测试技术、方法、流程，熟练编写测试相关文档精通软件测试理论，能够将软件测试的相关理论运用到软件的测试工作中精通软件测试理论与测试过程，能够将理论运用到软件测试工作中精通软件测试理论与软件测试过程，能够根据测试需求与测试方法设计测试用例精通软件测试理论与软件测试过程，能够将软件测试的相关理论运用到软件测试工作中能独立制定测试计划、设计测试用例、编写测试报告、操作指导能够独立编写测试计划，测试报告能够独立分析项目业务流程，编写测试用例，参与测试需求分析及测试用例评审能够根据测试需求与测试方法设计测试用例能够根据需求设计出测试方法与测试用例能够熟练掌握测试用例、测试相关文档的编写，保证测试用例的覆盖能够与开发人员高效的沟通协调处理bug问题并协助定位bug熟练掌握软件测试、开发流程熟练掌握软件测试理论和测试流程，并且能够熟练运用到实际工作中去熟悉ST整个测试过程，能够独立完成系统测试任务熟悉敏捷开发及测试模式和相关流程（参与招商证券敏捷Scrum专业培训）熟悉软件测试流程以及黑盒测试用例的编写方法熟悉项目的测试方案，测试计划，测试进度，质量管理，测试度量指标制定和测试持续改进掌握黑盒用例设计方法，如等价类、边界值分析等并在项目中应用，了解白盒测试用例设计方法2.Linux独立完成自动化测试环境部署熟练使用Linux操作系统的基本Shell命令熟练使用Linux操作系统的基本命令及简单操作熟练使用WebSphere+Linux搭建项目测试环境熟练掌握Linux常用命令熟练掌握Linux常用命令，搭建部署测试环境熟练掌握Linux常用命令、Linux下测试环境搭建熟悉Linux操作系统及其常用的基本命令，可以熟练搭建测试环境熟悉Linux常用命令，具备Linux下搭建简单测试环境的能力熟悉Linux的常用命令，能独立搭建测试环境、项目版本更新发包熟悉Linux基本操作命令熟悉Linux基本操作命令，能对测试环境进行基本的维护熟悉Linux系统常用操作命令，具备Linux下搭建主流测试环境的能力熟悉Windows操作系统、熟悉Linux基本操作命令并搭建相关测试环境掌握Linux常用命令，应用Shell脚本搭建测试环境3.SQL熟练使用MySQL数据库查询、子查询、增、删、改、查等命令熟练使用MySQL数据库基本增、删、查、改操作熟练使用Oracle数据库SQL增删改查以及多表查询熟练使用SQL语句，对对Oracle，Mysql等关系型数据库进行操作熟练使用sql语句对Oracle，Mysql关系型数据库进行增、删、改、查操作熟练使用SQL语句进行增删改查，以及分组排序熟练使用SQL语句增删改查，多表关联查询熟练使用SQL语言进行增删改查熟练掌握MySql、SqlServer数据库常用的增删改查熟练掌握基本SQL语言：基本操作、存储过程、触发器、视图熟悉Mysql数据库，掌握SQL增删改查操作熟悉MySQL、Oracle日常数据应用，熟悉其基本命令熟悉Oracle数据库，如：增加、删除、修改、查看等熟悉Oracle、Mysql常用数据库基本操作熟悉Sqlserver，Mysql等数据库，熟练使用数据库进行增、删、改、查、多表查询等熟悉常见的数据库基本操作，如：Oracle、Mysql数据库熟悉常用数据库如MySQL，熟悉SQL增删改查熟悉常用数据库如PLSQL，熟悉SQL基本的增删改查熟悉主流数据库Oracle、MySQL、MongoDB日常数据应用及常用SQL语句4.语言熟练使用Python语言，有较强代码阅读能力熟练使用Python语言编写自动化测试脚本熟练掌握Python编程语言，以及Unittest测试框架，有较强的程序阅读能力熟练掌握Python编程语言，有一定的代码阅读能力熟练掌握Python、Java语言熟悉Python编程语言，可独立编写自动化脚本熟悉Python语言有较强代码阅读能力熟悉Unittest测试框架和DDT数据驱动熟悉基本的前端知识：HTML、JavaScript、CSS掌握Python语言，能够编写自动化测试脚本掌握语言C、C++、Python语言5.自动化搭建自动化测试框架，部署自动化测试环境独立搭建Python+Selenium自动化测试框架，以及PageObject、公共模块等封装独立搭建Python+Unittest+Selenium+DDT自动化测试数据驱动框架，以及公共模块等封装独立搭建Python+Unittest+Selenium自动化测试框架，以及公共模块等封装结合DDT、HTMLReport等Python库进行数据驱动并生成报告了解RobotFramework框架进行Web自动化能独立搭建Python+Selenium数据驱动测试框架，能配合Jenkins持续集成能独自搭建web测试框架Python+Unittest+Selenium+ddt+HTMLReport能够独立部署自动化测试环境使用Python+Unitest+Selenium+DDT+HTMLReport框架进行WEB自动化测试熟练Python+Unittest+Selenium+DDT+PO搭建数据关键字混合驱动测试框架熟练搭建Python+Selenium进行WEBUI自动化测试熟练搭建Python+Unittest+Selenium/Requests/Appium自动化测试框架熟练搭建自动化测试框架：Python+Unittest+Selenium/Appium+ddt+HTMLReport熟练使用DDT做数据驱动熟练使用Python+Selenium+Unittest框架对web端进行自动化测试熟练使用Python+Unittest+Selenium对web端进行自动化测试熟练使用SeleniumGrid进行WEB自动化分布式并行测试熟练使用SeleniumGrid进行分布式并行自动化测试熟练使用SeleniumGrid进行分布式并行自动化测试熟练使用Selenium进行WebUI自动化测试，掌握Gird可实现并发测试熟练应用WebUI自动化测试库：Selenium熟练掌握SeleniumWEBUI自动化测试工具集熟练掌握Selenium对Web端进行UI自动化测试熟练掌握Selenium对Web端进行自动化测试熟悉Python+Selenium搭建测试框架，进行WEBUI自动化测试熟悉Python+Unittest+Selenium搭建测试框架，进行WEBUI自动化测试熟悉Python+Selenium环境部署并使用Python语言进行UI自动化脚本开发熟悉RobotTest自动化测试工具6.API独立搭建Python+Requests接口测试框架了解HTTP、TCP/IP等计算机网络基本协议了解Postman、JMeter等接口测试工具了解Python+Requests做接口自动化测试了解SoapUI自动化测试工具能够编写自动化测试脚本对接口进行自动化测试能够用Postman和JMeter工具做简单的接口测试熟练Python+Unittest+Requests进行API接口自动化测试熟练搭建Python+Requests进行接口自动化测试熟练使用Badboy录制脚本，使用JMeter对接口进行压力测试等熟练使用Fiddler工具进行辅助接口测试熟练使用Fiddler抓包辅助接口测试熟练使用Fiddler抓包工具熟练使用Fiddler,Postman,JMeter工具进行抓包及接口测试熟练使用Fiddler、Postman进行API测试熟练使用Fiddler、Postman进行接口测试熟练使用JMeter对接口进行功能、性能测试熟练使用JMeter进行接口与性能测试熟练使用JMeter、Postman进行接口测试熟练使用Postman、Fiddler、JMeter等工具辅助测试熟练使用Postman、JMeter进行接口测试熟练使用Python+Requests编写自动化测试脚本，对接口进行自动化测试熟练使用Python+Requests进行接口自动化测试熟练使用接口测试工具：Postman、JMeter熟练应用API自动化测试库：Requests熟练掌握Postman、soapui、JMeter接口测试工具了解常用的网络协议熟悉FiddlerWeb抓包，并配合JMeter做接口测试熟悉HTPP、TCP/IP等常见网络协议熟悉HTTP/HTTPS协议，熟练掌握Fiddler抓包方法熟悉JMeter、Postman工具进行接口测试，了解性能测试工具，如：JMeter熟悉Python+Requests进行接口自动化测试熟悉常用的网络协议，例如：OSI七层网络模型熟悉计算机网络的基本知识，TCP/IP、HTTP等网络协议熟悉接口测试流程，使用fiddle进行抓包，利用Postman工具辅助开发调试接口熟悉使用OpenAPI、MQ工具进行功能接口测试7.APP独立搭建Python+Appium自动化测试环境解monkey对APP进行性能测试了解ADB、Monkey、Appium等APP测试工具了解APP软件的压力测试工具Monkey以及AndroidADB命令了解GT、Emmagee等APP性能测试工具了解Python+Appium自动化框架，Android平台自动化用例编写能独立完成B/S架构项目测试、多项APP测试，4年测试经验，并有银行项目测试经验使用Emmagee对APP客户端进行性能测试熟练Python+Unittest+Appium进行APP自动化测试熟练搭建Appium自动化测试环境，完成AndroidAPP分布式并行测试熟练搭建Appium自动化测试环境，完成APP自动化测试熟练搭建Python+Appium进行APP自动化测试熟练使用ADB、Monkey等APP测试工具熟练使用Appium对手机APP进行自动化测试熟练使用Monkey对app进行稳定性及压力测试，并进行日志抓取熟练使用Python+Appium框架完成APP自动化测试熟练使用UIautomator工具对APP进行元素定位熟练应用APPUI自动化测试库：Appium熟练运用ADB，Monkey等app测试工具熟练掌握Appium对APP端进行UI自动化测试熟练掌握常用的AndriodADB命令，了解monkey对APP进行压力测试熟悉ADB常用指令熟悉Androidadb命令，熟练使用Monkey对APP进行压力测试熟悉Androidadb命令、熟练使用Monkey性能测试工具熟悉APP测试，使用Monkey对app进行稳定测试熟悉APP与web自动化测试熟悉Appium环境部署并使用Python进行App自动化脚本开发熟悉Monkey命令用于APP稳定性测试熟悉Python+Unittest+Appium进行APP自动化测试熟悉部署Python+Unittest+Appium框架移动端自动化测试环境熟悉部署Python+unittest+Appium框架移动端自动化测试熟悉使用Appium、ADB命令、monkey稳定性测试工具做Android自动化测试8.性能熟练使用Loadrunner进行并发压力测试，进行简单测试分析熟练使用性能测试工具：JMeter、LoadRunner熟悉使用PCMark、LoginVSI等性能测试工具9.持续集成了解Jenkins持续集成了解Loadrunner脚本的录制与并发，对压测结果做基本分析了解LoadRunner性能测试熟练部署Jenkins持续集成服务熟练使用Jenkins持续集成自动化测试工具熟练使用Jenkins工具持续集成，进行自动化测试熟练使用Jenkins环境部署，并能进行相关的持续集成测试熟练使用LoadRunner工具进行脚本录制，回放，调试并做压力并发测试熟练使用LoadRunner性能测试工具，并对数据进行分析提出优化的解决方案熟练应用Jenkins自动运行测试脚本熟悉Jenkins环境部署与安装，并能进行相关的持续集成测试熟悉Jenkins，可实现WebUI自动化可持续集成熟悉Loadrunner、JMeter等自动化测试工具及Fiddler抓包调试工具应用Jenkins进行持续集成测试10.工具代码管理工具使用SVN，使用jenkins进行持续集成熟练操作SVN版本管理工具及Redmine,Bugfree等Bug管理工具熟练使用BugFree、禅道等缺陷管理工具提交Bug清单熟练使用DTS，BugFree等BUG管理工具熟练使用Fiddler抓包工具禅道bug管理工具以及SVN版本管理器熟练使用MindManager、xmind进行测试要点提取，编写测试计划、用例及撰写测试报告熟练使用SVN配置管理工具，BUG管理工具禅道，抓包工具fiddler熟练使用SVN源码管理工具熟练使用SVN、GIT等版本管理熟练使用测试工具：Fiddler、Postman、JMeter、Monkey、SVN熟练使用测试相关工具：Fiddler、JMeter、Postman、SVN熟练使用测试相关工具：JMeter、Postman、SVN熟练使用禅道BUG管理工具、Fiddler抓包工具、SVN版本控制系统熟练使用禅道，TAPD等项目管理工具，能够独立执行测试，分析、跟踪Bug熟练使用禅道、Bugfree等BUG管理工具熟练使用禅道、悟空等缺陷管理工具和SVN、Git等版本控制工具熟练掌握fidder抓包工具熟练掌握常用测试工具：Postman、Fiddler、JMeter、Jenkins、Monkey、SVN、Git熟练掌握常用测试工具：Postman、Fiddler、JMeter、LoadRunner熟悉eDts、Bugfree等缺陷管理工具，以及SVN版本管理工具熟悉Fiddler抓包工具熟悉测试理论、熟练使用的用例管理工具如Testlink、bugfree、Zentao熟悉常见的bug管理系统，如：禅道、jira熟悉使用缺陷管理工具，如：BugFree，ALM版本管理工具SVN掌握常用的缺陷管理工具，如ALM,禅道，Redmine等掌握常用管理工具：ATT、TAPD、ARS（分别为腾讯用例管理工具、需求缺陷管理工具、文件发布系）、SVN（文件存放与管理）掌握常用管理工具：禅道、DPM、bugzilla、SVN、WinSCP、XMind、firebug"}, "md/简历/岗位职责.html": {"url": "md/简历/岗位职责.html", "title": "岗位职责", "keywords": "", "body": "岗位职责1.基础SIT测试以及UAT测试，参与业务验收按照测试需求编写用例，完成测试执行按照测试用例在对应的模块逐项执行，反馈并更新用例按照需求规格分析项目需求，梳理出各个测试要点框架把控各阶段的时间节点，进行工作任务的分配、安排版本上线支撑业务、BA做验收测试报表测试（主要测试数据的正确性）编写操作手册，指导行方业务人员使用系统编写测试报告编写测试报告、编写版本操作手册编写测试报告和用户使用手册编写测试计划，分配测试任务，设计测试用例，并进行相关评审编写测试计划，工作进行合理分配编写测试计划，提取测试要点，编写测试用例编写测试计划、思维导图、测试用例编写测试日报和测试周报、SIT巡回测试报告编写测试用例，并进行评审编写测试用例，与同事交流，组织测试用例的评审，提高用例覆盖率编写测试用例并组织测试用例的评审及优化完善工作编写产品使用手册，权限配置文件编写接口测试用例，评审用例，执行用例编写每日测试计划以及测试日报编写网站的测试点和测试用例编写系统操作手册编写业务通用流程文档标出测试重点，分配模块，写测试用例，测试人员与开发人员一起评审测试用例标出测试重点，撰写测试用例，测试人员与开发人员一起评审测试用例并对缺陷进行跟踪处理并实时跟踪Bug，与开发人员积极沟通并完成回归测试部署环境、更改配置准备测试数据参加需求会议，需求评审参加用户需求评审与测试需求分析参与测试案例编写，执行测试用例参与测试计划，测试需求，用例评审会议参与测试计划、测试需求、用例评审会议，保证测试用例的质量参与测试计划方案的设计，协助测试经理做好测试计划方案参与测试结果评估，编写系统测试报告参与测试需求交接、需求串讲与反串讲，根据需求设计测试场景、用例参与测试用例评审，并优化测试用例参与迭代计划会，从测试角度提出自己的建议参与各项会议，对测试过程中和实际开发中不一致论点进行沟通与论证参与流程IT变革系统推行工作，为一线人员讲解系统流程变革点并指导用户使用新系统参与评审需求、评审场景以及测试用例参与少量客户端的版本测试，辅导新同学参与团队测试会议，提出问题，并学习新的技能参与项目的需求分析，关注项目需求的可行性，并能预先评估项目的风险参与项目的需求分析和评审，熟悉需求及业务流程参与项目的总体测试计划、测试需求、测试方案，输出自动化测试计划参与项目需求分析、梳理测试要点、编写测试用例、设计测试数据参与项目需求分析与评审，并制定测试计划参与需求、文档设计、测试用例的评审，提出问题或建议参与需求变更讨论，给行方负责人整理变更记录及文档参与需求分析，提出自己的理解与看法参与需求评审，从测试角度提出自己的建议参与需求评审，提出自己对产品需求的建议，确定需求说明书参与需求评审，组织小组内需求串讲参与需求评审、软件设计评审，并提出优化意见参与需求评审、用例评审参与需求评审会，从测试角度剖析功能点，并做好评审记录参与需求评审会，从测试角度剖析功能点并提出自己的优化建议参与需求梳理评审及计划会议参与需求讨论，并画出流程图，串讲需求参与需求讨论，并针对不合理之处给出自己的意见参与需求讨论，给出自己的意见参与验收测试，收集用户反馈信息参与用例评审、搭建测试环境参与执行测试用例，提交缺陷参与制定测试方案和测试计划测试报告输出测试阶段结束后对项目文档编写及补充《用户操作手册》《测试报告》查阅项目资料和需求说明书，分析客户的需求搭建并维护测试环境搭建测试环境，执行测试用例搭建项目测试环境，安装JDK、adb并配置环境，安装APP到模拟器搭建项目测试环境安装JDK、adb并配置环境，安装APP到模拟器以及真机定期分享团队内部自动化进展与技术定期开展业务知识及系统操作内训独立编写测试用例独立执行项目测试，进行缺陷跟踪和软件质量分析对版本迭代的测试情况进行汇总，分析测试结果，编写测试报告对测试结果进行分析与汇总，得出测试结果，编写测试报告对测试情况进行汇总，编写测试报告对测试中发现的问题进行详细分析和准确定位，与开发人员讨论缺陷解决方案对产品质量和测试情况做综合评估，写测试报告对产品质量和测试情况做综合评估，撰写测试报告对所有功能进行功能性的覆盖测试对项目测试情况进行汇总，分析测试结果，编写测试报告对项目总的问题进行跟踪分析和报告，及时发现测试中出现的问题并且合理解决问题对于概率性出现的bug，与开发进行沟通，协助开发重现并定位bug对源程序进行冒烟测试，以确定软件的基本功能的实现对组内测试技术钻研和分享，进行测试过程和测试方法的持续改进发现bug及时提交至Zentao，跟踪关注bug的修复情况发现、定位并持续跟踪产品缺陷发现缺陷，利用缺陷管理工具提交缺陷Bug分解需求、编写测试用例、制定测试策略、执行及跟踪测试、输出测试报告分析测试报告并记录测试问题，维护和优化自动化测试框架分析测试结果，记录测试问题并进行总结分析需求流程，画出流程图负责H5小程序功能测试负责版本测试环境的管理、搭建、协调统一分配以及测试环境问题的处理负责带batch，汇总各个系统阻塞问题，并协调各系统负责人尽快解决问题负责单店与连锁区别的测试负责前台的部分模块的用例设计和执行负责为客户提供股票行情相关的信息咨询负责维护老版本的基本使用以及兼容测试负责系统的案例更新及修改负责项目版本管理，通过WebService部署项目负责项目的测试需求分析，负责重点模块的测试用例编写负责项目实施与收集商家反馈问题负责执行测试用例并发现和跟进bug，通过DPM系统管理版本和BUG负责执行测试用例并发现和跟进bug，通过DPM系统管理版本和BUG，及时做好回归工作，对于测试过程中和开发出现不一致的观点，及时做好沟通负责制定测试计划、测试任务分配、测试进度把控负责制定测试计划、测试任务分配、测试进度把控、测试用例编写负责主体回归测试工作负责组织测试用例评审，安排测试用例的执行、Bug审核、回归测试根据确认的需求文档及测试设计，编写完整测试用例，确保覆盖所有测试场景根据上下游系统要求，编写端到端测试用例支撑各系统测试集成测试根据设计文档编写测试方案、测试用例，并组织测试用例评审根据思维导图进行编写用例，执行测试用例并记录bug根据相关需求找出测试点，编写测试用例根据项目需求及规格书，编写测试用例并参加评审根据需求分析文档，编写测试用例根据需求分析文档，编写测试用例并评审测试用例根据需求规格说明书，编写测试用例，确保用例的覆盖率根据需求规格说明书，编写自动化测试用例根据需求规格说明书，设计文档来设计测试用例根据需求规格说明书、概要设计、开发计划等编写项目总体测试计划根据需求规格说明书及产品特性编写测试方案，提交系统测试计划根据需求规格说明书提取功能点，编写测试用例根据需求和测试方法设计测试用例根据需求说明书协助测试组长编写测试计划根据需求文档，搭建测试环境根据需求文档，熟悉需求根据需求文档，写测试点和用例根据需求文档编写测试点，设计测试用例根据需求文档和需求澄清，编写测试计划，测试用例根据需求文档进行需求分析，熟悉业务流程后，提取并编写测试要点及测试用例根据已有的功能用例，提取可实现自动化测试的内容，整理出对于的自动化测试用例根据用例执行测试，及进行交叉测试跟进版本SIT、UAT阶段测试进度并生成每日测试日报跟进相关进度以及遗留bug跟踪BUG解决情况并协助开发人员重现BUG跟踪缺陷并进行回归bug验证公司内训：负责项目流程培训、自动化测试分享沟通和开发之间对Bug不一致的行为，辅助开发定位问题构建持续集成测试流程，并维护和优化相关基础设施规范用例及缺陷标准，定时发送测试进度报告和PM、产品同步项目风险，组织发布前评审，并发布版本和项目组成员一起了解、分析需求文档回归验证BUG汇总测试执行情况，编写测试报告及时与团队人员进行沟通交流，促进自动化项目的开展与实施记录测试工程师每天提出的Bug，并汇总兼容性测试，IE、谷歌、火狐等主流浏览器将用例上传至SVN，用Jenkins做集成测试阶段性的总结测试问题，并讨论针对容易出现问题模块进行重点关注进行sit以及uat测试，并进行多轮回归测试直到产品符合发布标准进行多轮回归测试直到产品符合发布标准进行回归测试，编写测试总结进行回归测试，随机测试进行缺陷跟踪，并进行回归测试进行缺陷管理和跟踪，进行回归测试进行项目总结看需求文档，跟需求分析师了解项目需求了解电商主要的业务流，参加需求分析以及评审工作了解项目需求，参与需求评审会议，提出自己的疑问和观点利用缺陷管理工具提交BUG，并跟踪BUG的状态每日输出测试日报配合UAT用户验收测试最后进行回归测试配合售后部门开展产品交付后的技术支持工作评审需求规格说明书全权负责考勤模块的测试任务，根据产品需求文档分析需求中不完善地方，积极与开发及BA讨论并完成测试设计确定需求，进入迭代根据需求编写测试用例软件符合测试完成要求后，编写测试报告设计、编写测试用例，并组织用例评审设计、编写测试用例并组织开测试用例评审会设置用户权限和配置通用流程深入了解客户的需求，参与需求分析使用BugFree管理Bug使用BugFree缺陷管理工具、提交缺陷使用clumsy本地机器上造成网络延迟，测试rom扣库进行pos结账使用VP管理工具执行测试用例，提交Bug，并跟踪、验证Bug修复进程使用xmind工具，编写思维导向图详细描述测试点并进行组内互评使用管理工具执行测试用例，提交Bug，并跟踪、验证Bug修复进程输出并分析测试报告输出测试报告输出测试报告，组织发布前评审，并发布版本输出相关测试报告和测试总结熟悉系统业务，梳理测试要点熟悉项目需求和业务流程，参与需求分析和评审熟悉项目需求文档及业务熟悉需求和银行业务熟悉业务需求，参与新需求评审会，并做好评审记录提交Bug到缺陷管理工具eDts上，并积极与开发进行沟通对问题单进行跟踪，及时对已修改的缺陷进行回归验证提交Bug，跟踪处理Bug，确保Bug真正的解决提交并跟踪Bug直到最终是关闭状态提交测试报告，总结项目提交测试报告并总结，编写用户操作手册提交测试过程中的Bug到DTS提交和统计bug并分析原因提交和统计bug，分析原因，并对bug进行跟踪管理提交缺陷报告提交缺陷报告、并对缺陷进行跟踪处理调试和完善脚本，连跑通过后上传GIT库通过TAPD项目管理工具提交Bug，并跟踪管理通过TestLink管理测试用例统计数据，提交测试报告为客户提供股票软件的下载、安装、使用等技术支持维护测试环境后台及协助部分功能测试维护缺陷，总结版本测试文档并发送测试报告详细理解项目中的各个功能，分析用户的需求，设计合理的测试用例并评审协助项目经理进行项目测试进度的控制（测试任务跟踪）严格执行测试用例，和其它测试人员交互执行测试用例依据需求分析编写测试计划、测试方案和测试用例与PM、PO同步项目风险，组织发布前评审，并发布版本与PO、开发确认遗留Bug，提出解决方案，组织测试人员进行回归测试与开发进行沟通，协助开发定位BUG与开发人员沟通bug问题并协助定位问题阅读测试计划，明确自己负责的模块和任务运用Oracle增删改查、多表关联查询等技术对测试数据进行验证在工作中既要负责测试，又对用户及相关人员进行系统的讲解及培训，包括对运维遇到的问题进行详细查看并解答掌握黑盒用例设计方法，如等价类、边界值分析、场景法等并在项目中应用针对平台设计编写测试用例针对需求的变更，更新测试用例，针对修改部分的用例重新执行用例，提交缺陷整理相关测试文档，统计项目数据，整理完整的测试报告支持技术支持部门开展产品交付后的客服工作执行测试用例，BUG审核与回归执行测试用例，并和同组成员交叉进行用例测试，提交缺陷Bug执行测试用例，记录测试结果执行测试用例，记录测试结果，发现bug及时提交，协助开发定位问题执行测试用例，进行功能测试执行测试用例，进行功能测试、UI测试、性能测试、兼容性测试，异常测试（中断、弱网）等执行测试用例，利用禅道缺陷管理工具提交BUG执行测试用例，完成对产品的系统测试，对其功能及其他方面的测试执行测试用例，新老bug的追踪跟进并且回归执行测试用例，寻找bug并对其进行跟踪处理，执行回归测试，编写测试报告执行测试用例，用禅道提交Bug并跟踪管理，并进行回归测试执行测试用例、BUG审核与回归执行测试用例并进行Bug提交和跟踪，向项目经理提交阶段测试小结执行测试用例及提交跟踪缺陷执行回归测试，生成测试报告执行用例，及时提交Bug，协助开发定位Bug，直到问题解决制定测试计划，按时完成项目的测试工作制定每个版本SIT整体测试计划以及SIT、UAT每日测试计划制定自动化测试计划，完成项目的测试工作主要负责根据还款流程来编写还款排序优先级的测试用例主要根据需求规格说明书，设计文档来设计测试用例撰写测试报告总结撰写项目相关文案，为技术支持与线上问题排查提供参考自动化测试执行出现问题时收集相关日志，分析并定位问题，输出测试报告自我总结反思，提高技能，更好的进行测试工作，提高软件的质量总结和分享系统的业务和知识组内人员进行交叉测试，对项目测试情况进行汇总，分析测试结果，编写测试报告组织测试分析总结，分享测试心得组织测试用例评审会，确保测试用例的完备性，执行测试用例，提交测试报告，完整地记录测试结果组织开测试用例评审会作为项目主要测试负责人，参与需求评审2.linux使用ARS部署测试环境编写Shell脚本搭建测试环境对在Linux和AIX系统做兼容性测试编写Shell脚本搭建测试环境（DB2、Oracle、sqlite3、Redis）在ARS上部署测试环境，把PHP、SHTML、JS、CSS文件部署到对应的机器3.自动化Selenium常用操作以及公共方法进行二次封装版本迭代时进行自动化测试，适配相关自动化脚本编写并维护回归测试自动化测试脚本编写自动化测试脚本编写自动化测试脚本，进行回归测试编写自动化脚本，使用ci持续集成，晚上定时跑，分析结果部署自动化测试环境采用PageObject思想封装页面对象采用SeleniumGrid进行分布式并发测试参与项目组供应链部分功能测试+自动化测试参与自动化测试脚本编写（使用Python+Selenium+uittest框架）搭建Python+Selenium+Unittest自动化测试框架搭建Python+Unittest+Selenium+DDT+HTMLReport数据驱动WEBUI测试框架搭建Python+Unittest+Selenium+DDT+HTMLReport数据驱动测试框架搭建Python+Unittest+Selenium+DDT+PO数据关键字混合驱动框架搭建Python+Unittest+Selenium自动化测试框架搭建Python+Unittest+Selenium自动化测试框架，编写脚本进行回归测试搭建WebUI自动化测试框架，针对供应链SCM系统编写脚本实现自动化搭建自动化测试环境，执行自动化测试脚本搭建自动化测试框架，对于测试用例（TestCase）,测试套件（TestSuite）,公共业务抽象流程（Business）、页面对象设计（PageObject）进行分层管理对Selenium进行二次封装和UI自动化脚本的编写对项目进行整体测试包含：ui自动化测试、接口自动化测试、输出相关文档分析自动化测试报告分析自动化测试用例结果负责搭建和部署自动化测试环境负责日常自动化连跑任务的分析与维护根据产品需求，设计自动化测试用例并编写自动化测试脚本及脚本维护根据功能用例整理出自动化测试用例根据模块需求分析，提取UI自动化测试要点根据模块需求分析，整理测试范围及测试点，提取UI自动化测试测试点根据自动化测试用例，确定自动化实现方式、测试点以及检测内容跟踪定位自动化过程中出现的问题跟踪自动化测试结果并输出测试报告更新、维护和优化自动化测试脚本和用例结合DDT完善数据驱动自动化测试进行Selenium二次封装进行自动化测试数据结果分析，提交自动化测试报告了解Python语言，使用Selenium工具运用到自动化测试落实自动化测试计划，编写自动化测试用例能独立应用Python+Unittest+Selenium+DDT构成数据驱动自动化测试框架使用Python+Selenium+Unittest框架编写自动化脚本使用Python+Selenium+Unittest框架实现Web自动化测试脚本使用Python+Selenium自动化框架对冒烟测试所需执行用例进行覆盖使用Python+Selenium，把部分重点用例转化为自动化测试脚本使用Python+Unittest+Selenium/Appium进行UI自动化测试，编写冒烟、回归测试脚本使用Python+Selenium自动化框架对主要功能点进行测试用例代码的编写使用Python+Selenium+HTMLReport自动化框架做web端Ui自动化测试使用Python+Selenium+unittest+requests进行ui及接口自动化测试使用SeleniumGrid进行WEB自动化分布式并行测试使用SeleniumGrid进行分布式自动化并发测试，节约大量测试时间通过Python+Selenium+Unnitest搭建测试框架团队内部推广自动化测试技术系统功能功能稳定后，提取可做自动化测试的功能点，制定测试计划，书写用例新增功能时编写相关自动化测试用例以及脚本，调试通过后上传git库学习编写自动化脚本，针对部分功能进行自动化测试优化测试脚本基于元素的操作进行Selenium二次封装，基于页面使用PageObject封装运行自动化测试脚本在项目组中主要从事接口自动化测试+手机App自动化测试+功能测试执行、分析自动化测试结果，并自动输出自动化测试报告执行并自动生成自动化测试报告、分析自动化测试用例报告4.APP编写APP自动化测试用例、调试、运行采用Python+Appium对Android端进行APP自动化回归测试参与搭建Appium+Python+Unittest框架，编写自动化脚本搭建App测试框架在Appium上运行测试脚本搭建Python+Appium+Unittest框架移动端自动化测试环境搭建Python+Appium+Unittest框架自动化测试环境搭建Python+Unittest+AppiumAPP自动化测试框架搭建Python+Unittest+Appium自动化测试框架搭建Python+Unittest+Appium+DDT+HTMLReport数据驱动APP测试框架对APP进行功能测试，以及使用Monkey进行压力测试负责IOS、Android测试，找到bug并提交到禅道上利用adb工具调用Monkey对程序进行压力测试利用adb工具调用Monkey工具对程序进行压力测试利用ADB命令使用Monkey对APP进行压测使用Appium进行APP自动化测试使用Appscan对产品进行安全扫描使用Emmagee对APP客户端进行性能测试使用GT测试系统的流量、电量、CPU、内存等使用Monkey对app进行稳定测试使用Monkey对APP进行压力测试使用Monkey以及Python编写自动化测试脚本，对APP进行自动化测试使用Python+unittest+appium框架运行脚本使用Testin云测平台进行兼容性测试应用Python+Appium构建移动端自动化测试框架在项目后期不断的进行体验性测试，确保APP的体验性达到最佳主要负责Android系统模块的全功能及自动化测试5.API参与公司接口测试自动化任务搭建Python+Requests接口测试框架，进行API回归测试搭建Python+Unittest+Requests接口自动化测试框架搭建Python+Unittest+Requests自动化测试框架进行API接口测试搭建自动化测试框架，独立编写自动化测试Python脚本、执行接口测试第一版本功能稳定之后开始参与自动化框架的建设（Python+requests+unittest）负责进销存库存的营业线上线下数据同步、服务监控处理业务的接口与数据根据API文档进行接口自动化测试根据接口文档，使用JMeter对相关接口进行冒烟测试根据接口文档，使用Postman工具进行接口测试根据接口文档，使用Python中的Requests库进行接口测试根据接口文档在SoapUI上运行测试脚本，对比接口返回参数与数据库实际的入参出参对比，同时需对比fidder在前台界面抓包的参数是否一致根据开发提供的接口文档，设计、编写测试用例，并组织用例评审接触Fiddler、Postman等工具进行接口测试接口文档，使用Fiddler、Postman、JMeter等工具进行接口测试利用Postman，JMeter做后台接口自动化和压力测试前期执行测试用例，使用OpenAPI、MQ、Postman工具验证接口数据使用Apizza进行接口测试使用Fiddler辅助调试接口使用Fiddler进行抓包并利用Postman进行接口测试使用Fiddler抓包，使用Apizza接口测试使用Fiddler、Postman辅助调试接口使用Fiddler、Postman进行快速接口验证使用Postman进行接口测试使用Postman、JMeter进行接口测试使用Python+Requests做接口自动化测试使用Python+Requests做接口自动化测试，编写冒烟、回归脚本使用Requests+Python进行API回归测试使用Robotest工具对已稳定的功能做web自动化冒烟测试和回归测试，既缩短了测试周期，也保证了软件的质量使用Soapui进行接口自动化测试收集接口设计文档，编写接口测试用例新开发的接口部署上测试环境后通过Postman、JMeter工具发送请求验证返回参数是否与接口文档一致应用Python+Requests进行接口自动化测试主要负责PC端与APP端的接口调通测试，使用JMeter对接口进行压测6.性能产品易用性测试、接口响应时间界面响应时间的性能测试对核心业务模块进行JMeter并发测试（登录、出入库等模块功能）负责了功能验证、redis有效期管理、数据模拟压力、接口测试使用JMeter编写流程用例脚本用来造数据使用JMeter对接口进行功能，性能测试使用JMeter进行性能测试使用loadrunner进行并发测试，协助开发进行优化使用Loadrunner进行性能测试，按照客户给的性能指标进行压力测试使用Loadrunner进行压力测试通过JMeter生成性能测试脚本并进行优化，收集性能测试数据，分析性能测试结果，提交并跟踪性能问题的修复7.持续集成Linux搭建CI持续集成服务器定时从SVN服务器拉取最新测试脚本运行采用Jenkins持续集成回归测试测试环境的搭建，Linux+Jenkins持续集成部署搭建Jenkins部署持续集成环境，进行自动化持续集成代码管理工具使用SVN，使用Jenkins进行持续集成更新用例上传到SVN，通过Jenkins持续集成，定时执行自动化测试脚本构建Jenkins任务进行回归测试将自动化测试用例上传至SVN，使用Jenkins进行持续集成测试将自动化测试用例提交到GIT版本库，使用Jenkins进行持续集成测试了解Jenkins集成工具，使用Jenkins进行持续集成每日更新用例上传到SVN，通过Jenkins持续集成，定时执行自动化测试脚本每日更新自动化测试用例上传SVN，通过Jenkins持续集成，定时执行自动化测试脚本使用ci持续集成进行持续的脚本执行使用Jenkins进行自动化脚本的持续集成和改进使用JMeter+Ant+Jenkins集成接口自动化使用持续集成工具Jenkins定时跑自动化测试脚本通过JMeter+Ant+Jenkins集成接口自动化测试及输出接口自动化报告通过SeleniumGrid及Jenkins进行分布式自动化集成测试"}}